<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:					HE_SNMP_Get&#xD;
//	CREATOR:				Helgevold - Jan Magne Dybvik&#xD;
// REQUIREMENTS: NX CPU&#xD;
//&#xD;
// DESCRTIPTION: 	Leser en Portstatus via SNMP Get-Request&#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	 VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	 1.0					2024-05-15		Jan Magne Dybvik	Initial release&#xD;
//	 1.1					2024-06-11		Jan Magne Dybvik	Lagt til tellere for feil og suksess&#xD;
//  1.1.1				2024-09-11		Jan Magne Dybvik	Teller for flere forsøk før resultatet nullstilles, Enumeration for definering av tilstand&#xD;
//  1.1.2				2024-09-13		Jan Magne Dybvik	Se etter Error i ConfigureRequest steget&#xD;
//	 1.1.3				2025-04-30		Ruben Byman			Økt Wrk_OID til 48&#xD;
//	 1.1.4				2025-05-20		Jan Magne Dybvik	Timeout av Config og Response steg for å unngå heng&#xD;
//&#xD;
//================================================================================================================================&#xD;
&#xD;
&#xD;
CASE Wrk_State OF&#xD;
	&#xD;
	Waiting: // Wait for turn&#xD;
		IF Ext_Telegram.Token = Ext_TokenID AND NOT Ext_Telegram.Busy AND Ext_Telegram.Ready THEN&#xD;
			Wrk_State := ConfigureRequest;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		END_IF;&#xD;
		&#xD;
	ConfigureRequest: // Configure SNMP request&#xD;
		IF Cfg_SNMP_ver1 THEN&#xD;
			Ext_Telegram.SNMP_Ver := 0;&#xD;
		ELSE&#xD;
			Ext_Telegram.SNMP_Ver := 1;&#xD;
		END_IF;&#xD;
		Ext_Telegram.RemotePort := Cfg_RemotePort;&#xD;
		Ext_Telegram.RemoteIP := Cfg_RemoteIP;&#xD;
		Ext_Telegram.Community := Cfg_Community;&#xD;
		Wrk_OID := Cfg_OID;&#xD;
		Ext_Telegram.OID := Wrk_OID;&#xD;
		Ext_Telegram.Execute := TRUE;&#xD;
		Ext_Telegram.Timeout := Cfg_Timeout;&#xD;
		&#xD;
		IF Ext_Telegram.Busy THEN&#xD;
			Sts_Done := FALSE;&#xD;
			Sts_Error := FALSE;&#xD;
			Wrk_State := WaitForResponse;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			&#xD;
		ELSIF  Ext_Telegram.Error THEN&#xD;
			Wrk_ErrorCode := Ext_Telegram.ErrorCode;&#xD;
			Wrk_State := Waiting;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Ext_Telegram.Token :=Ext_Telegram.Token + 1;&#xD;
			Wrk_Errors := Wrk_Errors + 1;&#xD;
			Wrk_Retries :=Wrk_Retries +1;&#xD;
			Sts_Busy :=FALSE;&#xD;
			Sts_Error := TRUE;&#xD;
			Ext_Telegram.Execute := FALSE;&#xD;
			&#xD;
		ELSIF Wrk_TimeInState &gt; T#10s THEN&#xD;
			Wrk_ErrorCode := 16#8000000; // Timeout error code&#xD;
			Wrk_State := Waiting;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Ext_Telegram.Token :=Ext_Telegram.Token + 1;&#xD;
			Wrk_Errors := Wrk_Errors + 1;&#xD;
			Wrk_Retries :=Wrk_Retries +1;&#xD;
			Sts_Busy :=FALSE;&#xD;
			Sts_Error := TRUE;&#xD;
		END_IF;&#xD;
	&#xD;
	WaitForResponse: // Wait for Result&#xD;
		Sts_Busy :=TRUE;&#xD;
		Ext_Telegram.Execute := FALSE;&#xD;
		&#xD;
		IF Ext_Telegram.Done THEN&#xD;
			Wrk_State := Waiting;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Ext_Telegram.Token :=Ext_Telegram.Token + 1;&#xD;
			Val_ResponseValue := Ext_Telegram.ResponseValue;&#xD;
			Val_ResponseString := Ext_Telegram.ResponseString;&#xD;
			Wrk_Successes := Wrk_Successes + 1;&#xD;
			Wrk_Retries :=0;&#xD;
			Sts_Busy :=FALSE;&#xD;
			Sts_Done := TRUE;&#xD;
&#xD;
		ELSIF Ext_Telegram.Error THEN&#xD;
			Wrk_ErrorCode := Ext_Telegram.ErrorCode;&#xD;
			Wrk_State := Waiting;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Ext_Telegram.Token :=Ext_Telegram.Token + 1;&#xD;
			Wrk_Errors := Wrk_Errors + 1;&#xD;
			Wrk_Retries :=Wrk_Retries +1;&#xD;
			Sts_Busy :=FALSE;&#xD;
			Sts_Error := TRUE;&#xD;
			&#xD;
		ELSIF NOT Ext_Telegram.Busy THEN&#xD;
			Wrk_State := Waiting;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Ext_Telegram.Token :=Ext_Telegram.Token + 1;&#xD;
			Wrk_Retries :=Wrk_Retries +1;&#xD;
			Wrk_Errors := Wrk_Errors + 1;&#xD;
			Sts_Busy :=FALSE;&#xD;
			&#xD;
		ELSIF Wrk_TimeInState &gt; T#10s THEN&#xD;
			Wrk_ErrorCode := 16#8000000; // Timeout error code&#xD;
			Wrk_State := Waiting;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Ext_Telegram.Token :=Ext_Telegram.Token + 1;&#xD;
			Wrk_Errors := Wrk_Errors + 1;&#xD;
			Wrk_Retries :=Wrk_Retries +1;&#xD;
			Sts_Busy :=FALSE;&#xD;
			Sts_Error := TRUE;&#xD;
			&#xD;
		END_IF;&#xD;
		&#xD;
		// Clear recieved data if max retries is exceeded&#xD;
		IF Cfg_MaxRetries &lt; Wrk_Retries THEN&#xD;
			Val_ResponseValue := 0;&#xD;
			Val_ResponseString := '';&#xD;
		END_IF;&#xD;
			&#xD;
ELSE // Undefined state&#xD;
	Wrk_State := Waiting;&#xD;
	Wrk_TimeInState := T#0s;&#xD;
	Ext_Telegram.Execute := FALSE;&#xD;
	Ext_Telegram.Token :=Ext_Telegram.Token + 1;&#xD;
	&#xD;
END_CASE;&#xD;
&#xD;
 // Get Interval Time&#xD;
 Wrk_TaskIntervalTime := GetMyTaskInterval();&#xD;
 // Increment state time&#xD;
 Wrk_TimeInState :=  ADD_TIME(In1:=Wrk_TimeInState, In2:=Wrk_TaskIntervalTime);&#xD;
&#xD;
// Increment TokenID for next instance&#xD;
Ext_TokenID := Ext_TokenID + 1;</Text></StructuredTextModel>