<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME: 	HE_FrekvOmf_ATV320_Wrapper&#xD;
//	CREATOR:	                                                                                                                                                                                                                                                  &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION			DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//  1.0.0				31.01.2025		JMD							Draft&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		DESCRIPTION:&#xD;
//&#xD;
//		FUNCTION:&#xD;
//&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update Inputs&#xD;
 *************************************************************************)&#xD;
 &#xD;
// Input Parmeter&#xD;
Wrk_VFD_Logic.Cfg_AutoInUse:=				Cfg_AutoAvailable;&#xD;
Wrk_VFD_Logic.Inp_AutoRunFwd:=			Inp_AutoStartRef;&#xD;
Wrk_VFD_Logic.Inp_AutoSpeedRef:=			Inp_AutoSpeedRef;&#xD;
Wrk_VFD_Logic.Inp_Interlock := 					Inp_Interlock;&#xD;
Wrk_VFD_Logic.Cfg_Interlock_InUse:=		Cfg_Interlock_InUse;&#xD;
Wrk_VFD_Logic.Inp_Interlock:=					Inp_Interlock;&#xD;
Wrk_VFD_Logic.Cfg_Interlock_InUse:=		Cfg_Interlock_InUse;&#xD;
Wrk_VFD_Logic.Cfg_STO_InUse:=				Cfg_STO_InUse;&#xD;
Wrk_VFD_Logic.Inp_ComFault:= 					Inp_EIP_Interface[Cfg_DriveIP];&#xD;
Wrk_VFD_Logic.Inp_AlmSuppress:=			Inp_AlmSuppress;&#xD;
Wrk_VFD_Logic.Inp_AlmSuppressDesc:= 	Inp_AlmSuppressDesc;&#xD;
Wrk_VFD_Logic.Cfg_AlmSuppress_IfOff:=	Cfg_AlmSuppress_IfOff;&#xD;
&#xD;
// Fieldbus Input&#xD;
Wrk_VFD_Logic.Inp_Online :=						    Ext_VFD_Input.Par100.Bit[1];&#xD;
Wrk_VFD_Logic.Inp_Ready := 							Ext_VFD_Input.Par100.Bit[1];&#xD;
Wrk_VFD_Logic.Inp_RunningFwd := 				Ext_VFD_Input.Par100.Bit[6];&#xD;
Wrk_VFD_Logic.Inp_Remote :=						Ext_VFD_Input.Par100.Bit[0];&#xD;
Wrk_VFD_Logic.Inp_Error  := 							Ext_VFD_Input.Par110.Wrd &gt; 0;&#xD;
Wrk_VFD_Logic.Inp_Warning := 						Ext_VFD_Input.Par111.Wrd &gt; 0;&#xD;
Wrk_VFD_Logic.Inp_LocalStop := 					FALSE;&#xD;
Wrk_VFD_Logic.Inp_VoltageEnabled :=			TRUE;&#xD;
Wrk_VFD_Logic.Inp_STO :=	 							FALSE;&#xD;
&#xD;
Wrk_VFD_Logic.Inp_ActSpeed := ScaleTrans(&#xD;
											   		SclIn:=WORD_TO_INT(Ext_VFD_Input.Par302.Wrd),&#xD;
												  	X0:=0,&#xD;
												  	Y0:=0,&#xD;
												  	X1:=10000,&#xD;
												  	Y1:=100);&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	VFD Power, Current, Energy&#xD;
 *************************************************************************)&#xD;
	Wrk_VFD_Logic.Inp_Power :=  (INT_TO_REAL(DWORD_TO_INT(Ext_VFD_Input.Par351.DWrd)) / 1000.0); //kW&#xD;
	Wrk_VFD_Logic.Inp_Current := WORD_TO_REAL(Ext_VFD_Input.Par335.Wrd) / 10; //A&#xD;
	&#xD;
	//Wrk_FrekvOmf_Logic.Inp_Energy **N/A&#xD;
	&#xD;
(*************************************************************************&#xD;
 *	Runtime Statistics&#xD;
 *************************************************************************)&#xD;
 &#xD;
	Wrk_VFD_Logic.Inp_VFD_TotalOnTime :=	DWORD_TO_ULINT(Ext_VFD_Input.Par353.DWrd);	&#xD;
	Wrk_VFD_Logic.Inp_VFD_TotalRunTime :=	DWORD_TO_ULINT(Ext_VFD_Input.Par354.DWrd);&#xD;
	&#xD;
(*************************************************************************&#xD;
 *	Execute VFD Logic&#xD;
 *************************************************************************)&#xD;
	Wrk_VFD_Logic(Ext_VFD:=Ext_VFD, &#xD;
							Int_Alarm:=Int_Alarm);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update SCADA&#xD;
 *************************************************************************)&#xD;
&#xD;
//Ext_VFD.SCADA.VFD_STATE **Hentes fra explicit message&#xD;
//Ext_VFD.SCADA.ERROR **Hentes fra explicit message&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update Outputs&#xD;
 *************************************************************************)&#xD;
&#xD;
// Output Parameters&#xD;
Sts_AvailableAuto := 	Wrk_VFD_Logic.Sts_AvailableAuto;&#xD;
Sts_Interlock := 			Wrk_VFD_Logic.Sts_Interlock;&#xD;
Sts_RunningFwd := 		Wrk_VFD_Logic.Sts_RunningFwd;&#xD;
&#xD;
// Fieldbus Output&#xD;
&#xD;
Ext_VFD_Output.Par2 				:= Wrk_VFD_Logic.Out_RunFwd; //Run fwd&#xD;
Ext_VFD_Output.Par8 				:= Wrk_VFD_Logic.Out_FaultReset; // Fault Reset&#xD;
Ext_VFD_Output.Par1 				:= NOT Inp_Interlock;; //Set remote/lokal&#xD;
Ext_VFD_Output.Par20.Wrd 	:=1; //Constanst freq&#xD;
Ext_VFD_Output.Par21.Wrd		:=0; //Auto control&#xD;
Ext_VFD_Output.Par3 				:= TRUE; //Copy to local&#xD;
Ext_VFD_Output.Par30.Wrd 	:=	INT_TO_WORD(REAL_TO_INT(ScaleTrans(&#xD;
															SclIn:=Wrk_VFD_Logic.Val_SpeedRef,&#xD;
															X0:=0.0,&#xD;
															Y0:=0.0,&#xD;
															X1:=100.0,&#xD;
															Y1:=10000)));&#xD;
&#xD;
</Text></StructuredTextModel>