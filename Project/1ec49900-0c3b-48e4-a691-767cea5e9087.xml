<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME: 	  HE_VFD_FC202_Wrapper                                                                                                                                                                                                                                                                   &#xD;
//	CREATOR:	  William Veim                                                                                                                                                                                                                                                &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION			DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//  1.0.0				25.02.2025		WV							Draft&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		DESCRIPTION:&#xD;
//&#xD;
//		FUNCTION:&#xD;
//&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update Inputs&#xD;
 *************************************************************************)&#xD;
 &#xD;
// Input Parmeter&#xD;
Wrk_VFD_Logic.Inp_AutoRunFwd:=		Inp_AutoStartRef;&#xD;
Wrk_VFD_Logic.Inp_AutoSpeedRef:=		Inp_AutoSpeedRef;&#xD;
Wrk_VFD_Logic.Inp_Interlock := 			Inp_Interlock;&#xD;
Wrk_VFD_Logic.Cfg_Interlock_InUse:=	Cfg_Interlock_InUse;&#xD;
Wrk_VFD_Logic.Inp_Interlock:=				Inp_Interlock;&#xD;
Wrk_VFD_Logic.Cfg_Interlock_InUse:=	Cfg_Interlock_InUse;&#xD;
Wrk_VFD_Logic.Cfg_STO_InUse:=			Cfg_STO_InUse;&#xD;
Wrk_VFD_Logic.Inp_ComFault:= 			Inp_EIP_Interface[Cfg_DriveIP];&#xD;
Wrk_VFD_Logic.Inp_AlmSuppress:=			Inp_AlmSuppress;&#xD;
Wrk_VFD_Logic.Inp_AlmSuppressDesc:= 	Inp_AlmSuppressDesc;&#xD;
Wrk_VFD_Logic.Cfg_AlmSuppress_IfOff:=	Cfg_AlmSuppress_IfOff;&#xD;
&#xD;
// Fieldbus Input&#xD;
Wrk_VFD_Logic.Inp_Online :=						    Ext_VFD_Input.FB_StatusWrd.Bit[2] AND Ext_VFD_Input.FB_StatusWrd.Bit[10];&#xD;
Wrk_VFD_Logic.Inp_Ready := 							Ext_VFD_Input.FB_StatusWrd.Bit[2];&#xD;
Wrk_VFD_Logic.Inp_VoltageEnabled :=				Ext_VFD_Input.FB_StatusWrd.Bit[10];&#xD;
Wrk_VFD_Logic.Inp_RunningFwd := 					Ext_VFD_Input.FB_StatusWrd.Bit[3];&#xD;
Wrk_VFD_Logic.Inp_Error  := 								Ext_VFD_Input.FB_StatusWrd.Bit[7];&#xD;
Wrk_VFD_Logic.Inp_Warning := 						Ext_VFD_Input.FB_StatusWrd.Bit[8];&#xD;
Wrk_VFD_Logic.Inp_Remote :=							Ext_VFD_Input.FB_StatusWrd.Bit[0];&#xD;
Wrk_VFD_Logic.Inp_LOTO:=								Ext_VFD_Input.FB_DigitalIn.Bit[0];							&#xD;
Wrk_VFD_Logic.Inp_STO:=									FALSE;&#xD;
&#xD;
Wrk_VFD_Logic.Inp_ActSpeed := ScaleTrans(&#xD;
											   		SclIn:=INT_TO_REAL(WORD_TO_INT(Ext_VFD_Input.FB_AcutalValue.Wrd)),&#xD;
												  	X0:=REAL#0.0,&#xD;
												  	Y0:=REAL#0.0,&#xD;
												  	X1:=REAL#10000.0,&#xD;
												  	Y1:=REAL#100.0,&#xD;
													SclOfs := REAL#0.0);&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	VFD Power, Current, Energy&#xD;
 *************************************************************************)&#xD;
	Wrk_VFD_Logic.Inp_Power :=  INT_TO_REAL(WORD_TO_INT(Ext_VFD_Input.FB_MotorPower.Wrd)) * 0.01; // kW&#xD;
	Wrk_VFD_Logic.Inp_Current := INT_TO_REAL(WORD_TO_INT(Ext_VFD_Input.FB_MotorCurrent.Wrd)) * 0.1;&#xD;
	Wrk_Energy := INT_TO_REAL(WORD_TO_INT(Ext_VFD_Input.FB_EnergyCounter.Wrd)) * 1e-1; // kWh&#xD;
	Wrk_VFD_Logic.Inp_Energy := Wrk_Energy;&#xD;
	&#xD;
(*************************************************************************&#xD;
 *	Runtime Statistics&#xD;
 *************************************************************************)&#xD;
&#xD;
	IF Wrk_VFD_Logic.Sts_RunningFwd THEN&#xD;
			Wrk_Runtime := ADD_TIME(Wrk_Runtime, GetMyTaskInterval()); &#xD;
	END_IF;&#xD;
	&#xD;
&#xD;
	&#xD;
(*************************************************************************&#xD;
 *	Execute VFD Logic&#xD;
 *************************************************************************)&#xD;
Wrk_VFD_Logic(Ext_VFD:=Ext_VFD, &#xD;
							Int_Alarm:=Int_Alarm);&#xD;
(*************************************************************************&#xD;
 *	Update SCADA&#xD;
 *************************************************************************)&#xD;
&#xD;
// Frekvensomformer Status&#xD;
Ext_VFD.EXT_Operator.Actual_State := HE_FC202_Drive_State(Inp_InverterStatus := Ext_VFD_Input.FB_StatusWrd.Wrd);&#xD;
Ext_VFD.EXT_Operator.Active_Error:=HE_FC202_Drive_Fault(Inp_InverterFault := Ext_VFD_Input.FB_AlarmWrd.DWrd);&#xD;
Ext_VFD.EXT_Statistics.Runtime_VFD := LINT_TO_UDINT( TimeToSec(Wrk_Runtime) / 3600);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update Outputs&#xD;
 *************************************************************************)&#xD;
&#xD;
// Output Parameters&#xD;
Sts_AvailableAuto := Wrk_VFD_Logic.Sts_AvailableAuto;&#xD;
Sts_Interlock := Wrk_VFD_Logic.Sts_Interlock;&#xD;
Sts_RunningFwd := Wrk_VFD_Logic.Sts_RunningFwd;&#xD;
&#xD;
// Fieldbus Output&#xD;
Ext_VFD_Output.FB_ControlWrd.Bit[1] :=Wrk_VFD_Logic.Out_RunFwd; // Run FWD Command&#xD;
Ext_VFD_Output.FB_ControlWrd.Bit[0] := NOT Inp_Interlock; // Enable VFD&#xD;
Ext_VFD_Output.FB_ControlWrd.Bit[4] := TRUE; // Run fwd&#xD;
Ext_VFD_Output.FB_ControlWrd.Bit[7] := TRUE; // Remote cntrl&#xD;
Ext_VFD_Output.FB_ControlWrd.Bit[8] := TRUE; // External reference&#xD;
Ext_VFD_Output.FB_ControlWrd.Bit[3]:= Wrk_VFD_Logic.Out_FaultReset; // Fault Reset&#xD;
Ext_VFD_Output.FB_Reference.Wrd:= INT_TO_WORD(REAL_TO_INT(ScaleTrans(&#xD;
												SclIn:=Wrk_VFD_Logic.Val_SpeedRef,&#xD;
												X0:=0.0,&#xD;
												Y0:=0.0,&#xD;
												X1:=100.0,&#xD;
												Y1:=10000.0)));</Text></StructuredTextModel>