<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME:			Digital Styring                                                                                                                                                                                                                                                                           &#xD;
//	CREATOR:		Helgevold - William Veim                                                                                                                                                                                                                                                              &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION			DATE					SIGN							DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//	1.0.0					2023-09-04			William Veim			    Initial release&#xD;
// 2.0.0					2025-03-10			Fredrik Bjerkenes			Rework&#xD;
//&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		FUNCTIONALITY:&#xD;
//		*	Operasjonsmodus:&#xD;
//			-	OFF				OFF&#xD;
//			-	MANUAL	Manual control &#xD;
//			-	AUTO			Controlled from (AUTO_Output)&#xD;
//		*	Feedback to SCADA&#xD;
//		*	Makes fault if difference output/feedback is present&#xD;
//		*	Stops when interlocked&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
(*************************************************************************&#xD;
 *	INITIAL/SYSTEM VARIABELS&#xD;
 *************************************************************************)&#xD;
 &#xD;
Wrk_CurrentTime := 					TruncTod(DT_TO_TOD(In:=GetTime()), _SEC);&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	MODE CONTROL&#xD;
 *************************************************************************)&#xD;
 &#xD;
CASE Ext_DigitalControl.EXT_Operator.Mode OF&#xD;
		&#xD;
		0://OFF&#xD;
		Wrk_Output := FALSE;&#xD;
		&#xD;
		1://Manual Control&#xD;
		Wrk_Output := TRUE;&#xD;
		&#xD;
		2://Auto Control&#xD;
		Wrk_Output := Inp_Auto_Gain;&#xD;
		&#xD;
		3://TIMER&#xD;
				//Start control (based on time of day)&#xD;
				RE_TimerStart(Clk:=Wrk_CurrentTime = HE_INT2TOD(Hour:=Ext_DigitalControl.EXT_Engineering.Timer_StartTime_Hour, Minute:=Ext_DigitalControl.EXT_Engineering.Timer_StartTime_Minute));&#xD;
				&#xD;
				IF RE_TimerStart.Q THEN&#xD;
					Wrk_Output := TRUE;&#xD;
				ELSIF Wrk_TOD_TimedRun.Q THEN&#xD;
					Wrk_Output := FALSE;&#xD;
				END_IF;&#xD;
		&#xD;
END_CASE;&#xD;
&#xD;
Wrk_TOD_TimedRun(In:=Ext_DigitalControl.EXT_Operator.Mode=3, PT:=SecToTime(Ext_DigitalControl.EXT_Engineering.Timer_RunTime)); //Running time in timer mode&#xD;
&#xD;
(*************************************************************************&#xD;
 *	FEEDBACK CONTROL&#xD;
 *************************************************************************)&#xD;
 &#xD;
CASE Cfg_Feedback_Type OF&#xD;
	&#xD;
    0: //No feedback/loopback&#xD;
	IF Out_Output XOR Ext_DigitalControl.EXT_Engineering.StateMode THEN&#xD;
		Wrk_Feedback := 1;&#xD;
	ELSE&#xD;
		Wrk_Feedback := 0;&#xD;
	END_IF;&#xD;
		&#xD;
	1: //General feedback&#xD;
	IF Inp_Feedback_General THEN&#xD;
		Wrk_Feedback:= 1;&#xD;
	ELSE&#xD;
		Wrk_Feedback:=0;&#xD;
	END_IF;&#xD;
	&#xD;
	2: //Open and closed feedback&#xD;
	IF Inp_Feedback_Open AND NOT Inp_Feedback_Closed THEN&#xD;
		Wrk_Feedback:=1;//Open state&#xD;
	ELSIF NOT Inp_Feedback_Open AND Inp_Feedback_Closed THEN&#xD;
		Wrk_Feedback:=0;//Closed state&#xD;
	ELSIF Inp_Feedback_Open AND Inp_Feedback_Closed THEN&#xD;
		Wrk_Feedback:=2;//Uncertian state&#xD;
	ELSIF NOT Inp_Feedback_Open AND NOT Inp_Feedback_Closed THEN&#xD;
		Wrk_Feedback:=2;//Uncertian state&#xD;
	END_IF;&#xD;
	&#xD;
END_CASE;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	FAULT AND STATE CONTROL&#xD;
 *************************************************************************)&#xD;
&#xD;
//FAULT CONTROL&#xD;
//---------------------------&#xD;
//Feilmelding ved avvik på pådrag og tilbakemelding&#xD;
DigitalFault(ENS:=TRUE, &#xD;
					Reset:=FALSE, &#xD;
					Output:=Wrk_Output, &#xD;
					Feedback_Type:=Cfg_Feedback_Type, &#xD;
					Feedback_General:=Inp_Feedback_General, &#xD;
					Feedback_Open:=Inp_Feedback_Open, &#xD;
					Feedback_Closed:=Inp_Feedback_Closed,&#xD;
					Delay:= SecToTime(Ext_DigitalControl.EXT_Engineering.StateCfg_FeedbackDelay));&#xD;
&#xD;
Wrk_DeviationFault:=DigitalFault.Fault;&#xD;
Wrk_ModuleFault:=Inp_ModuleFault;&#xD;
Wrk_Interlock:=Inp_Interlock;&#xD;
&#xD;
// STATE CONTROL&#xD;
//------------------&#xD;
&#xD;
//Resetter variabler før løkke&#xD;
Ext_DigitalControl.EXT_General.Sts_Quality := 0;&#xD;
Wrk_ValueState:=	0;&#xD;
Wrk_AlarmState:=	FALSE;&#xD;
Wrk_AlarmSuffix:=	'';&#xD;
&#xD;
//Module fault&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_1.Sts_State := Wrk_ModuleFault;&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_1.Sts_Desc := 'Module fault';&#xD;
HE_StateControl(Inp_StateData:=Ext_DigitalControl.EXT_Engineering.StateCfg_1, &#xD;
							Sts_Quality:=Ext_DigitalControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Interlock&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_2.Sts_State := Wrk_Interlock;&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_2.Sts_Desc := 'Interlock';&#xD;
HE_StateControl(Inp_StateData:=Ext_DigitalControl.EXT_Engineering.StateCfg_2, &#xD;
							Sts_Quality:=Ext_DigitalControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_1.Sts_Visible:=Cfg_Interlock_InUse;//Vises bare dersom interlock er i bruk&#xD;
&#xD;
//Deviation fault&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_3.Sts_State := Wrk_DeviationFault;&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_3.Sts_Desc := 'Deviation fault';&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_3.Sts_Visible:=Cfg_Feedback_Type&gt;0;&#xD;
HE_StateControl(Inp_StateData:=Ext_DigitalControl.EXT_Engineering.StateCfg_3, &#xD;
							Sts_Quality:=Ext_DigitalControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
Ext_DigitalControl.EXT_Engineering.StateCfg_1.Sts_Visible:=Cfg_Feedback_Type&gt;0;//Vises bare dersom tilbakemelding brukes&#xD;
&#xD;
CASE Wrk_ValueState OF&#xD;
	&#xD;
	0://Use value&#xD;
	Ext_DigitalControl.EXT_Operator.Actual_Output:= Ext_DigitalControl.EXT_Operator.Actual_Output;&#xD;
	&#xD;
	1://Hold value&#xD;
	Ext_DigitalControl.EXT_Operator.Actual_Output:=Ext_DigitalControl.EXT_Operator.Actual_Output;&#xD;
	&#xD;
	2://Pre defined output&#xD;
	Ext_DigitalControl.EXT_Operator.Actual_Output:=Ext_DigitalControl.EXT_Engineering.StateCfg_PreDefinedOutput;&#xD;
	&#xD;
END_CASE;	&#xD;
&#xD;
(*************************************************************************&#xD;
 *	ALARM CONTROL&#xD;
 *************************************************************************)&#xD;
 &#xD;
Wrk_AlarmGeneral.Inp_Connected_Cabinet:=				Cfg_ControlCabinet;&#xD;
Wrk_AlarmGeneral.Inp_Connected_Controller:=				Cfg_ControllerTAG;&#xD;
Wrk_AlarmGeneral.Inp_Process_TAG:=							Cfg_ProcessTAG;&#xD;
Wrk_AlarmGeneral.Inp_Process_Desc:=							Ext_DigitalControl.EXT_General.Process_Desc;&#xD;
Wrk_AlarmGeneral.Inp_Process_Suffix:=							Wrk_AlarmSuffix;&#xD;
Wrk_AlarmGeneral.Inp_Process_Value:=							'';&#xD;
&#xD;
Wrk_AlarmGeneral(ENS:=TRUE, &#xD;
								Ext_Alarm:=Ext_DigitalControl.EXT_Alarm, &#xD;
								Int_Alarm:=Int_Alarm);	&#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATE STRUCTURE AND OUTPUT&#xD;
 *************************************************************************)&#xD;
TON_Switch(In:=Wrk_Output&lt;&gt;Wrk_OutputSample, PT:=SecToTime(Ext_DigitalControl.EXT_Engineering.SwitchDelay));&#xD;
IF TON_Switch.Q //Waiting for switching delay&#xD;
	OR Ext_DigitalControl.EXT_Operator.Mode=3 //Timer mode&#xD;
	OR Wrk_Interlock THEN //Interlock active&#xD;
	&#xD;
	IF  Ext_DigitalControl.EXT_Engineering.StateMode THEN&#xD;
		Out_Output := NOT(Wrk_Output);&#xD;
	ELSE&#xD;
		Out_Output:=Wrk_Output;&#xD;
	END_IF;&#xD;
ELSE&#xD;
	Wrk_OutputSample:=Wrk_Output;&#xD;
END_IF;&#xD;
&#xD;
//STRUCTURE DATA&#xD;
Ext_DigitalControl.EXT_General.Process_TAG:=Cfg_ProcessTAG;&#xD;
Ext_DigitalControl.EXT_General.Connected_ControlCabinet:=Cfg_ControlCabinet;&#xD;
Ext_DigitalControl.EXT_General.Controlled_FromController:=Cfg_ControllerTAG;&#xD;
Ext_DigitalControl.INT_Data.AutoAvailable := Ext_DigitalControl.EXT_Operator.Mode = 2 &#xD;
																		AND NOT Wrk_AlarmState&#xD;
																		AND NOT Wrk_Interlock;&#xD;
&#xD;
//OUTPUS&#xD;
Sts_AutoAvailable := Ext_DigitalControl.INT_Data.AutoAvailable;&#xD;
Sts_Fault:=Wrk_AlarmState;&#xD;
&#xD;
</Text></StructuredTextModel>