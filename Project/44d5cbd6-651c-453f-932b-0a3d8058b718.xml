<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:						HE_SMS&#xD;
//	CREATOR:					William Veim&#xD;
//	COMPANY:				Helgevold&#xD;
// REQUIREMENTS: 		NX CPU (INCLUDED TLS)&#xD;
//&#xD;
// DESCRTIPTION: 	SMS control via RT100&#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	 VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	1.0.0				07-04-2025		William Veim				Initial release&#xD;
//	1.0.1				30-04-2025		Ruben Byman				Added Sts_ConnectionError&#xD;
//	1.0.2				20-05-2025		Ruben Byman				Bug fixing receiver list making, trigging of FB to send SMS and message generation and timer between priorities&#xD;
//	1.0.3				22-05-2025		Ruben Byman				Added emergency message&#xD;
// 1.0.4				28-05-2025		Fredrik Bjerkenes			added angle bracket (&gt;=) AlarmST upper bound. Also added step to initialize AlarmFound to false before entering FOR Loop. Rising edge to reset Alarmfound In Case Of RT100 Sms Done or SMS Error.&#xD;
// 1.1.0				02-06-2025		Jan Magne Dybvik		Endret leting etter alarm og sending av SMS til state machine&#xD;
// 1.1.1				10-06-2025		Jan Magne Dybvik		Add recieved message to Recive buffer&#xD;
// 1.1.2				11-06-2025		Jan Magne Dybvik		Removed Old recive buffer logic. Changed parameter name from Cfg_Mode to Cfg_CheckInbox&#xD;
// 1.1.3				11-06-2025		Jan Magne Dybvik		Edited logic for deletion of recieved message from stack&#xD;
// 1.1.4				11-06-2025		Jan Magne Dybvik		Edited logic for alarm acknowledgement&#xD;
// 1.1.5				11-06-2025		Jan Magne Dybvik		Added alarm index to sent message and retrives alarm index from recieved message&#xD;
// 1.1.6				26-06-2025		Jan Magne Dyvbik		Added function to reset alarm escalation countdown when message is recieved&#xD;
// 1.1.7				23-07-2025		Fredrik Bjerkenes			Case of Siren priority changed from alarmsend_Index to Int_alarm[AlarmSend_index].Sts_Alarm_Priority, Wrk_AlertStarted is now being reset if there no active alarms present. &#xD;
// 1.1.7				24-07-2025 		Fredrik Bjerkenes			Moved TON siren instance to outside of IF and removed IF.&#xD;
//================================================================================================================================&#xD;
&#xD;
(*************************************************************************&#xD;
 *	IMPORTING SYSTEM VARIABLES&#xD;
 *************************************************************************)&#xD;
 //Retrieves current clock from PLC&#xD;
Time_Current := TruncTod(DT_TO_TOD(In:=GetTime()), _SEC);&#xD;
DayOfWeek:= GetDayOfWeek(In:=GetTime());&#xD;
&#xD;
  // Get Interval Time&#xD;
 Wrk_TaskIntervalTime := GetMyTaskInterval();&#xD;
 &#xD;
 // Initialize variables&#xD;
Wrk_SMS_Send := FALSE;&#xD;
 &#xD;
  (*************************************************************************&#xD;
 *	VARIABLE CONTROL&#xD;
 *************************************************************************)&#xD;
 //Some idiot came up with the idea to have start and end time for each shift type, so here's the result:&#xD;
 &#xD;
 //DAY SHIFT&#xD;
 //------------&#xD;
&#xD;
 //End time is lower than start time (ex: Start 16:00, end 08:00). &#xD;
 IF HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_DayShift_StartTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_DayShift_StartTime_Minute) &gt; HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_DayShift_EndTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_DayShift_EndTime_Minute) THEN&#xD;
 	Wrk_DayShift_Duration:=  ADD_TIME(&#xD;
								 				In1:= SUB_TIME(In1:=TIME#24h, In2:=HE_INT2TIME(Hour:=Ext_Settings.EXT_Engineering.Cfg_DayShift_StartTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_DayShift_StartTime_Minute)) , &#xD;
												In2:=HE_INT2TIME(Hour:=Ext_Settings.EXT_Engineering.Cfg_DayShift_EndTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_DayShift_EndTime_Minute));&#xD;
	IF Time_Current &gt; HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_DayShift_StartTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_DayShift_StartTime_Minute) THEN&#xD;
		RE_DayShiftActive(Clk:=TRUE);&#xD;
	ELSE&#xD;
		RE_DayShiftActive(Clk:=FALSE);&#xD;
	END_IF;&#xD;
	IF RE_DayShiftActive.Q THEN&#xD;
		 Ext_Settings.EXT_Engineering.Sts_DayShift_Active:=TRUE;&#xD;
	ELSIF Ext_Settings.EXT_Engineering.Sts_DayShift_Active THEN&#xD;
		Wrk_DayShift_DurationCurrent := ADD_TIME(In1:=Wrk_DayShift_DurationCurrent, In2:=Wrk_TaskIntervalTime);&#xD;
	END_IF;&#xD;
	IF Wrk_DayShift_DurationCurrent &gt;= Wrk_DayShift_Duration THEN &#xD;
		Ext_Settings.EXT_Engineering.Sts_DayShift_Active:=FALSE;&#xD;
	END_IF;&#xD;
//End time is bigger than start time (ex: Start 16:00, end 18:00).&#xD;
 ELSE&#xD;
	 Ext_Settings.EXT_Engineering.Sts_DayShift_Active:= Time_Current &gt; HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_DayShift_StartTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_DayShift_StartTime_Minute)&#xD;
	 																					AND Time_Current &lt;HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_DayShift_EndTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_DayShift_EndTime_Minute);&#xD;
 END_IF;&#xD;
 &#xD;
  //NIGHT SHIFT&#xD;
 //---------------&#xD;
 &#xD;
 //End time is lower than start time (ex: Start 16:00, end 08:00). &#xD;
 IF HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_NightShift_StartTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_NightShift_StartTime_Minute) &gt; HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_NightShift_EndTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_NightShift_EndTime_Minute) THEN&#xD;
 	Wrk_NightShift_Duration:=  ADD_TIME(&#xD;
								 				In1:= SUB_TIME(In1:=TIME#24h, In2:=HE_INT2TIME(Hour:=Ext_Settings.EXT_Engineering.Cfg_NightShift_StartTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_NightShift_StartTime_Minute)) , &#xD;
												In2:=HE_INT2TIME(Hour:=Ext_Settings.EXT_Engineering.Cfg_NightShift_EndTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_NightShift_EndTime_Minute));&#xD;
	IF Time_Current &gt; HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_NightShift_StartTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_NightShift_StartTime_Minute) THEN&#xD;
		RE_NightShiftActive(Clk:=TRUE);&#xD;
	ELSE&#xD;
		RE_NightShiftActive(Clk:=FALSE);&#xD;
	END_IF;&#xD;
	IF RE_NightShiftActive.Q THEN&#xD;
		 Ext_Settings.EXT_Engineering.Sts_NightShift_Active:=TRUE;&#xD;
	ELSIF Ext_Settings.EXT_Engineering.Sts_NightShift_Active THEN&#xD;
		Wrk_NightShift_DurationCurrent := ADD_TIME(In1:=Wrk_NightShift_DurationCurrent, In2:=Wrk_TaskIntervalTime);&#xD;
	END_IF;&#xD;
	IF Wrk_NightShift_DurationCurrent &gt;= Wrk_NightShift_Duration THEN &#xD;
		Ext_Settings.EXT_Engineering.Sts_NightShift_Active:=FALSE;&#xD;
	END_IF;&#xD;
//End time is bigger than start time (ex: Start 16:00, end 18:00).&#xD;
 ELSE&#xD;
	 Ext_Settings.EXT_Engineering.Sts_NightShift_Active:= Time_Current &gt; HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_NightShift_StartTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_NightShift_StartTime_Minute)&#xD;
	 																					AND Time_Current &lt;HE_INT2TOD(Hour:=Ext_Settings.EXT_Engineering.Cfg_NightShift_EndTime_Hour, Minute:=Ext_Settings.EXT_Engineering.Cfg_NightShift_EndTime_Minute);&#xD;
 END_IF;&#xD;
													&#xD;
 &#xD;
//State for each shift team&#xD;
//(If configured night/day equals actual time and current day is configured)&#xD;
FOR Wrk_ShiftTeam_Index:=0 TO DINT_TO_UINT(UPPER_BOUND(Ext_ShiftTeam, 1)) DO &#xD;
	IF Ext_Settings.EXT_Engineering.Sts_DayShift_Active AND Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_DayShift //IF day shift acticve and shift team activated day shift&#xD;
		OR Ext_Settings.EXT_Engineering.Sts_NightShift_Active AND Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_NightShift THEN //IF night shift active and shift team activated night shift&#xD;
		CASE DayOfWeek OF&#xD;
		&#xD;
			_MON:&#xD;
			Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Sts_TeamActive := Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_ActiveDays[0]; //Active if pos 0 in array configured (TRUE)&#xD;
			&#xD;
			_TUE:&#xD;
			Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Sts_TeamActive := Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_ActiveDays[1]; //Active if pos 1 in array configured (TRUE)&#xD;
			&#xD;
			_WED:&#xD;
			Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Sts_TeamActive := Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_ActiveDays[2]; //Active if pos 2 in array configured (TRUE)&#xD;
			&#xD;
			_THU:&#xD;
			Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Sts_TeamActive := Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_ActiveDays[3]; //Active if pos 3 in array configured (TRUE)&#xD;
			&#xD;
			_FRI:&#xD;
			Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Sts_TeamActive := Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_ActiveDays[4]; //Active if pos 4 in array configured (TRUE)&#xD;
			&#xD;
			_SAT:&#xD;
			Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Sts_TeamActive := Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_ActiveDays[5]; //Active if pos 5 in array configured (TRUE)&#xD;
			&#xD;
			_SUN:&#xD;
			Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Sts_TeamActive := Ext_ShiftTeam[Wrk_ShiftTeam_Index].EXT_Operator.Cfg_ActiveDays[6]; //Active if pos 6 in array configured (TRUE)&#xD;
			&#xD;
		END_CASE;&#xD;
	END_IF;&#xD;
END_FOR;&#xD;
 &#xD;
 (*************************************************************************&#xD;
 *	ALARM CHECK AND TIME COUNTDOWN&#xD;
 *************************************************************************)&#xD;
 //Count down timer between priorities and looks for active alarm&#xD;
 Wrk_AlarmActive:=FALSE;&#xD;
 Wrk_AlarmArrayOutOfRange:=FALSE;&#xD;
 Wrk_NumberAlarmUsed:=0;&#xD;
 &#xD;
 FOR Wrk_AlarmCheck_Index := 0 TO DINT_TO_UINT(UPPER_BOUND(Int_Alarm, 1)) DO&#xD;
	 &#xD;
	 IF Int_Alarm[Wrk_AlarmCheck_Index].Cfg_InUse AND Int_Alarm[Wrk_AlarmCheck_Index].Sts_TimeToNextPri &gt; TIME#0s AND Int_Alarm[Wrk_AlarmCheck_Index].Sts_State &gt; 0 THEN&#xD;
		 Int_Alarm[Wrk_AlarmCheck_Index].Sts_TimeToNextPri := SUB_TIME(In1:=Int_Alarm[Wrk_AlarmCheck_Index].Sts_TimeToNextPri, In2:=Wrk_TaskIntervalTime);&#xD;
	 ELSE&#xD;
		 Int_Alarm[Wrk_AlarmCheck_Index].Sts_TimeToNextPri := TIME#0s;&#xD;
	 END_IF;&#xD;
	 &#xD;
	 IF Int_Alarm[Wrk_AlarmCheck_Index].Sts_State &gt; 0 THEN //Looking for active alarm&#xD;
		 Wrk_AlarmActive:=TRUE;&#xD;
	 END_IF;&#xD;
	 &#xD;
	 IF NOT Int_Alarm[Wrk_AlarmCheck_Index].Cfg_InUse AND Wrk_NumberAlarmUsed = 0 //Looking for number of used alarms&#xD;
		 OR Wrk_AlarmCheck_Index = DINT_TO_UINT(UPPER_BOUND(Int_Alarm, 1)) THEN //All alarms used&#xD;
		 Wrk_NumberAlarmUsed:=Wrk_AlarmCheck_Index;&#xD;
	 END_IF;&#xD;
	 &#xD;
	 IF Wrk_AlarmCheck_Index = DINT_TO_UINT(UPPER_BOUND(Int_Alarm, 1)) AND Int_Alarm[Wrk_AlarmCheck_Index].Cfg_InUse THEN //All alarm index used&#xD;
		 Wrk_AlarmArrayOutOfRange:=TRUE;&#xD;
	 END_IF;&#xD;
	 &#xD;
 END_FOR;&#xD;
 &#xD;
 CASE Wrk_State OF&#xD;
	 0:&#xD;
		 // Look for active alarms &#xD;
		 AlarmSend_Found := FALSE; // Initialize false before being set if criteria is met&#xD;
		 &#xD;
		 //Looking for active alarms to send. IF alarm in use and state fulfills criteria&#xD;
		 IF NOT Ext_Settings.EXT_Operator.Cfg_Emergency_Send THEN //Emergency message not activated&#xD;
			 FOR Wrk_AlarmST_Index:=0 TO  DINT_TO_UINT(UPPER_BOUND(Int_Alarm, 1)) DO&#xD;
				 IF Int_Alarm[Wrk_AlarmST_Index].Cfg_InUse AND Int_Alarm[Wrk_AlarmST_Index].Sts_State &gt; 0 AND Int_Alarm[Wrk_AlarmST_Index].Sts_State &lt; 6 AND Int_Alarm[Wrk_AlarmST_Index].Sts_TimeToNextPri = TIME#0s THEN //Sjekker bare state dersom alarm index er i bruk&#xD;
					 CASE Int_Alarm[Wrk_AlarmST_Index].Sts_State OF &#xD;
						 &#xD;
						 0: //Alarm initial/idle state&#xD;
						 	;&#xD;
						 &#xD;
						 1: //Alarm active, not sent&#xD;
							 AlarmSend_Found:=TRUE;&#xD;
							 AlarmSend_Index:=Wrk_AlarmST_Index;&#xD;
							 AlarmSend_Priority:=1;&#xD;
						 &#xD;
						 2: //Alarm sendt to pri 1&#xD;
								 AlarmSend_Found:=TRUE;&#xD;
								 AlarmSend_Index:=Wrk_AlarmST_Index;&#xD;
								 AlarmSend_Priority:=2;&#xD;
						 &#xD;
						  3: //Alarm sendt to pri 2&#xD;
								 AlarmSend_Found:=TRUE;&#xD;
								 AlarmSend_Index:=Wrk_AlarmST_Index;&#xD;
								 AlarmSend_Priority:=3;&#xD;
						 &#xD;
						 4: //Alarm sendt to pri 3&#xD;
								 AlarmSend_Found:=TRUE;&#xD;
								 AlarmSend_Index:=Wrk_AlarmST_Index;&#xD;
								 AlarmSend_Priority:=4;&#xD;
						 &#xD;
						 5: //Alarm sendt to pri 4&#xD;
								 AlarmSend_Found:=TRUE;&#xD;
								 AlarmSend_Index:=Wrk_AlarmST_Index;&#xD;
								 AlarmSend_Priority:=5;&#xD;
						 &#xD;
				 END_CASE;&#xD;
				 EXIT;&#xD;
				END_IF;&#xD;
			 END_FOR;&#xD;
		 ELSIF Ext_Settings.EXT_Operator.Cfg_Emergency_Send THEN //Emergency message activated&#xD;
			 AlarmSend_Found:=TRUE;&#xD;
		 END_IF;&#xD;
		 &#xD;
		 IF AlarmSend_Found THEN //Alarm found&#xD;
			 Wrk_State := 1;&#xD;
			 Wrk_TimeInState := T#0s;&#xD;
		 END_IF;&#xD;
 &#xD;
 	1:&#xD;
		 (*************************************************************************&#xD;
		 *	GENERATING RECEIVER LIST&#xD;
		 *************************************************************************)&#xD;
		 //Looking through shift teams to find contacts, based om reciver priority and alarm state/priority&#xD;
		IF AlarmSend_Found THEN //Alarm found&#xD;
			Clear(InOut:=Wrk_SMS_SendBuffer);	//Initializes receiver buffer&#xD;
			Wrk_SMS_SendBuffer_Pos:=0; //Resets position for receive buffer&#xD;
			FOR Wrk_RecvList_ShiftTeam_Index:=0 TO  DINT_TO_UINT(UPPER_BOUND(Ext_ShiftTeam, 1)) DO //For loop to check all shift teams&#xD;
				&#xD;
				//Current shift team is active (day/night and day)&#xD;
				IF Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Sts_TeamActive &#xD;
					&#xD;
					//Alarm only day time and current time is day, or send alarm all day&#xD;
					AND (Int_Alarm[AlarmSend_Index].Sts_SMS_OnlyDayTime AND Ext_Settings.EXT_Engineering.Sts_DayShift_Active //Configured to only send at day time and day time is active&#xD;
					OR NOT Int_Alarm[AlarmSend_Index].Sts_SMS_OnlyDayTime) //Alarm set to send anytime&#xD;
					&#xD;
					//Checks shift team type and alarm settings&#xD;
					AND (Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Cfg_Team_Type = 2 //General shift team (recives all alarms)&#xD;
					OR Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Cfg_Team_Type = 0 AND Int_Alarm[AlarmSend_Index].Sts_SMS_Technical //Technical alarm and current shift team is set to technical&#xD;
					OR Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Cfg_Team_Type = 1 AND Int_Alarm[AlarmSend_Index].Sts_SMS_Guard)  THEN //Guard alarm and current shift team is set to guard&#xD;
					&#xD;
						//Check all positions/contacts in current shift team&#xD;
						FOR Wrk_RecvList_ShiftTeamPos_Index:=0 TO DINT_TO_UINT(UPPER_BOUND(Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Cfg_Member , 1)) DO &#xD;
							&#xD;
							IF Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Cfg_Priority[Wrk_RecvList_ShiftTeamPos_Index] = AlarmSend_Priority //Current position/contact corresponds to priority for current alarm send state&#xD;
								AND Ext_Contacts[Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Cfg_Member[Wrk_RecvList_ShiftTeamPos_Index]].EXT_Operator.Cfg_PhoneNumber &lt;&gt; '' THEN  //Current position/contact is used&#xD;
									Wrk_SMS_SendBuffer[Wrk_SMS_SendBuffer_Pos] := CONCAT(In1:=Ext_Contacts[Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Cfg_Member[Wrk_RecvList_ShiftTeamPos_Index]].EXT_Operator.Cfg_CountryCode,			//Adds country code to receiver buffer&#xD;
																																		In2:=Ext_Contacts[Ext_ShiftTeam[Wrk_RecvList_ShiftTeam_Index].EXT_Operator.Cfg_Member[Wrk_RecvList_ShiftTeamPos_Index]].EXT_Operator.Cfg_PhoneNumber);	//Adds phone number to receiver buffer&#xD;
								Inc(Wrk_SMS_SendBuffer_Pos);&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
				END_IF;&#xD;
			END_FOR;&#xD;
		END_IF;&#xD;
&#xD;
		IF Wrk_SMS_SendBuffer_Pos = 0 THEN //No recivers found&#xD;
			AlarmSend_Found:=FALSE;&#xD;
			Wrk_State := 0;&#xD;
			 Wrk_TimeInState := T#0s;&#xD;
		END_IF;&#xD;
&#xD;
		//Making receiver list for emergency message&#xD;
		IF Ext_Settings.EXT_Operator.Cfg_Emergency_Send THEN&#xD;
			Clear(InOut:=Wrk_SMS_SendBuffer);	//Initializes receiver buffer&#xD;
			FOR Wrk_Contact_Index := 0 TO DINT_TO_UINT(UPPER_BOUND(Ext_Contacts, 1)) DO&#xD;
				Wrk_SMS_SendBuffer[Wrk_Contact_Index] := CONCAT(In1:=Ext_Contacts[Wrk_Contact_Index].EXT_Operator.Cfg_CountryCode,			//Adds country code to receiver buffer&#xD;
																													In2:=Ext_Contacts[Wrk_Contact_Index].EXT_Operator.Cfg_PhoneNumber);		//Adds phone number to receiver buffer&#xD;
			END_FOR;&#xD;
		END_IF;&#xD;
&#xD;
		 (*************************************************************************&#xD;
		 *	GENERATING MESSAGE&#xD;
		 *************************************************************************)&#xD;
&#xD;
		 //Writing emrgency message&#xD;
		 IF Ext_Settings.EXT_Operator.Cfg_Emergency_Send THEN&#xD;
			 Wrk_SMS_Message := '';		//Initialize message&#xD;
			 Wrk_SMS_Message := Ext_Settings.EXT_Operator.Cfg_Emergency_Message;&#xD;
			&#xD;
		 //Making alarm message based on external config (Config for information to include in message)&#xD;
		 ELSIF AlarmSend_Found AND NOT Wrk_RT100_SMS.Sts_SendSMSBusy THEN&#xD;
			 Wrk_SMS_Message := '';		//Initialize message&#xD;
			 //Including fixed information&#xD;
			 HE_StrConcatAdv(InOut:=Wrk_SMS_Message, In_Static:='TAG: ', In_Variable:=Int_Alarm[AlarmSend_Index].Sts_Process_TAG, Cfg_Order:=FALSE); //Adds TAG&#xD;
			 HE_StrConcatAdv(InOut:=Wrk_SMS_Message, In_Static:=' , ', In_Variable:=Int_Alarm[AlarmSend_Index].Sts_Process_Desc, Cfg_Order:=FALSE); //Adds description&#xD;
			 HE_StrConcatAdv(InOut:=Wrk_SMS_Message, In_Static:=' , ', In_Variable:=Int_Alarm[AlarmSend_Index].Sts_Process_Suffix, Cfg_Order:=FALSE); //Adds suffix&#xD;
			 &#xD;
			 IF Ext_Settings.EXT_Engineering.Cfg_SMS_Include_ProcessValue THEN //IF config to add process value&#xD;
			 	HE_StrConcatAdv(InOut:=Wrk_SMS_Message, In_Static:='. Val: ', In_Variable:=Int_Alarm[AlarmSend_Index].Sts_Process_Value, Cfg_Order:=FALSE); //Adds process value&#xD;
			 END_IF;	 &#xD;
			 &#xD;
			 IF Ext_Settings.EXT_Engineering.Cfg_SMS_Include_Priority THEN //IF config to add priority&#xD;
				 HE_StrConcatAdv(InOut:=Wrk_SMS_Message, In_Static:='. Pri: ', In_Variable:=Int_Alarm[AlarmSend_Index].Sts_Alarm_Priority, Cfg_Order:=FALSE); //Adds priority&#xD;
			 END_IF;&#xD;
			 		 &#xD;
			 IF Ext_Settings.EXT_Engineering.Cfg_SMS_Include_ConnectedCabinet THEN //IF config to add connected cabinet&#xD;
			 	HE_StrConcatAdv(InOut:=Wrk_SMS_Message, In_Static:='. Cab: ', In_Variable:=Int_Alarm[AlarmSend_Index].Sts_Connected_Cabinet, Cfg_Order:=FALSE); //Adds connected cabinet&#xD;
			 END_IF;&#xD;
			 &#xD;
			 IF Ext_Settings.EXT_Engineering.Cfg_SMS_Include_ConnectedController THEN //IF config to add connected controller&#xD;
				 HE_StrConcatAdv(InOut:=Wrk_SMS_Message, In_Static:='. CPU: ', In_Variable:=Int_Alarm[AlarmSend_Index].Sts_Connected_Controller, Cfg_Order:=FALSE); //Adds connected controller&#xD;
			 END_IF;&#xD;
			 &#xD;
			 HE_StrConcatAdv(InOut:=Wrk_SMS_Message, In_Static:='. AI: ', In_Variable:= NumToDecString(In:=AlarmSend_Index, L:=3, Fill:=_ZERO)  , Cfg_Order:=FALSE); //Adds alarm number&#xD;
			 &#xD;
		 END_IF;&#xD;
		 &#xD;
		 // Trigger Send SMS&#xD;
		 IF NOT Wrk_RT100_SMS.Sts_SendSMSBusy THEN&#xD;
			 Wrk_State := 2;&#xD;
			 Wrk_TimeInState := T#0s;&#xD;
			 Wrk_SMS_Send := TRUE;&#xD;
		 	Wrk_SMS_Snd_RetryCount :=0;&#xD;
			&#xD;
		 // State Timeout&#xD;
		 ELSIF Wrk_TimeInState &gt; T#60s THEN&#xD;
			 Wrk_State := 0;&#xD;
			 Wrk_TimeInState := T#0s;&#xD;
		 END_IF;	 &#xD;
 &#xD;
 	2: &#xD;
		  (*************************************************************************&#xD;
		 *	SENDING SMS&#xD;
		 *************************************************************************)	 &#xD;
		 IF Wrk_RT100_SMS.Sts_SendSMSBusy THEN&#xD;
			 Wrk_State := 3;&#xD;
			 Wrk_TimeInState := T#0s;&#xD;
			 &#xD;
		// State Timeout&#xD;
		 ELSIF Wrk_TimeInState &gt; T#60s THEN&#xD;
			 Wrk_State := 0;&#xD;
			 Wrk_TimeInState := T#0s;&#xD;
		 END_IF;&#xD;
		 &#xD;
	3: // Wait for send confirmation&#xD;
		 IF Wrk_RT100_SMS.Sts_SendSMSDone THEN&#xD;
			Wrk_State := 4;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_RT100_SMS.Sts_SendSMSError THEN&#xD;
		 	Wrk_State := 5;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_TimeInState &gt; T#60s THEN&#xD;
			 Wrk_State := 5;&#xD;
			 Wrk_TimeInState := T#0s;&#xD;
		 END_IF;&#xD;
			&#xD;
	4: // Send success&#xD;
		 	Inc(Int_Alarm[AlarmSend_Index].Sts_State); //Increment alarm state&#xD;
			 IF Ext_Settings.EXT_Engineering.Sts_DayShift_Active THEN //IF day shift active&#xD;
			 	Int_Alarm[AlarmSend_Index].Sts_TimeToNextPri := SecToTime(Ext_Settings.EXT_Engineering.Cfg_DayShift_Delay*60); //Adds day shift to alarm variabel (time to next sending)&#xD;
			 ELSIF Ext_Settings.EXT_Engineering.Sts_NightShift_Active THEN //IF night shift active&#xD;
				 Int_Alarm[AlarmSend_Index].Sts_TimeToNextPri := SecToTime(Ext_Settings.EXT_Engineering.Cfg_NightShift_Delay*60); //Adds night shift to alarm variabel (time to next sending)&#xD;
			 END_IF;&#xD;
			 &#xD;
			 Wrk_State := 0;&#xD;
			 Wrk_TimeInState := T#0s;&#xD;
	&#xD;
	5: // Send error&#xD;
			Inc(Wrk_SMS_Snd_RetryCount); //Increment retry count (3 retry before fault)&#xD;
			 Ext_Settings.EXT_Operator.Cfg_Emergency_Send := FALSE;&#xD;
			 &#xD;
			 IF Wrk_SMS_Snd_RetryCount &lt;= 3 THEN&#xD;
				 Wrk_State := 2;&#xD;
				 Wrk_TimeInState := T#0s;&#xD;
				 Wrk_SMS_Send := FALSE;&#xD;
			 ELSE&#xD;
				Wrk_State := 0;&#xD;
			 	Wrk_TimeInState := T#0s;&#xD;
			 END_IF;&#xD;
		 &#xD;
 	ELSE&#xD;
		 Wrk_State := 0;&#xD;
		 Wrk_TimeInState := T#0s;&#xD;
	&#xD;
 END_CASE;&#xD;
 &#xD;
 // Increment state time&#xD;
 Wrk_TimeInState :=  ADD_TIME(In1:=Wrk_TimeInState, In2:=Wrk_TaskIntervalTime);&#xD;
 &#xD;
 (*************************************************************************&#xD;
 * ACKNOWLEDGE ALARM FROM SMS&#xD;
 *************************************************************************)&#xD;
//Looking through internal/external variable structure. Messages is received to the master controller to modem&#xD;
	&#xD;
//Looking for correct idenfication in messages&#xD;
Wrk_LB := LOWER_BOUND(Wrk_ReciveBuffer.BufferData, 1);&#xD;
Wrk_UB := UPPER_BOUND(Wrk_ReciveBuffer.BufferData, 1);&#xD;
FOR Wrk_SMS_SendBuffer_Index:=DINT_TO_UINT(Wrk_LB) TO DINT_TO_UINT(Wrk_UB) DO //FOR loop through buffer array of incomming messages&#xD;
		&#xD;
		Wrk_SMS_Rec_IdentificationPos:= FIND(In1 := Wrk_ReciveBuffer.BufferData[Wrk_SMS_SendBuffer_Index].Message, In2 := CONCAT('Agent: ',Cfg_Indentification)); //Looking for identification (Cfg_Identifitaion) in current message&#xD;
		Wrk_SMS_Rec_AlarmIndexPos := FIND(In1 := Wrk_ReciveBuffer.BufferData[Wrk_SMS_SendBuffer_Index].Message, In2 :='. AI: '); //Looking for identification (Cfg_Identifitaion) in current message&#xD;
		IF Wrk_SMS_Rec_IdentificationPos &gt; 0 AND Wrk_SMS_Rec_AlarmIndexPos &gt; 0 THEN //Matching identification found&#xD;
			Wrk_AlarmIndexStr := MID(In:=Wrk_ReciveBuffer.BufferData[Wrk_SMS_SendBuffer_Index].Message, //Read from message in current index&#xD;
																							L:=3, //Read 3 length (Alarm numer xxx)&#xD;
																							P:= Wrk_SMS_Rec_AlarmIndexPos + LEN('. AI: '),&#xD;
																							ENO =&gt; Wrk_AlarmIndexFound);&#xD;
			IF Wrk_AlarmIndexFound THEN&#xD;
				Wrk_SMS_Rec_AlarmIndex:= STRING_TO_UINT(Wrk_AlarmIndexStr); //Reads from position index found + 3 (AI: xxx)&#xD;
				// Reset countdown to next priority&#xD;
				IF Ext_Settings.EXT_Engineering.Sts_DayShift_Active THEN //IF day shift active&#xD;
				 	Int_Alarm[Wrk_SMS_Rec_AlarmIndex].Sts_TimeToNextPri := SecToTime(Ext_Settings.EXT_Engineering.Cfg_DayShift_Delay*60); //Adds day shift to alarm variabel (time to next sending)&#xD;
				 ELSIF Ext_Settings.EXT_Engineering.Sts_NightShift_Active THEN //IF night shift active&#xD;
					 Int_Alarm[Wrk_SMS_Rec_AlarmIndex].Sts_TimeToNextPri := SecToTime(Ext_Settings.EXT_Engineering.Cfg_NightShift_Delay*60); //Adds night shift to alarm variabel (time to next sending)&#xD;
				 END_IF;&#xD;
			END_IF;&#xD;
			// Delete entry&#xD;
			AryMove(In:=Wrk_ReciveBuffer.BufferData[Wrk_SMS_SendBuffer_Index+1], AryOut:=Wrk_ReciveBuffer.BufferData[Wrk_SMS_SendBuffer_Index], Size:=DINT_TO_UINT(SizeOfAry(Wrk_ReciveBuffer.BufferData) - Wrk_SMS_SendBuffer_Index -1 - Wrk_LB));&#xD;
			Clear(Wrk_ReciveBuffer.BufferData[Wrk_SMS_SendBuffer_Index -1]);			&#xD;
		END_IF;&#xD;
&#xD;
END_FOR;&#xD;
					&#xD;
 (*************************************************************************&#xD;
 * MASTER CONTROL&#xD;
 *************************************************************************)&#xD;
&#xD;
//READ MODEM STATUS&#xD;
 //---------------------------------&#xD;
 IF Cfg_CheckStatus THEN&#xD;
			 Wrk_RT100_Status(ENI:=TRUE, &#xD;
			 Cfg_IP_Adresse:=Cfg_IP_Adress, &#xD;
			 Cfg_Port:=UINT#443, &#xD;
			 Cfg_TLSSession:=Cfg_TLSSession, &#xD;
			 Cfg_CheckInterval:=Cfg_Master_ReadState_Interval, &#xD;
			 Cfg_Auth:=Cfg_Master_ReadState_Auth, &#xD;
			 Cfg_Timeout:=TIME#10s);&#xD;
 ELSE&#xD;
	 Wrk_RT100_Status.ENI:=FALSE;&#xD;
 END_IF;&#xD;
			 &#xD;
 Ext_Settings.EXT_General.Sts_Modem_LinkState :=			Wrk_RT100_Status.Out_LinkState;&#xD;
 Ext_Settings.EXT_General.Sts_Modem_Operator := 			Wrk_RT100_Status.Out_Operator;&#xD;
 Ext_Settings.EXT_General.Sts_Modem_NetworkMode := 	Wrk_RT100_Status.Out_WirelessGen;&#xD;
 Ext_Settings.EXT_General.Sts_Modem_SignalStrength := 	ScaleTrans(SclIn:=DINT_TO_REAL(Wrk_RT100_Status.Out_Signal), &#xD;
																												 X0:=0, &#xD;
																												 Y0:=0, &#xD;
																												 X1:=31, &#xD;
																												 Y1:=100);&#xD;
 &#xD;
 Ext_Settings.EXT_General.Sts_Modem_FaultState :=			Wrk_RT100_Status.Sts_ConnectionError&#xD;
 																							OR Cfg_IP_Adress = ''&#xD;
																							OR Cfg_TLSSession = ''&#xD;
																							OR Cfg_Indentification = '';&#xD;
&#xD;
// RT_100 SMS instance&#xD;
 Wrk_RT100_SMS(ENI:=TRUE, &#xD;
							 Ext_PhoneNumbers:=Wrk_SMS_SendBuffer, &#xD;
							 Inp_Message:=Wrk_SMS_Message, &#xD;
							 Inp_SendSMS:=Wrk_SMS_Send ,  // Endret&#xD;
							 Cfg_IP_Adresse:=Cfg_IP_Adress,&#xD;
							 Cfg_CheckInbox := Cfg_CheckInbox);&#xD;
&#xD;
&#xD;
// Push incomming message on recieve stack&#xD;
IF Wrk_RT100_SMS.Sts_RecvSMSNew AND NOT Wrk_RecvSMSNewLast THEN&#xD;
	Wrk_LB := LOWER_BOUND(Wrk_ReciveBuffer.BufferData, 1);&#xD;
	AryMove(In:=Wrk_ReciveBuffer.BufferData[Wrk_LB], AryOut:=Wrk_ReciveBuffer.BufferData[Wrk_LB + 1], Size:=DINT_TO_UINT(SizeOfAry(Wrk_ReciveBuffer.BufferData) -1));&#xD;
	Wrk_ReciveBuffer.BufferData[Wrk_LB].DateTime := Wrk_RT100_SMS.Out_DateTime;&#xD;
	Wrk_ReciveBuffer.BufferData[Wrk_LB].Message := Wrk_RT100_SMS.Out_Message;&#xD;
	Wrk_ReciveBuffer.BufferData[Wrk_LB].Number := Wrk_RT100_SMS.Out_FromAddress;&#xD;
END_IF;&#xD;
Wrk_RecvSMSNewLast := Wrk_RT100_SMS.Sts_RecvSMSNew;&#xD;
Wrk_RT100_SMS.Inp_RecvSMSAck:= Wrk_RT100_SMS.Sts_RecvSMSNew;&#xD;
	&#xD;
 (*************************************************************************&#xD;
 * LOCAL NOTIFICATION (light and siren)&#xD;
 *************************************************************************)	&#xD;
 &#xD;
 &#xD;
	IF AlarmSend_Found THEN&#xD;
		Wrk_AlertStarted:=TRUE;&#xD;
	END_IF;&#xD;
	&#xD;
	IF Wrk_AlertStarted THEN&#xD;
&#xD;
		CASE (STRING_TO_UINT(In:=Int_Alarm[AlarmSend_Index].Sts_Alarm_Priority)) OF // Convert String to UINT&#xD;
			&#xD;
			0://Pri 1&#xD;
			Ext_Settings.INT_Data.Siren_Priority1:=TRUE;&#xD;
			&#xD;
			1://Pri 2&#xD;
			Ext_Settings.INT_Data.Siren_Priority2:=TRUE;&#xD;
			&#xD;
			2://Pri 3&#xD;
			Ext_Settings.INT_Data.Siren_Priority3:=TRUE;&#xD;
			&#xD;
			3://Pri 4&#xD;
			Ext_Settings.INT_Data.Siren_Priority4:=TRUE;&#xD;
			&#xD;
			4://Pri 5&#xD;
			Ext_Settings.INT_Data.Siren_Priority5:=TRUE;&#xD;
		END_CASE;&#xD;
	END_IF;&#xD;
	&#xD;
	&#xD;
&#xD;
 TON_Siren(In:=Wrk_AlertStarted, PT:= SecToTime(Ext_Settings.EXT_Engineering.Cfg_SirenTime));&#xD;
&#xD;
		IF TON_Siren.Q THEN&#xD;
			Ext_Settings.INT_Data.Siren_Priority1:=FALSE;&#xD;
			Ext_Settings.INT_Data.Siren_Priority2:=FALSE;&#xD;
			Ext_Settings.INT_Data.Siren_Priority3:=FALSE;&#xD;
			Ext_Settings.INT_Data.Siren_Priority4:=FALSE;&#xD;
			Ext_Settings.INT_Data.Siren_Priority5:=FALSE;&#xD;
			Wrk_AlertStarted := FALSE; &#xD;
		END_IF;&#xD;
&#xD;
	&#xD;
	IF Wrk_AlarmActive THEN&#xD;
		Ext_Settings.INT_Data.Light:=TRUE;&#xD;
	ELSE&#xD;
		Ext_Settings.INT_Data.Light:=FALSE;&#xD;
	END_IF;&#xD;
	&#xD;
//Writes to output&#xD;
Sts_AlarmArrayOutOfRange:=Wrk_AlarmArrayOutOfRange;&#xD;
Sts_NumberAlarmUsed:=Wrk_NumberAlarmUsed;&#xD;
Sts_ConnectionError := Wrk_RT100_Status.Sts_ConnectionError;</Text></StructuredTextModel>