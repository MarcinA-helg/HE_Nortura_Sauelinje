<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME:			Fôring                                                                                                                                                                                                                                                                            &#xD;
//	CREATOR:		Helgevold - William Veim                                                                                                                                                                                                                                                              &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION		DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//	1.0			2023-06-16			William Veim			Initial release                                                                                                                                                                                                                                  &#xD;
// 1.2.0			2023-08-02 			Daniel Årvik				Lagt inn innlesing av fôrtabell og fôrsøyler&#xD;
// 1.2.1			2024-03-18			Sondre Asheim		Oversatt kode til engelsk&#xD;
// 1.3.0			2024-04-21			William Veim			Official release v1&#xD;
// 1.3.1			2024-04-25			William Veim			Lagt til feil og status i struktur&#xD;
// 1.3.2			2024-04-27			William Veim			Bugfix status og feil&#xD;
// 1.3.3			2024-04-27			William Veim			Bugfix økning av snittvekt ved midnatt&#xD;
// 1.3.4			2024-04-27			William Veim			Bugfix SGR verdi kalkulasjon&#xD;
// 1.3.5			2024-05-02			William Veim			Bugfix fôrmengde idag ved aut mode&#xD;
// 1.3.6			2024-05-08			William Veim			Bugfix TGC og SGR kalkulert overskriver ved kalkulert negativ verdi&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		BESKRIVELSE:&#xD;
//		Styring av fôring med en eller to fôrskruer&#xD;
//&#xD;
//		FUNKSJONALITET:&#xD;
//		*	Operasjonsmodus:&#xD;
//			-	AV				Fôring ikke aktiv&#xD;
//			-	MANUELL	Fôrer ut manuell mengde, gange appetitt faktor&#xD;
//			-	AUTO			Fôrer ut ihenhold til kalkulert mengde, basert tabell og appetitt faktor&#xD;
//&#xD;
//		*	Kalkulerer ut antall kg som skal fôres ut per søyle (1 søyle per halvtime) &#xD;
//		*	Utifra antall kg for aktuell søyle kalkuleres puls/pausetid basert på mengden skruen(e) gir (gr/sek)&#xD;
//		*	Kalkulerer teoretisk biomasse imorgen basert på SGR verdi&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
//Systemvariabler&#xD;
//-----------------------------------&#xD;
RE_SecondPulse(Clk:=Get1sClk());&#xD;
RE_MidnightPulse(Clk:=Current_Time=TIME_OF_DAY#00:00:00.00);&#xD;
Current_Time := TruncTod(DT_TO_TOD(In:=GetTime()), _SEC);&#xD;
Current_Date := DT_TO_DATE(GetTime());&#xD;
Current_TimeStamp :=CONCAT(In1:=CONCAT(In1:=DateToString(Current_Date), In2:=' '), In2:=DELETE(In:=TODToString(Current_TIME), L:=13, P:=6));&#xD;
&#xD;
//Resetter variabler før kjøring av blokk&#xD;
Wrk_FeedFactor_Found:=FALSE;&#xD;
Wrk_SGRFactor_Found:=FALSE;&#xD;
&#xD;
//Faste kalkulasjoner&#xD;
//-----------------------------------&#xD;
&#xD;
//Henter temperaturer fra input&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Inp_Temp_A, AnalogValueSimplified=&gt;Ext_FeedControl.EXT_Operator.Temperature_A);&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Inp_Temp_B, AnalogValueSimplified=&gt;Ext_FeedControl.EXT_Operator.Temperature_B);&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Inp_Temp_C, AnalogValueSimplified=&gt;Ext_FeedControl.EXT_Operator.Temperature_C);&#xD;
&#xD;
//Avrunding av temperatur (Uten desimaler for å bruke til sammenlikning i fortabell)&#xD;
Temperature_Current_Rounded := Round(Ext_FeedControl.EXT_Operator.Temperature_Current.ProcessValue);&#xD;
Ext_FeedControl.EXT_Statistics.Group_Days := LINT_TO_UINT(TimeToSec(SUB_DATE_DATE(In1:=Current_Date, In2:=Wrk_ResetGroup))/86400);&#xD;
//&#xD;
Ext_FeedControl.EXT_Operator.FeedPulse_Amount:= Ext_FeedControl.EXT_Operator.Pulse_Time * (Wrk_FeedTotal_AmountPrSec);&#xD;
Wrk_CurrentColAmount_TotalFeedTime := Current_ColAmount * 1000 / (Wrk_FeedTotal_AmountPrSec);&#xD;
&#xD;
// Kalkulerer parameter &#xD;
Ext_FeedControl.EXT_Operator.Biomass_Current := ((Ext_FeedControl.EXT_Operator.Weight_AVG /1000)* Ext_FeedControl.EXT_Operator.Amount_Fish)/1000;&#xD;
Ext_FeedControl.EXT_Operator.Biomass_Tomorrow := (((Ext_FeedControl.EXT_Operator.Weight_AVG/1000) * Ext_FeedControl.EXT_Operator.Amount_Fish)+ (Ext_FeedControl.EXT_Operator.SGR_Factor * Ext_FeedControl.EXT_Operator.Feed_Amount_Today))/1000;&#xD;
Ext_FeedControl.EXT_Statistics.Feed_Amount_Tomorrow := ((Ext_FeedControl.EXT_Operator.Biomass_Tomorrow * 1000) * Ext_FeedControl.EXT_Operator.SGR_Factor * Ext_FeedControl.EXT_Operator.Feeding_Factor *Ext_FeedControl.EXT_Operator.Appetite_Factor) / 100;&#xD;
&#xD;
//Kalkulerer SGR &amp; TGC verdi (kan først gjøres etter første døgn)&#xD;
IF Ext_FeedControl.EXT_Statistics.Group_Days &gt; 0 THEN&#xD;
Ext_FeedControl.EXT_Statistics.Group_SGR_Calculated:=  (((Ext_FeedControl.EXT_Operator.Weight_AVG / Wrk_AVGWeight_Start) ** (1/Ext_FeedControl.EXT_Statistics.Group_Days))-1);&#xD;
Ext_FeedControl.EXT_Statistics.Group_TGC_Calculated:=  (((Ext_FeedControl.EXT_Operator.Weight_AVG ** (1.0/3.0)) - (Wrk_AVGWeight_Start ** (1.0/3.0)))/Ext_FeedControl.EXT_Statistics.Group_DegreeDays)*1000;&#xD;
	IF Ext_FeedControl.EXT_Statistics.Group_SGR_Calculated &lt; 0 THEN&#xD;
		Ext_FeedControl.EXT_Statistics.Group_SGR_Calculated := 0; &#xD;
	END_IF;&#xD;
	IF Ext_FeedControl.EXT_Statistics.Group_TGC_Calculated &lt; 0 THEN&#xD;
		Ext_FeedControl.EXT_Statistics.Group_TGC_Calculated :=0;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
//Akkumulerer driftstid fôrskruer&#xD;
IF FeedScrew1_Feedback THEN&#xD;
Wrk_TotalTime_FeedScrew1:=ADD_TIME(In1 := Wrk_TotalTime_FeedScrew1, In2 := GetMyTaskInterval());&#xD;
Wrk_TotalTime_Today_FeedScrew1:=ADD_TIME(In1 := Wrk_TotalTime_Today_FeedScrew1, In2 := GetMyTaskInterval());&#xD;
END_IF;&#xD;
&#xD;
IF FeedScrew2_Feedback THEN&#xD;
Wrk_TotalTime_FeedScrew2:=ADD_TIME(In1 := Wrk_TotalTime_FeedScrew2, In2 := GetMyTaskInterval());&#xD;
Wrk_TotalTime_Today_FeedScrew2:=ADD_TIME(In1 := Wrk_TotalTime_Today_FeedScrew2, In2 := GetMyTaskInterval());&#xD;
END_IF;&#xD;
&#xD;
//Konverterer total tid til sekunder&#xD;
Ext_FeedControl.EXT_Operator.FeedScrew1_TotalRunTime:=LINT_TO_UINT(TimeToSec(Wrk_TotalTime_FeedScrew1));&#xD;
Ext_FeedControl.EXT_Operator.FeedScrew2_TotalRunTime:=LINT_TO_UINT(TimeToSec(Wrk_TotalTime_FeedScrew2));&#xD;
&#xD;
//Kalkulerer antall kg for hver skrue og totalt&#xD;
Ext_FeedControl.EXT_Operator.Feed_Amount_Current_FeedScrew1:=(ULINT_TO_REAL(TimeToSec(Wrk_TotalTime_Today_FeedScrew1))*Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_Current)/1000;&#xD;
Ext_FeedControl.EXT_Operator.Feed_Amount_Current_FeedScrew2:=(ULINT_TO_REAL(TimeToSec(Wrk_TotalTime_Today_FeedScrew2))*Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_Current)/1000;&#xD;
Ext_FeedControl.EXT_Operator.Feed_Amount_Current_Total:=Ext_FeedControl.EXT_Operator.Feed_Amount_Current_FeedScrew1 + Ext_FeedControl.EXT_Operator.Feed_Amount_Current_FeedScrew2;&#xD;
&#xD;
//Skriver timestamp ved resett av skruetid&#xD;
IF Ext_FeedControl.EXT_Operator.FeedScrew1_TotalRunTime_Reset THEN&#xD;
	Wrk_TotalTime_FeedScrew1:=TIME#0s;&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew1_TotalRunTime_TS:=Current_TimeStamp;&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew1_TotalRunTime_Reset := FALSE;&#xD;
END_IF;&#xD;
&#xD;
IF Ext_FeedControl.EXT_Operator.FeedScrew2_TotalRunTime_Reset THEN&#xD;
	Wrk_TotalTime_FeedScrew2:=TIME#0s;&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew2_TotalRunTime_TS:=Current_TimeStamp;&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew2_TotalRunTime_Reset := FALSE;&#xD;
END_IF;&#xD;
&#xD;
//Resetter verdier ved midnatt&#xD;
IF RE_MidnightPulse.Q THEN&#xD;
	Ext_FeedControl.EXT_Statistics.Group_DegreeDays:=					Ext_FeedControl.EXT_Statistics.Group_DegreeDays + Wrk_TemperatureYesterday;&#xD;
	Ext_FeedControl.EXT_Statistics.Feed_Amount_Yesterday:=			Ext_FeedControl.EXT_Operator.Feed_Amount_Current_Total;&#xD;
	Ext_FeedControl.EXT_Operator.Weight_AVG:= 							Ext_FeedControl.EXT_Operator.Weight_AVG + ((Ext_FeedControl.EXT_Operator.SGR_Factor * Ext_FeedControl.EXT_Operator.Feed_Amount_Today))/1000;&#xD;
	Ext_FeedControl.EXT_Operator.Amount_Deadfish_Today := 		0;&#xD;
	Ext_FeedControl.EXT_Operator.Feed_Amount_Current_Total:=	0;&#xD;
	Wrk_TotalTime_Today_FeedScrew1:=TIME#0s;&#xD;
	Wrk_TotalTime_Today_FeedScrew2:=TIME#0s;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
//Timere for styring av utgang&#xD;
IF Ext_FeedControl.EXT_Operator.Mode &gt; 0 AND Ext_FeedControl.EXT_Operator.Pause_Time &gt; 0 AND Ext_FeedControl.EXT_Operator.Pulse_Time &gt; 0 THEN&#xD;
	IF TON_PauseTime.Q THEN&#xD;
		Timer_Alternate:=FALSE;&#xD;
	ELSIF TON_PulseTime.Q THEN&#xD;
		Timer_Alternate:=TRUE;&#xD;
	END_IF;&#xD;
	TON_PauseTime(In:=Timer_Alternate, PT:=NanoSecToTime(REAL_TO_LINT(Ext_FeedControl.EXT_Operator.Pause_Time*1000000000.0)));&#xD;
	TON_PulseTime(In:= NOT Timer_Alternate, PT:=NanoSecToTime(REAL_TO_LINT(Ext_FeedControl.EXT_Operator.Pulse_Time*1000000000.0)));&#xD;
ELSE&#xD;
	TON_PauseTime(In:=FALSE, PT:=TIME#0s);&#xD;
	TON_PulseTime(In:=FALSE, PT:=TIME#0s);&#xD;
END_IF;&#xD;
&#xD;
// Fôrstyring modus&#xD;
CASE Ext_FeedControl.EXT_Operator.Mode OF&#xD;
	&#xD;
	//AV&#xD;
    0:&#xD;
		Ext_FeedControl.EXT_Operator.Feed_Amount_Today := 0;&#xD;
	&#xD;
	//MANUELL&#xD;
	1:&#xD;
		Ext_FeedControl.EXT_Operator.Feed_Amount_Today := Ext_FeedControl.EXT_Operator.Feed_Amount_Manual* Ext_FeedControl.EXT_Operator.Appetite_Factor;&#xD;
		&#xD;
	//AUTO&#xD;
	2:&#xD;
		Ext_FeedControl.EXT_Operator.Feed_Amount_Today := ((Ext_FeedControl.EXT_Operator.Biomass_Current * 1000) * Ext_FeedControl.EXT_Operator.Feeding_Factor * Ext_FeedControl.EXT_Operator.Appetite_Factor * Ext_FeedControl.EXT_Operator.SGR_Factor/ 100);&#xD;
			&#xD;
END_CASE;&#xD;
&#xD;
// Henter aktuell temperatur ved midnatt&#xD;
IF RE_MidnightPulse.Q OR Wrk_TemperatureSelect_Compare &lt;&gt; Ext_FeedControl.EXT_Operator.Temperature_Select OR Ext_FeedControl.EXT_Operator.Temperature_Select = 0 THEN &#xD;
	Wrk_TemperatureYesterday:=Ext_FeedControl.EXT_Operator.Temperature_Current.ProcessValue;&#xD;
	Wrk_TemperatureSelect_Compare := Ext_FeedControl.EXT_Operator.Temperature_Select;&#xD;
	CASE Ext_FeedControl.EXT_Operator.Temperature_Select OF&#xD;
&#xD;
		0: //Temperatur - Manuellt&#xD;
		Ext_FeedControl.EXT_Operator.Temperature_Current := Ext_FeedControl.EXT_Operator.Temperature_Manual;&#xD;
&#xD;
		1: //Temperatur A&#xD;
			Ext_FeedControl.EXT_Operator.Temperature_Current := Ext_FeedControl.EXT_Operator.Temperature_A;&#xD;
			&#xD;
		2: //Temperatur B&#xD;
			Ext_FeedControl.EXT_Operator.Temperature_Current := Ext_FeedControl.EXT_Operator.Temperature_B;&#xD;
			&#xD;
		3: //Temperatur C&#xD;
			Ext_FeedControl.EXT_Operator.Temperature_Current := Ext_FeedControl.EXT_Operator.Temperature_C;&#xD;
			&#xD;
	END_CASE;&#xD;
END_IF;&#xD;
&#xD;
// Henter tabellverdi fôrfakor&#xD;
IF RE_SecondPulse.Q THEN&#xD;
	IF Temperature_Current_Rounded &gt;= 1 AND Temperature_Current_Rounded &lt;= 17 THEN&#xD;
	    Index_B := Temperature_Current_Rounded - 1;&#xD;
		CASE Ext_FeedControl.EXT_Operator.FeedTable_Select OF&#xD;
			&#xD;
			0: //Henter verdi fra fôrtabell 1&#xD;
		    FOR Index_A := 1 TO SizeOfAry(Ext_FeedControl_Common.EXT_Operator.FeedTable1_Xaxis_Desc) - 1 DO&#xD;
				 // Sjekker første kolonne av tabell&#xD;
		        IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt; 0 AND Ext_FeedControl.EXT_Operator.Weight_AVG &lt; Ext_FeedControl_Common.EXT_Operator.FeedTable1_Xaxis_Desc[Index_A] THEN&#xD;
		            Ext_FeedControl.EXT_Operator.Feeding_Factor := Ext_FeedControl_Common.EXT_Operator.FeedTable1_Values[Index_B, 0];&#xD;
					Wrk_FeedFactor_Found:=TRUE;&#xD;
		            EXIT;&#xD;
		        END_IF;&#xD;
		        // Sjekker om snittvekt er innenfor resten av vektklassene&#xD;
		        IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt;= Ext_FeedControl_Common.EXT_Operator.FeedTable1_Xaxis_Desc[Index_A - 1] AND Ext_FeedControl.EXT_Operator.Weight_AVG &lt;= Ext_FeedControl_Common.EXT_Operator.FeedTable1_Xaxis_Desc[Index_A] THEN&#xD;
		            Ext_FeedControl.EXT_Operator.Feeding_Factor := Ext_FeedControl_Common.EXT_Operator.FeedTable1_Values[Index_B, Index_A];&#xD;
					Wrk_FeedFactor_Found:=TRUE;&#xD;
		            EXIT;&#xD;
		        END_IF;&#xD;
		    END_FOR;&#xD;
			&#xD;
			1: //Henter verdi fra fôrtabell 2&#xD;
		    FOR Index_A := 1 TO SizeOfAry(Ext_FeedControl_Common.EXT_Operator.FeedTable2_Xaxis_Desc) - 1 DO&#xD;
				 // Sjekker første kolonne av tabell&#xD;
		        IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt; 0 AND Ext_FeedControl.EXT_Operator.Weight_AVG &lt; Ext_FeedControl_Common.EXT_Operator.FeedTable2_Xaxis_Desc[Index_A] THEN&#xD;
		            Ext_FeedControl.EXT_Operator.Feeding_Factor := Ext_FeedControl_Common.EXT_Operator.FeedTable2_Values[Index_B, 0];&#xD;
					Wrk_FeedFactor_Found:=TRUE;&#xD;
		            EXIT;&#xD;
		        END_IF;&#xD;
		        // Sjekker om snittvekt er innenfor resten av vektklassene&#xD;
		        IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt;= Ext_FeedControl_Common.EXT_Operator.FeedTable2_Xaxis_Desc[Index_A - 1] AND Ext_FeedControl.EXT_Operator.Weight_AVG &lt; Ext_FeedControl_Common.EXT_Operator.FeedTable2_Xaxis_Desc[Index_A] THEN&#xD;
		            Ext_FeedControl.EXT_Operator.Feeding_Factor := Ext_FeedControl_Common.EXT_Operator.FeedTable2_Values[Index_B, Index_A];&#xD;
					Wrk_FeedFactor_Found:=TRUE;&#xD;
		            EXIT;&#xD;
		        END_IF;&#xD;
		    END_FOR;&#xD;
			&#xD;
			2: //Henter verdi fra fôrtabell 3&#xD;
		    FOR Index_A := 1 TO SizeOfAry(Ext_FeedControl_Common.EXT_Operator.FeedTable3_Xaxis_Desc) - 1 DO&#xD;
				 // Sjekker første kolonne av tabell&#xD;
		        IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt; 0 AND Ext_FeedControl.EXT_Operator.Weight_AVG &lt; Ext_FeedControl_Common.EXT_Operator.FeedTable3_Xaxis_Desc[Index_A] THEN&#xD;
		            Ext_FeedControl.EXT_Operator.Feeding_Factor := Ext_FeedControl_Common.EXT_Operator.FeedTable3_Values[Index_B, 0];&#xD;
					Wrk_FeedFactor_Found:=TRUE;&#xD;
		            EXIT;&#xD;
		        END_IF;&#xD;
		        // Sjekker om snittvekt er innenfor resten av vektklassene&#xD;
		        IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt; Ext_FeedControl_Common.EXT_Operator.FeedTable3_Xaxis_Desc[Index_A - 1] AND Ext_FeedControl.EXT_Operator.Weight_AVG &lt;= Ext_FeedControl_Common.EXT_Operator.FeedTable3_Xaxis_Desc[Index_A] THEN&#xD;
		            Ext_FeedControl.EXT_Operator.Feeding_Factor := Ext_FeedControl_Common.EXT_Operator.FeedTable3_Values[Index_B, Index_A];&#xD;
					Wrk_FeedFactor_Found:=TRUE;&#xD;
		            EXIT;&#xD;
		        END_IF;&#xD;
		    END_FOR;&#xD;
		END_CASE;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
//Henter tabellveri SGR (Tilvekst faktor)&#xD;
IF RE_SecondPulse.Q THEN&#xD;
	IF Temperature_Current_Rounded &gt;= 1 AND Temperature_Current_Rounded &lt;= 17 AND Ext_FeedControl.EXT_Operator.SGR_Factor_Select = 1 THEN&#xD;
	    Index_B := Temperature_Current_Rounded - 1;&#xD;
	    FOR Index_A := 1 TO SizeOfAry(Ext_FeedControl_Common.EXT_Operator.SGR_Xaxis_Desc) - 1 DO&#xD;
				 // Sjekker første kolonne av tabell&#xD;
		        IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt; 0 AND Ext_FeedControl.EXT_Operator.Weight_AVG &lt; Ext_FeedControl_Common.EXT_Operator.SGR_Xaxis_Desc[Index_A] THEN&#xD;
		            Ext_FeedControl.EXT_Operator.Feeding_Factor := Ext_FeedControl_Common.EXT_Operator.SGR_Values[Index_B, 0];&#xD;
					Wrk_SGRFactor_Found:=TRUE;&#xD;
		            EXIT;&#xD;
		        END_IF;&#xD;
	        // Sjekker om snittvekt er innenfor resten av vektklassene&#xD;
	        IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt;= Ext_FeedControl_Common.EXT_Operator.SGR_Xaxis_Desc[Index_A - 1] AND Ext_FeedControl.EXT_Operator.Weight_AVG &lt; Ext_FeedControl_Common.EXT_Operator.SGR_Xaxis_Desc[Index_A] THEN&#xD;
	            Ext_FeedControl.EXT_Operator.SGR_Factor := Ext_FeedControl_Common.EXT_Operator.SGR_Values[Index_B, Index_A];&#xD;
				Wrk_SGRFactor_Found:=TRUE;&#xD;
	            EXIT;&#xD;
	        END_IF;&#xD;
	    END_FOR;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
// Kalkulerer søyleverdier (antall kg pr halvtime)&#xD;
IF RE_SecondPulse.Q THEN&#xD;
	FeedCol_Value_SUM := 0;&#xD;
	FOR Index_A := 0 TO SizeOfAry(Ext_FeedControl.EXT_Operator.FeedCol_Value)-1 DO&#xD;
		FeedCol_Value_SUM := FeedCol_Value_SUM + Ext_FeedControl.EXT_Operator.FeedCol_Value[Index_A];&#xD;
	END_FOR;&#xD;
&#xD;
	FOR Index_A := 0 TO SizeOfAry(Ext_FeedControl.EXT_Operator.FeedCol_Amount)-1 DO&#xD;
		Ext_FeedControl.EXT_Operator.FeedCol_Amount[Index_A] := Ext_FeedControl.EXT_Operator.FeedCol_Value[Index_A] * Ext_FeedControl.EXT_Operator.Feed_Amount_Today / FeedCol_Value_SUM;&#xD;
	END_FOR;&#xD;
END_IF;&#xD;
&#xD;
//Kalkulerer puls og pausetid&#xD;
CASE Ext_FeedControl.EXT_Operator.ControlMode OF &#xD;
	&#xD;
	0: //Fast pulstid&#xD;
	Wrk_CurrentColAmount_TotalFeedPulses:=(Wrk_CurrentColAmount_TotalFeedTime / Ext_FeedControl.EXT_Operator.Pulse_Time);&#xD;
	Ext_FeedControl.EXT_Operator.Pause_Time:= ((1800 - Wrk_CurrentColAmount_TotalFeedTime) / Wrk_CurrentColAmount_TotalFeedPulses);&#xD;
	&#xD;
	1: //Fast pausetid&#xD;
	Wrk_CurrentColAmount_TotalFeedPauses:=(Wrk_CurrentColAmount_TotalFeedTime / Ext_FeedControl.EXT_Operator.Pause_Time);&#xD;
	Ext_FeedControl.EXT_Operator.Pulse_Time:=Wrk_CurrentColAmount_TotalFeedTime/ ((1800 - Wrk_CurrentColAmount_TotalFeedTime) / Ext_FeedControl.EXT_Operator.Pause_Time);&#xD;
END_CASE;&#xD;
&#xD;
// Henter aktuell søylemengde (Søyle index hentes kommer fra "Foring_felles")&#xD;
Current_ColAmount := Ext_FeedControl.EXT_Operator.FeedCol_Amount[Ext_FeedControl_Common.EXT_Operator.FeedCol_Actual];&#xD;
&#xD;
&#xD;
//Legger til dødfisk&#xD;
IF Ext_FeedControl.EXT_Operator.Add_DeadFish AND Ext_FeedControl.EXT_Operator.Amount_Deadfish &gt; 0 THEN&#xD;
	Ext_FeedControl.EXT_Operator.Amount_Fish := Ext_FeedControl.EXT_Operator.Amount_Fish - Ext_FeedControl.EXT_Operator.Amount_Deadfish;&#xD;
	Ext_FeedControl.EXT_Statistics.Amount_Deadfish_Total := Ext_FeedControl.EXT_Statistics.Amount_Deadfish_Total + Ext_FeedControl.EXT_Operator.Amount_Deadfish;&#xD;
	Ext_FeedControl.EXT_Operator.Amount_Deadfish_Today := Ext_FeedControl.EXT_Operator.Amount_Deadfish_Today + Ext_FeedControl.EXT_Operator.Amount_Deadfish;&#xD;
	Ext_FeedControl.EXT_Operator.Amount_Deadfish:=0;&#xD;
	Ext_FeedControl.EXT_Operator.Amount_Deadfish_TS := Current_TimeStamp; &#xD;
	Ext_FeedControl.EXT_Operator.Add_DeadFish := FALSE;&#xD;
	IF Ext_FeedControl.EXT_Operator.Amount_Fish &lt; 0 THEN&#xD;
		Ext_FeedControl.EXT_Operator.Amount_Fish := 0;&#xD;
	END_IF;&#xD;
ELSE&#xD;
	Ext_FeedControl.EXT_Operator.Add_DeadFish := FALSE;&#xD;
END_IF;&#xD;
&#xD;
//Skriver timestamp ved endring av appetitt faktor&#xD;
IF Ext_FeedControl.EXT_Operator.Appetite_Factor &lt;&gt; Wrk_AppetiteFactor_Comp THEN&#xD;
	Ext_FeedControl.EXT_Operator.Appetite_Factor_TS := Current_TimeStamp;&#xD;
	Wrk_AppetiteFactor_Comp := Ext_FeedControl.EXT_Operator.Appetite_Factor;&#xD;
END_IF;&#xD;
&#xD;
//Nullstiller verdier ved resett&#xD;
IF Ext_FeedControl.EXT_Operator.Reset_Feeding THEN&#xD;
	Wrk_ResetGroup:= Current_Date;&#xD;
	Ext_FeedControl.EXT_Operator.Reset_Feeding_TS :=DateToString(Current_Date);&#xD;
	Ext_FeedControl.EXT_Operator.Amount_Deadfish:=0;&#xD;
	Ext_FeedControl.EXT_Statistics.Amount_Deadfish_Total:=0;&#xD;
	Ext_FeedControl.EXT_Operator.Amount_Fish :=0;&#xD;
	Ext_FeedControl.EXT_Operator.Weight_AVG :=0;&#xD;
	Ext_FeedControl.EXT_Statistics.Group_Days:=0;&#xD;
	Ext_FeedControl.EXT_Statistics.Group_DegreeDays:=0;&#xD;
	Ext_FeedControl.EXT_Statistics.Group_SGR_Calculated:=0;&#xD;
	Ext_FeedControl.EXT_Statistics.Group_TGC_Calculated:=0;&#xD;
	Ext_FeedControl.EXT_General.Group_Name:='None';&#xD;
	Ext_FeedControl.EXT_General.Group_Type:='None';	&#xD;
	Weight_AVG_StartRegistrerd:= FALSE;&#xD;
	Ext_FeedControl.EXT_Operator.Reset_Feeding := FALSE;&#xD;
END_IF;&#xD;
&#xD;
//Kalkulerer total mengde per sek (basert på input valg)&#xD;
CASE Ext_FeedControl.EXT_Operator.FeedControl_Option OF&#xD;
	&#xD;
	0: //Mengde per sek basert på tilgjengelighet skrue&#xD;
	IF FeedScrew1_Available AND FeedScrew2_Available THEN&#xD;
		Wrk_FeedTotal_AmountPrSec := Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_Current + Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_Current;&#xD;
	ELSIF FeedScrew1_Available AND NOT FeedScrew2_Available THEN&#xD;
		Wrk_FeedTotal_AmountPrSec := Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_Current;&#xD;
	ELSIF NOT FeedScrew1_Available AND FeedScrew2_Available THEN&#xD;
		Wrk_FeedTotal_AmountPrSec := Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_Current;&#xD;
	ELSE &#xD;
		Wrk_FeedTotal_AmountPrSec :=0;&#xD;
	END_IF;&#xD;
	&#xD;
	1: //Fast mengde lik total av skruer&#xD;
	Wrk_FeedTotal_AmountPrSec := Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_Current + Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_Current;&#xD;
END_CASE;&#xD;
&#xD;
//Registrerer start vekt av gruppe&#xD;
IF Ext_FeedControl.EXT_Operator.Weight_AVG &gt; 0 THEN&#xD;
Weight_AVG_StartRegistrerd:=TRUE;&#xD;
END_IF;&#xD;
&#xD;
IF NOT Weight_AVG_StartRegistrerd THEN&#xD;
	Wrk_AVGWeight_Start:=Ext_FeedControl.EXT_Operator.Weight_AVG;&#xD;
END_IF;&#xD;
&#xD;
//Henter aktuell gr/sek for fôrskruer&#xD;
CASE Ext_FeedControl.EXT_Operator.FeedType_Select OF&#xD;
	&#xD;
	0: //Type 1 fôr&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_Current := Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_FeedType1;&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_Current := Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_FeedType1;&#xD;
	&#xD;
	1: //Type 2 fôr&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_Current := Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_FeedType2;&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_Current := Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_FeedType2;&#xD;
	&#xD;
	2: //Type 3 fôr&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_Current := Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_FeedType3;&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_Current := Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_FeedType3;&#xD;
	&#xD;
	3: //Type 4 fôr&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_Current := Ext_FeedControl.EXT_Operator.FeedScrew1_AmountPrSec_FeedType4;&#xD;
	Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_Current := Ext_FeedControl.EXT_Operator.FeedScrew2_AmountPrSec_FeedType4;&#xD;
END_CASE;&#xD;
&#xD;
//Skriver til utganger &#xD;
IF TON_PulseTime.In AND NOT TON_PulseTime.Q AND Ext_FeedControl.EXT_Operator.Pause_Time &gt;0 AND Ext_FeedControl.EXT_Operator.Pulse_Time &gt;0 AND NOT General_Fault AND NOT Interlock THEN&#xD;
	IF FeedScrew1_Available THEN&#xD;
		FeedScrew1_Start := TRUE;&#xD;
	ELSE&#xD;
		FeedScrew1_Start :=FALSE;&#xD;
	END_IF;&#xD;
	IF FeedScrew2_Available THEN&#xD;
		FeedScrew2_Start := TRUE;&#xD;
	ELSE&#xD;
		FeedScrew2_Start :=FALSE;&#xD;
	END_IF;&#xD;
ELSE&#xD;
	FeedScrew1_Start:=FALSE;&#xD;
	FeedScrew2_Start:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
// FAULT CONTROL&#xD;
//-------------------&#xD;
&#xD;
Wrk_Fault_PulseTime:= Ext_FeedControl.EXT_Operator.Pulse_Time &lt; 0.5;&#xD;
Wrk_Fault_PauseTime:= Ext_FeedControl.EXT_Operator.Pause_Time &lt; 0.5;&#xD;
Wrk_Fault_TempBounds:= Ext_FeedControl.EXT_Operator.Temperature_Current.ProcessValue &lt; 0 OR Ext_FeedControl.EXT_Operator.Temperature_Current.ProcessValue &gt; 17;&#xD;
Wrk_Fault_ApetiteFactor:= Ext_FeedControl.EXT_Operator.Appetite_Factor = 0;&#xD;
Wrk_Fault_SGRFactor:= Ext_FeedControl.EXT_Operator.SGR_Factor = 0;&#xD;
Wrk_Fault_FeedFactor:= Ext_FeedControl.EXT_Operator.Feeding_Factor = 0;&#xD;
Wrk_Fault_Interlock:= Interlock;&#xD;
Wrk_Fault_FeedTable:=NOT Wrk_FeedFactor_Found;&#xD;
Wrk_Fault_SGRTable:=NOT Wrk_SGRFactor_Found;&#xD;
&#xD;
// STATE CONTROL&#xD;
//------------------&#xD;
&#xD;
//Resetter variabler før løkke&#xD;
Ext_FeedControl.EXT_General.Sts_Quality:=0;&#xD;
Wrk_AlarmState:=FALSE;&#xD;
Wrk_AlarmSuffix:='';&#xD;
&#xD;
//Pulse time&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_1.Sts_State := Wrk_Fault_PulseTime;&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_1.Sts_Desc := 'Too short puls time';&#xD;
HE_StateControl(Inp_StateData:=Ext_FeedControl.EXT_Engineering.StateCfg_1, &#xD;
							Sts_Quality:=Ext_FeedControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState, &#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Pause time&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_2.Sts_State := Wrk_Fault_PauseTime;&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_2.Sts_Desc := 'Too short pause time';&#xD;
HE_StateControl(Inp_StateData:=Ext_FeedControl.EXT_Engineering.StateCfg_2, &#xD;
							Sts_Quality:=Ext_FeedControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState, &#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Temperature bounds&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_3.Sts_State := Wrk_Fault_TempBounds;&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_3.Sts_Desc := 'Temperatur out of bounds';&#xD;
HE_StateControl(Inp_StateData:=Ext_FeedControl.EXT_Engineering.StateCfg_3, &#xD;
							Sts_Quality:=Ext_FeedControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState, &#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Apetite factor&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_4.Sts_State := Wrk_Fault_ApetiteFactor;&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_4.Sts_Desc := 'Apetite factor out of bounds';&#xD;
HE_StateControl(Inp_StateData:=Ext_FeedControl.EXT_Engineering.StateCfg_4, &#xD;
							Sts_Quality:=Ext_FeedControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState, &#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//SGR fault&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_5.Sts_State := Wrk_Fault_SGRFactor;&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_5.Sts_Desc := 'SGR factor out of bounds';&#xD;
HE_StateControl(Inp_StateData:=Ext_FeedControl.EXT_Engineering.StateCfg_5, &#xD;
							Sts_Quality:=Ext_FeedControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState, &#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Feed factor&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_5.Sts_State := Wrk_Fault_FeedFactor;&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_5.Sts_Desc := 'Feed factor fault';&#xD;
HE_StateControl(Inp_StateData:=Ext_FeedControl.EXT_Engineering.StateCfg_5, &#xD;
							Sts_Quality:=Ext_FeedControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState, &#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Interlock&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_6.Sts_State := Wrk_Fault_Interlock;&#xD;
Ext_FeedControl.EXT_Engineering.StateCfg_6.Sts_Desc := 'Interlock activated';&#xD;
HE_StateControl(Inp_StateData:=Ext_FeedControl.EXT_Engineering.StateCfg_6, &#xD;
							Sts_Quality:=Ext_FeedControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState, &#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Konverterer informasjon til index&#xD;
//--------------------------------&#xD;
&#xD;
//Nullstiller index før sjekk&#xD;
Wrk_Status_Index :=0;&#xD;
&#xD;
//Står i av&#xD;
IF Ext_FeedControl.EXT_Operator.Mode = 0 THEN&#xD;
	Wrk_Status_Index :=0;&#xD;
END_IF;&#xD;
&#xD;
//Står i manuell&#xD;
IF Ext_FeedControl.EXT_Operator.Mode = 1 THEN&#xD;
	Wrk_Status_Index:=1;&#xD;
END_IF;&#xD;
&#xD;
//Står i auto&#xD;
IF Ext_FeedControl.EXT_Operator.Mode = 2 THEN&#xD;
	Wrk_Status_Index:=2;&#xD;
END_IF;&#xD;
&#xD;
//Kjører bare en fôrskrue&#xD;
IF Ext_FeedControl.EXT_Operator.Mode &gt; 0 AND NOT FeedScrew1_Available OR NOT FeedScrew2_Available AND FeedScrew2_InUse THEN&#xD;
	Wrk_Status_Index:=3;&#xD;
END_IF;&#xD;
&#xD;
//Konverterer index til String&#xD;
//----------------------------&#xD;
&#xD;
CASE Wrk_Status_Index OF &#xD;
	&#xD;
	0://Av&#xD;
	Ext_FeedControl.EXT_General.StateDesc := 'Feeding set to OFF';&#xD;
	&#xD;
	1://Manuell&#xD;
	Ext_FeedControl.EXT_General.StateDesc:= 'Feeding manual amount';&#xD;
	&#xD;
	2://Auto&#xD;
	Ext_FeedControl.EXT_General.StateDesc:= 'Feeding in auto operation';&#xD;
	&#xD;
	3://Bare en tilgjengelig forskrue&#xD;
	Ext_FeedControl.EXT_General.StateDesc:= 'Feeding on one scew';&#xD;
	&#xD;
END_CASE;</Text></StructuredTextModel>