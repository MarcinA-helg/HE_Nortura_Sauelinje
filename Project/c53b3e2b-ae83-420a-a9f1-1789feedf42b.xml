<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:					HE_REAL2STRING&#xD;
//	CREATOR:				Helgevold - Jan Magne Dybvik&#xD;
// REQUIREMENTS: NX CPU&#xD;
//&#xD;
// DESCRTIPTION: 	Convert Real to String with configurable prescision and unit&#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	 VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	 1.0.0				2025-04-01		Jan Magne Dybvik	Initial release&#xD;
//&#xD;
//================================================================================================================================&#xD;
&#xD;
&#xD;
// Calculate order of magnitude of input&#xD;
IF Inp &lt;&gt; 0.0 THEN&#xD;
	Wrk_Log :=(LOG(In:=ABS(Inp)));&#xD;
	IF Wrk_Log &gt; 0.0 THEN&#xD;
		Wrk_Magnitude := TRUNC(Wrk_Log);&#xD;
	ELSE&#xD;
		Wrk_Magnitude := RoundUp(Wrk_Log);&#xD;
	END_IF;&#xD;
ELSE&#xD;
	Wrk_Magnitude := 0;&#xD;
END_IF;&#xD;
&#xD;
// Add Prefix&#xD;
IF Cfg_UsePrefix THEN&#xD;
	&#xD;
	CASE Wrk_Magnitude OF&#xD;
		12..15:&#xD;
			Wrk_Number := Inp / 1e12;&#xD;
			Wrk_Decimals := Cfg_SignificantDigits -  Wrk_Magnitude + 11;&#xD;
			Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
			Wrk_ValueString := CONCAT(Wrk_ValueString, ' T');&#xD;
		9..11:&#xD;
			Wrk_Number := Inp / 1e9;&#xD;
			Wrk_Decimals := Cfg_SignificantDigits -  Wrk_Magnitude + 8;&#xD;
			Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
			Wrk_ValueString := CONCAT(Wrk_ValueString, ' G');&#xD;
		6..8:&#xD;
			Wrk_Number := Inp / 1e6;&#xD;
			Wrk_Decimals := Cfg_SignificantDigits -  Wrk_Magnitude + 5;&#xD;
			Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
			Wrk_ValueString := CONCAT(Wrk_ValueString, ' M');&#xD;
		3..5:&#xD;
			Wrk_Number := Inp / 1e3;&#xD;
			Wrk_Decimals := Cfg_SignificantDigits -  Wrk_Magnitude + 2;&#xD;
			Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
			Wrk_ValueString := CONCAT(Wrk_ValueString, ' k');&#xD;
		-3..-1:&#xD;
			Wrk_Number := Inp / 1e-3;&#xD;
			Wrk_Decimals := Cfg_SignificantDigits -  Wrk_Magnitude - 4;&#xD;
			Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
			Wrk_ValueString := CONCAT(Wrk_ValueString, ' m');&#xD;
		-6..-4:&#xD;
			Wrk_Number := Inp / 1e-6;&#xD;
			Wrk_Decimals := Cfg_SignificantDigits -  Wrk_Magnitude - 7;&#xD;
			Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
			Wrk_ValueString := CONCAT(Wrk_ValueString, ' Î¼');&#xD;
		-9..-7:&#xD;
			Wrk_Number := Inp / 1e-9;&#xD;
			Wrk_Decimals := Cfg_SignificantDigits -  Wrk_Magnitude - 10;&#xD;
			Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
			Wrk_ValueString := CONCAT(Wrk_ValueString, ' n');&#xD;
		-12..-10:&#xD;
			Wrk_Number := Inp / 1e-12;&#xD;
			Wrk_Decimals := Cfg_SignificantDigits -  Wrk_Magnitude - 13;&#xD;
			Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
			Wrk_ValueString := CONCAT(Wrk_ValueString, ' p');&#xD;
		&#xD;
	// Prefix not defined for magnitude	&#xD;
	ELSE&#xD;
		Wrk_Number := Inp;&#xD;
		Wrk_Decimals := DINT_TO_USINT(MAX(DINT#0, USINT_TO_DINT(Cfg_SignificantDigits) - 1 - Wrk_Magnitude));&#xD;
		Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits + Wrk_Decimals), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
		Wrk_ValueString := CONCAT(Wrk_ValueString, ' ');&#xD;
	END_CASE;&#xD;
		&#xD;
// Don't add prefix&#xD;
ELSE&#xD;
&#xD;
	Wrk_Number := Inp;&#xD;
	Wrk_Decimals := DINT_TO_USINT(MAX(DINT#0, USINT_TO_DINT(Cfg_SignificantDigits) - 1 - Wrk_Magnitude));&#xD;
	Wrk_ValueString := RealToFormatString(In := Wrk_Number, Exponent := FALSE, Sign := FALSE, MinLen := DINT_TO_USINT(Cfg_SignificantDigits + Wrk_Decimals), DecPlace := DINT_TO_USINT(Wrk_Decimals));&#xD;
	Wrk_ValueString := CONCAT(Wrk_ValueString, ' ');&#xD;
	&#xD;
END_IF;&#xD;
&#xD;
// Add unit and return string&#xD;
HE_REAL2STRING := CONCAT(Wrk_ValueString, Cfg_Unit);</Text></StructuredTextModel>