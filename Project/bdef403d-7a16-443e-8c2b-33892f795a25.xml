<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:				TableScaling&#xD;
//	CREATOR:			Helgevold - Jan Magne Dybvik&#xD;
//&#xD;
// DESCRTIPTION: 	Table with multiple X and Y coordinates. First dimension 2 or more elements, second dimension exactly 2 elements. Ext_Table[n] = (Xn, Yn) &#xD;
//								X value needs to be in ascending order for each new coordinate.&#xD;
//								Linear scaling is performed berween coordinates when Xn&lt;=X&lt;=Xn+1&#xD;
//								If clamping is True and X coordinate is undefined, return return Y value from the closest X coordinate&#xD;
//								If clamping is False and X coordinate is undefined, return linearly scaled Y value from the two closest  X coordinates &#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	 VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	 1.0					2023-10-04		Jan Magne Dybvik	Initial release&#xD;
//	 1.1					2023-10-10		Jan Magne Dybvik	Optimization&#xD;
//&#xD;
//================================================================================================================================&#xD;
&#xD;
&#xD;
(******* Initialization *******)&#xD;
&#xD;
// Initialize variables&#xD;
Val :=0.0;&#xD;
HE_TableScale :=TRUE;&#xD;
&#xD;
&#xD;
// Get dimension bounds and size&#xD;
wrk_D1_LB := LOWER_BOUND(ARR := Ext_table, DIM := 1);&#xD;
wrk_D1_UB := UPPER_BOUND(ARR := Ext_table, DIM := 1);&#xD;
wrk_D1_S :=wrk_D1_UB - wrk_D1_LB + 1;&#xD;
wrk_D2_LB := LOWER_BOUND(ARR := Ext_table, DIM := 2);&#xD;
wrk_D2_UB := UPPER_BOUND(ARR := Ext_table, DIM := 2);&#xD;
wrk_D2_S :=wrk_D2_UB - wrk_D2_LB + 1;&#xD;
&#xD;
&#xD;
(******* Error detection  *******)&#xD;
&#xD;
// If first dimension is less than 2 elements return with error&#xD;
IF wrk_D1_S &lt; 2 THEN&#xD;
	Status := ERROR_FIRST_DIM;&#xD;
	RETURN;&#xD;
END_IF;&#xD;
&#xD;
// If second dimension is not 2 elements return with error&#xD;
IF wrk_D2_S &lt;&gt; 2 THEN&#xD;
	Status := ERROR_SECOND_DIM;&#xD;
	RETURN;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
(******* Find output value  *******)&#xD;
&#xD;
&#xD;
// X is undefined, X &lt; First X Coordinate&#xD;
IF Inp &lt; Ext_table[wrk_D1_LB, wrk_D2_LB] THEN&#xD;
	&#xD;
	Status := InputLessThanDefined;&#xD;
	&#xD;
	// Clamping True, Limit output&#xD;
	IF Cfg_Clamp THEN&#xD;
		wrk_Y :=Ext_table[wrk_D1_LB, wrk_D2_UB];&#xD;
	// Clamping False, Continue scaling&#xD;
	ELSE&#xD;
		wrk_Y :=ScaleTrans(&#xD;
					SclIn:=Inp, &#xD;
					X0:=Ext_table[wrk_D1_LB, wrk_D2_LB], &#xD;
					Y0:=Ext_table[wrk_D1_LB, wrk_D2_UB], &#xD;
					X1:=Ext_table[wrk_D1_LB +1, wrk_D2_LB],&#xD;
					Y1:=Ext_table[wrk_D1_LB +1, wrk_D2_UB], &#xD;
					SclOfs:=0.0&#xD;
		);&#xD;
	END_IF;&#xD;
&#xD;
// X is undefined, X &gt; Last X Coordinate&#xD;
ELSIF Inp &gt; Ext_table[wrk_D1_UB, wrk_D2_LB] THEN&#xD;
	&#xD;
	Status := InputGreaterThanDefined;&#xD;
	&#xD;
	// Clamping True, Limit output&#xD;
	IF Cfg_Clamp THEN&#xD;
		wrk_Y :=Ext_table[wrk_D1_UB, wrk_D2_UB];&#xD;
	// Clamping False, Continue scaling&#xD;
	ELSE&#xD;
		wrk_Y :=ScaleTrans(&#xD;
					SclIn:=Inp, &#xD;
					X0:=Ext_table[wrk_D1_UB -1, wrk_D2_LB], &#xD;
					Y0:=Ext_table[wrk_D1_UB -1, wrk_D2_UB], &#xD;
					X1:=Ext_table[wrk_D1_UB, wrk_D2_LB], &#xD;
					Y1:=Ext_table[wrk_D1_UB, wrk_D2_UB], &#xD;
					SclOfs:=0.0&#xD;
		);&#xD;
	END_IF;&#xD;
&#xD;
// X is defined&#xD;
ELSE&#xD;
	&#xD;
	Status := SUCCESS;&#xD;
	&#xD;
    // find location where Xn &lt;= X &lt;= Xn+1&#xD;
    FOR wrk_index := wrk_D1_LB TO wrk_D1_UB -1 DO&#xD;
        IF Ext_table[wrk_index, wrk_D2_LB] &lt; Inp AND Inp &lt;= Ext_table[wrk_index + 1, wrk_D2_LB] THEN&#xD;
            &#xD;
			// Linear scaling betweein coordinates&#xD;
			wrk_Y :=ScaleTrans(&#xD;
						SclIn:=Inp, &#xD;
						X0:=Ext_table[wrk_index, wrk_D2_LB], &#xD;
						Y0:=Ext_table[wrk_index, wrk_D2_UB], &#xD;
						X1:=Ext_table[wrk_index +1, wrk_D2_LB], &#xD;
						Y1:=Ext_table[wrk_index +1, wrk_D2_UB], &#xD;
						SclOfs:=0.0&#xD;
			);&#xD;
			&#xD;
			// break out of for loop&#xD;
			EXIT;&#xD;
			&#xD;
        END_IF;&#xD;
    END_FOR;&#xD;
END_IF;&#xD;
&#xD;
Val := wrk_Y;&#xD;
&#xD;
// &#xD;
RETURN;</Text></StructuredTextModel>