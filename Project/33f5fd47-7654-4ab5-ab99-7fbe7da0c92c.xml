<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:					HE_RT100SendSMSCmd&#xD;
//	CREATOR:				Helgevold - Jan Magne Dybvik&#xD;
// REQUIREMENTS: NX CPU&#xD;
//&#xD;
// DESCRTIPTION: 	Replace unsafe URI charachters with percent encoded characters. Note: NX CPU uses UTF8 character encoding&#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	 VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	 1.0					2025-07-04		Jan Magne Dybvik	Initial release, some wrong encoding expected&#xD;
//&#xD;
//================================================================================================================================&#xD;
&#xD;
// Initialize&#xD;
Clear(Wrk_Buffer);&#xD;
Wrk_PercentEncoded := '';&#xD;
Wrk_Length := StringToAry(In:=Inp_String, AryOut:=Wrk_Buffer[0]);&#xD;
&#xD;
IF Wrk_Length &gt; 0 THEN&#xD;
	Wrk_i := 0;&#xD;
	&#xD;
	// Search through array for characters to replace&#xD;
	WHILE Wrk_i &lt; Wrk_Length DO&#xD;
		IF (Wrk_Buffer[Wrk_i] AND 16#80) = 16#0 THEN&#xD;
			// Standard ASCII&#xD;
			Wrk_Num := BYTE_TO_UINT(Wrk_Buffer[Wrk_i]);&#xD;
			IF Wrk_Buffer[Wrk_i] &lt; 16#30 OR (Wrk_Buffer[Wrk_i] &gt; 16#39 AND Wrk_Buffer[Wrk_i] &lt; 16#41) OR (Wrk_Buffer[Wrk_i] &gt; 16#5A AND Wrk_Buffer[Wrk_i] &lt; 16#61) OR Wrk_Buffer[Wrk_i] &gt; 16#7A THEN&#xD;
					AryMove(In:=Wrk_Buffer[Wrk_i+1], AryOut:=Wrk_Buffer[Wrk_i+3], Size:=Wrk_Length - Wrk_i + 1);&#xD;
					Wrk_NumStr := NumToHexString(In:=Wrk_Num, L:=2, Fill:=_ZERO);&#xD;
					StringToAry(In:=Wrk_NumStr, AryOut:=Wrk_NumBuf[0]);&#xD;
					AryMove(In:=Wrk_NumBuf[0], AryOut:=Wrk_Buffer[Wrk_i+1], Size:=2);&#xD;
					Wrk_Buffer[Wrk_i] := 16#25;&#xD;
					&#xD;
					Wrk_Length := Wrk_Length + 2;&#xD;
					Wrk_i := Wrk_i + 2;&#xD;
			END_IF;&#xD;
			&#xD;
		ELSIF (Wrk_Buffer[Wrk_i] AND 16#E0) = 16#C0 THEN&#xD;
			// Extended ASCII&#xD;
			Wrk_Num := WORD_TO_UINT(SHL(BYTE_TO_WORD(Wrk_Buffer[Wrk_i] AND 16#1F) , 6) OR (BYTE_TO_WORD(Wrk_Buffer[Wrk_i+1] AND 16#3F) ));&#xD;
			// Limit value to 255&#xD;
			Wrk_Num := WORD_TO_UINT(UINT_TO_WORD(Wrk_Num) AND WORD#16#FF);&#xD;
			IF Wrk_Buffer[Wrk_i] &lt; 16#30 OR (Wrk_Buffer[Wrk_i] &gt; 16#39 AND Wrk_Buffer[Wrk_i] &lt; 16#41) OR (Wrk_Buffer[Wrk_i] &gt; 16#5A AND Wrk_Buffer[Wrk_i] &lt; 16#61) OR Wrk_Buffer[Wrk_i] &gt; 16#7A THEN&#xD;
					AryMove(In:=Wrk_Buffer[Wrk_i+2], AryOut:=Wrk_Buffer[Wrk_i+3], Size:=Wrk_Length - Wrk_i);&#xD;
					Wrk_NumStr := NumToHexString(In:=Wrk_Num, L:=2, Fill:=_ZERO);&#xD;
					StringToAry(In:=Wrk_NumStr, AryOut:=Wrk_NumBuf[0]);&#xD;
					AryMove(In:=Wrk_NumBuf[0], AryOut:=Wrk_Buffer[Wrk_i+1], Size:=2);&#xD;
					Wrk_Buffer[Wrk_i] := 16#25;&#xD;
					&#xD;
					Wrk_Length := Wrk_Length + 1;&#xD;
					Wrk_i := Wrk_i + 2;&#xD;
			END_IF;&#xD;
		&#xD;
		// Undefined&#xD;
		ELSIF (Wrk_Buffer[Wrk_i] AND 16#F0) = 16#E0 THEN&#xD;
				Wrk_Buffer[Wrk_i] := 16#25;&#xD;
				Wrk_Buffer[Wrk_i+1] := 16#32;&#xD;
				Wrk_Buffer[Wrk_i+2] := 16#30;&#xD;
				&#xD;
				Wrk_i := Wrk_i + 2;&#xD;
			&#xD;
		END_IF;&#xD;
		Wrk_i := Wrk_i + 1;&#xD;
	END_WHILE;&#xD;
&#xD;
	// Update string&#xD;
	Wrk_PercentEncoded := AryToString(In:=Wrk_Buffer[0], Size:=Wrk_Length);&#xD;
END_IF;&#xD;
&#xD;
// Return string&#xD;
HE_PercentEncoding := Wrk_PercentEncoded;</Text></StructuredTextModel>