<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:					HE_NXEIC202_Restart&#xD;
//	CREATOR:				Helgevold - Jan Magne Dybvik&#xD;
// REQUIREMENTS: NX CPU&#xD;
//&#xD;
// DESCRTIPTION: 	Restarter NX-EIC202 Ethernet/IP Coupler - NB! Fører til at alle moduler på Rack restarter - Ved bytte av IO modul kan RIO Rack restartes slik at modulene skal bli opearsjonelle igjen. &#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	 VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	 1.0					2024-01-31		Jan Magne Dybvik	Initial release&#xD;
//&#xD;
//================================================================================================================================&#xD;
&#xD;
(*&#xD;
	Funkjonsblokken bentytter seg av CIPUCMMSend instuksjonen. Den er felles for alle instansene av denne funksjonsblokken.&#xD;
	Kun en instans får bruke CIPUCMMSend av gangen. Det bestemmes av Ext_TokenID og Ext_Telegram.Token.&#xD;
	Ext_TokenID blir inkrementert i hver instans slik at alle har unikt nummer.&#xD;
	Når en instans har matchende verdi kan den benytte seg av CIPUCMMSend.&#xD;
	Når instansen er ferdig inkrementeres  Ext_Telegram.Token slik at neste instans får bruke CIPUCMMSend.&#xD;
	Etter siste instans blir Ext_TokenID og Ext_Telegram.Token igjen sammenlignet og hvis de er like har alle instanser kjørt og Ext_Telegram.Token resettes.&#xD;
	&#xD;
	Routing: Når en benytter Ethernet/IP interface integrert i CPU er det ikke behov for routing da vil Cfg_RoutePath være '02\[IP ADDR]'		(f.eks: '02\10.128.218.11')&#xD;
	Når en benytter en add-on modul må en konfigurere Routing. Da vil Cfg_RoutePath være '[Backplane]\#[([X Bus Unit No.]*10) + ([Port No.]-1)]\02\[IP ADDR]'		(f.eks: '01\#10\02\10.128.118.11') for å gå via Add-on modul 1 port 1&#xD;
	&#xD;
	&#xD;
	Eksempel Program:&#xD;
&#xD;
VAR&#xD;
&#xD;
		CIPUCMMSend_Instance : CIPUCMMSend;&#xD;
		RIO_Restart : HE_NXEIC202_Restart;&#xD;
		Telegram : ST_Funksjonsblokker\IO_STRUCT\ExplicitMessageTelegram;&#xD;
		TokenID : UINT;&#xD;
		Timeout : UINT;&#xD;
		RestartCommand : BOOL;&#xD;
&#xD;
END_VAR&#xD;
&#xD;
&#xD;
&#xD;
CIPUCMMSend_Instance(&#xD;
	Execute:= Telegram.Execute, &#xD;
	RoutePath:= Telegram.RoutePath, &#xD;
	TimeOut:= Telegram.TimeOut, &#xD;
	ServiceCode:= Telegram.ServiceCode, &#xD;
	RqPath:= Telegram.ReqPath, &#xD;
	ServiceDat:= Telegram.ServiceData, &#xD;
	Size:= Telegram.Size, &#xD;
	RespServiceDat:= Telegram.RespServiceData, &#xD;
	Done=&gt;Telegram.Done, &#xD;
	Busy=&gt;Telegram.Busy,&#xD;
	Error=&gt; Telegram.Error, &#xD;
	ErrorID=&gt; Telegram.ErrorID, &#xD;
	ErrorIDEx=&gt; Telegram.ErrorIDEx, &#xD;
	RespSize=&gt;Telegram.RespSize&#xD;
);&#xD;
&#xD;
// Place at start&#xD;
TokenID := 0;&#xD;
Timeout := 20; // 2 sek&#xD;
&#xD;
RIO_Restart(&#xD;
	Ext_Telegram := Telegram,&#xD;
	Ext_TokenID := TokenID,&#xD;
	Cfg_RoutePath := '02\10.128.104.11',&#xD;
	Cfg_Timeout := Timeout,&#xD;
	Inp_Restart := RestartCommand&#xD;
);&#xD;
&#xD;
// Place at end&#xD;
IF Telegram.Token &gt;= TokenID THEN&#xD;
	Telegram.Token := 0;&#xD;
END_IF;&#xD;
*)&#xD;
&#xD;
Edge_Restart(Clk:=Inp_Restart);&#xD;
&#xD;
IF Edge_Restart.Q THEN&#xD;
	Wrk_RestartReq := TRUE;&#xD;
ELSIF NOT Inp_Restart THEN&#xD;
	Wrk_RestartReq := FALSE;&#xD;
END_IF;&#xD;
&#xD;
CASE Wrk_State OF&#xD;
 	0: // Wait for turn&#xD;
		IF Ext_Telegram.Token = Ext_TokenID THEN&#xD;
			IF Wrk_RestartReq THEN&#xD;
				Wrk_State := 10;&#xD;
			ELSE&#xD;
				Wrk_State := 100;&#xD;
			END_IF;&#xD;
		END_IF;&#xD;
 &#xD;
 10: // Restart NX Unit&#xD;
 		&#xD;
		Ext_Telegram.RoutePath := Cfg_RoutePath;&#xD;
&#xD;
		Ext_Telegram.ServiceCode := 16#35;&#xD;
		Ext_Telegram.Size := 1;&#xD;
		Ext_Telegram.TimeOut := Cfg_Timeout;&#xD;
		&#xD;
		Ext_Telegram.ServiceData := 0;&#xD;
&#xD;
		Ext_Telegram.ReqPath.ClassID := 16#74;&#xD;
		Ext_Telegram.ReqPath.InstanceID := 1;&#xD;
		Ext_Telegram.ReqPath.isAttributeID := FALSE;&#xD;
		Ext_Telegram.ReqPath.AttributeID := 16#00;&#xD;
&#xD;
		Ext_Telegram.Execute := TRUE;&#xD;
		&#xD;
		Wrk_State := 11;&#xD;
	&#xD;
	11: // Wait for completion&#xD;
		Ext_Telegram.Execute := FALSE;&#xD;
		&#xD;
		IF Ext_Telegram.Done THEN&#xD;
			Wrk_State := 100;&#xD;
		ELSIF Ext_Telegram.Error THEN&#xD;
			Wrk_State := 61;&#xD;
		ELSIF NOT Ext_Telegram.Busy THEN&#xD;
			Wrk_State := 61;&#xD;
		END_IF;&#xD;
		&#xD;
	// General error&#xD;
	61:&#xD;
		Ext_Telegram.Token := Ext_Telegram.Token + 1;&#xD;
		Wrk_State := 0;&#xD;
		&#xD;
	100: // Done or Error&#xD;
		Wrk_RestartReq := FALSE;&#xD;
		&#xD;
		Ext_Telegram.Token := Ext_Telegram.Token + 1;&#xD;
		Wrk_State := 0;&#xD;
		&#xD;
ELSE&#xD;
	Wrk_State := 0;&#xD;
END_CASE;&#xD;
&#xD;
&#xD;
// Increment TokenID for next instance&#xD;
Ext_TokenID := Ext_TokenID + 1;</Text></StructuredTextModel>