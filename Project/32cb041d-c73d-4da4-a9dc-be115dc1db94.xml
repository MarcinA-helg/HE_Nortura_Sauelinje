<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME: 	HE_FrekvOmf_Vacon100_Wrapper                                                                                                                                                                                                                                                                     &#xD;
//	CREATOR:	                                                                                                                                                                                                                                                  &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION			DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//  1.0.0				20.01.2025		William Veim			Initial release&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		DESCRIPTION:&#xD;
//&#xD;
//		FUNCTION:&#xD;
//&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update VFD Input&#xD;
 *************************************************************************)&#xD;
 &#xD;
//FBProcessDataOut1 - ID : 89  Application Status Word1 &#xD;
//Bit 5 = Fieldbus control Active &#xD;
//FBProcessDataOut2 - ID : 78 Ready Status&#xD;
//Bit 5 = Start allowed (Power unit)&#xD;
//FBProcessDataOut3 - ID : 45  Motor current A, 1 decimal&#xD;
//FBProcessDataOut4 - ID : 37 Last Active Fault Code&#xD;
//FBProcessDataOut5 - ID : 56 DIN Status Word 1 &#xD;
//FBProcessDataOut6 - ID : 5 Motor power 0.1%&#xD;
//FBProcessDataOut7 - ID : 1054 kWh Trip Counter Low&#xD;
//FBProcessDataOut8 - ID : 1067 kWh Trip Counter High&#xD;
&#xD;
// Input Parmeter&#xD;
Wrk_VFD_Logic.Cfg_AutoInUse:=			Cfg_AutoAvailable;&#xD;
Wrk_VFD_Logic.Inp_AutoRunFwd :=		Inp_AutoStartRef;&#xD;
Wrk_VFD_Logic.Inp_AutoSpeedRef :=		Inp_AutoSpeedRef;&#xD;
Wrk_VFD_Logic.Inp_LOTO:=					Inp_LOTO;&#xD;
Wrk_VFD_Logic.Cfg_LOTO_InUse	:=			Cfg_LOTO_InUse;&#xD;
Wrk_VFD_Logic.Inp_Interlock:=				Inp_Interlock;&#xD;
Wrk_VFD_Logic.Cfg_Interlock_InUse:=	Cfg_Interlock_InUse;&#xD;
Wrk_VFD_Logic.Cfg_STO_InUse:=			Cfg_STO_InUse;&#xD;
Wrk_VFD_Logic.Inp_ComFault :=				Inp_EIP_Interface[Cfg_DriveIP];&#xD;
Wrk_VFD_Logic.Inp_AlmSuppress:=			Inp_AlmSuppress;&#xD;
Wrk_VFD_Logic.Inp_AlmSuppressDesc:= 	Inp_AlmSuppressDesc;&#xD;
Wrk_VFD_Logic.Cfg_AlmSuppress_IfOff:=	Cfg_AlmSuppress_IfOff;&#xD;
&#xD;
// Feltbuss Input&#xD;
//----------------&#xD;
Wrk_VFD_Logic.Inp_STO:=	 							Ext_VFD_Input.FBProcessDataOut4.Wrd = WORD#16#1E;&#xD;
Wrk_VFD_Logic.Inp_Online :=						    Ext_VFD_Input.FBProcessDataOut2.Bit[5];&#xD;
Wrk_VFD_Logic.Inp_Ready := 							Ext_VFD_Input.FBFixedStatusWord.Bit[0];&#xD;
Wrk_VFD_Logic.Inp_RunningFwd := 				Ext_VFD_Input.FBFixedStatusWord.Bit[1] AND NOT Ext_VFD_Input.FBFixedStatusWord.Bit[2] ;&#xD;
Wrk_VFD_Logic.Inp_Error  := 							Ext_VFD_Input.FBFixedStatusWord.Bit[3];&#xD;
Wrk_VFD_Logic.Inp_Warning := 						Ext_VFD_Input.FBFixedStatusWord.Bit[4];&#xD;
Wrk_VFD_Logic.Inp_Remote :=						Ext_VFD_Input.FBProcessDataOut1.Bit[7];&#xD;
Wrk_VFD_Logic.Inp_VoltageEnabled := 			Ext_VFD_Input.FBFixedStatusWord.Bit[7];&#xD;
Wrk_VFD_Logic.Inp_LocalStop := 						FALSE;&#xD;
&#xD;
Wrk_VFD_Logic.Inp_ActSpeed := ScaleTrans(&#xD;
											   		SclIn:=INT_TO_REAL(WORD_TO_INT(Ext_VFD_Input.FBSpeedActual_Prosent.Wrd)),&#xD;
												  	X0:=REAL#0.0,&#xD;
												  	Y0:=REAL#0.0,&#xD;
												  	X1:=REAL#10000.0,&#xD;
												  	Y1:=REAL#100.0,&#xD;
													SclOfs := REAL#0.0);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	VFD Power, Current, Energy&#xD;
 *************************************************************************)&#xD;
	Wrk_VFD_Logic.Inp_Power :=  INT_TO_REAL(WORD_TO_INT(Ext_VFD_Input.FBProcessDataOut6.Wrd)) * Cfg_MotorPower * 0.1;&#xD;
	Wrk_VFD_Logic.Inp_Current := INT_TO_REAL(WORD_TO_INT(Ext_VFD_Input.FBProcessDataOut3.Wrd)) * 0.01;&#xD;
	Wrk_VFD_Logic.Inp_Energy := DINT_TO_REAL(DWORD_TO_DINT(SHL( WORD_TO_DWORD(Ext_VFD_Input.FBProcessDataOut8.Wrd), 16) OR WORD_TO_DWORD(Ext_VFD_Input.FBProcessDataOut7.Wrd))); // kWh&#xD;
	&#xD;
(*************************************************************************&#xD;
 *	Runtime&#xD;
 *************************************************************************)&#xD;
&#xD;
	IF Wrk_VFD_Logic.Sts_RunningFwd THEN&#xD;
			Wrk_Runtime := ADD_TIME(Wrk_Runtime, GetMyTaskInterval()); &#xD;
	END_IF;&#xD;
	&#xD;
&#xD;
	&#xD;
(*************************************************************************&#xD;
 *	Execute VFD Logic&#xD;
 *************************************************************************)&#xD;
Wrk_VFD_Logic(Ext_VFD:=Ext_VFD, &#xD;
							Int_Alarm:=Int_Alarm);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update SCADA&#xD;
 *************************************************************************)&#xD;
&#xD;
// Frekvensomformer Status&#xD;
Ext_VFD.EXT_Operator.Actual_State:= HE_100F_Drive_State(Inp_State:=Ext_VFD_Input.FBFixedStatusWord.Wrd, Cfg_Delimiter:=' - ', Cfg_Composition:= 7);&#xD;
Ext_VFD.EXT_Operator.Active_Error:= HE_100F_Drive_Fault(Inp_LastFault:=Ext_VFD_Input.FBProcessDataOut4.Wrd, Cfg_Delimiter:=' - ', Cfg_Composition:=7);&#xD;
Ext_VFD.EXT_Statistics.Runtime_VFD := LINT_TO_UDINT( TimeToSec(Wrk_Runtime) / 3600);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update VFD Output&#xD;
 *************************************************************************)&#xD;
&#xD;
// Ethernet/IP Output&#xD;
//----------------&#xD;
Ext_VFD_Output.FBFixedControlWord.Bit[0] :=Wrk_VFD_Logic.Out_RunFwd; //Run FWD &#xD;
Ext_VFD_Output.FBFixedControlWord.Bit[2]:= Wrk_VFD_Logic.Out_FaultReset; //Resett feil&#xD;
Ext_VFD_Output.FBSpeedReference.Wrd:= INT_TO_WORD(REAL_TO_INT(ScaleTrans(&#xD;
												SclIn:=Wrk_VFD_Logic.Val_SpeedRef,&#xD;
												X0:=0.0,&#xD;
												Y0:=0.0,&#xD;
												X1:=100.0,&#xD;
												Y1:=10000.0)));</Text></StructuredTextModel>