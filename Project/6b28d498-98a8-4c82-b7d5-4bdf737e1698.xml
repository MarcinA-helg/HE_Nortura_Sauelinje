<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME:			Digital Input&#xD;
//	CREATOR:		Helgevold - William Veim                                                                                                                                                                                                                                                              &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION		DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//	1.0.0				2025-03-17		William Veim			Initial release                                                                                                                                                                                                                                  &#xD;
//	1.0.1				2025-03-26		Ruben Byman			Bug fix, would not write to output if not in channel fault&#xD;
//	1.0.2				2025-04-30		Ruben Byman			Added alarm based on signal value&#xD;
// 1.0.3				2025-07-23		Fredrik Bjerkenes 	Fixed OK states for wrk values, and also changed stateconfig 3/4/5 to look at wrk_value 1/2/3 Instead of Inp_Value 1/2/3.&#xD;
//&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		FUNKSJONALITET:&#xD;
//		TO BE SET&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
(*************************************************************************&#xD;
 *	INITIAL/SYSTEM VARIABELS&#xD;
 *************************************************************************)&#xD;
 &#xD;
DtToDateStruct(In:=GetTime(), DateStruct=&gt;DateStruct);&#xD;
&#xD;
 (*************************************************************************&#xD;
 *	INITIALIZE VARIABELS&#xD;
 *************************************************************************)&#xD;
 IF NOT Wrk_Initialise THEN&#xD;
	 &#xD;
	 //Engeneering settings&#xD;
	 Ext_DigitalValue.EXT_Engineering.StateCfg_InputStuckTimeDelay:=60;&#xD;
	 &#xD;
	//Alarm settings&#xD;
	Ext_DigitalValue.EXT_Alarm.EXT_Engineering.Cfg_DigAlarm_Delay:=10;&#xD;
	Ext_DigitalValue.EXT_Alarm.EXT_Engineering.Cfg_DigAlarm_UseReturnDelay:=TRUE;&#xD;
	Ext_DigitalValue.EXT_Alarm.EXT_Engineering.Cfg_PriorityLevel:=1;&#xD;
	&#xD;
	Wrk_Initialise:=TRUE;&#xD;
	&#xD;
 END_IF;&#xD;
 &#xD;
(*************************************************************************&#xD;
 *	INTERNAL VARIABLES&#xD;
 *************************************************************************)&#xD;
 &#xD;
Wrk_ModulFault 		:= Inp_ModuleFault;&#xD;
&#xD;
Wrk_Value1:=	Inp_Value1 AND NOT Ext_DigitalValue.EXT_Engineering.StateCfg_3_OK_State&#xD;
								OR NOT Inp_Value1 AND Ext_DigitalValue.EXT_Engineering.StateCfg_3_OK_State;&#xD;
								&#xD;
Wrk_Value2:=	Inp_Value2 AND NOT Ext_DigitalValue.EXT_Engineering.StateCfg_4_OK_State&#xD;
								OR NOT Inp_Value2 AND Ext_DigitalValue.EXT_Engineering.StateCfg_4_OK_State;&#xD;
								&#xD;
Wrk_Value3:=	Inp_Value3 AND NOT Ext_DigitalValue.EXT_Engineering.StateCfg_5_OK_State&#xD;
								OR NOT Inp_Value3 AND Ext_DigitalValue.EXT_Engineering.StateCfg_5_OK_State;&#xD;
	&#xD;
Wrk_ValueCombined:= Wrk_Value1//Channel fault not included (to be discussed)&#xD;
										OR Wrk_Value2&#xD;
										OR Wrk_Value3;&#xD;
										&#xD;
(*************************************************************************&#xD;
 *	FAULT AND STATE CONTROL&#xD;
 *************************************************************************)&#xD;
// FAULT CONTROL&#xD;
//--------------------&#xD;
TON_ValueStuck(In:=Wrk_ValueCombined=Wrk_ValueSample, &#xD;
							PT:=SecToTime(Ext_DigitalValue.EXT_Engineering.StateCfg_InputStuckTimeDelay));&#xD;
&#xD;
Wrk_ValueSample:=Wrk_ValueCombined;&#xD;
Wrk_InputStuck:=TON_ValueStuck.Q;&#xD;
&#xD;
//Resetter variabler før løkke&#xD;
Ext_DigitalValue.EXT_General.Sts_Quality := 0;&#xD;
Wrk_AlarmState:=FALSE;&#xD;
Wrk_AlarmSuffix:='';&#xD;
Wrk_ValueState := 0;&#xD;
&#xD;
//Module fault&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_1.Sts_State := Wrk_ModulFault;&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_1.Sts_Desc := 'Module fault';&#xD;
HE_StateControl(Inp_StateData:=Ext_DigitalValue.EXT_Engineering.StateCfg_1, &#xD;
							Sts_Quality:=Ext_DigitalValue.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Input stuck&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_2.Sts_State := Wrk_InputStuck;&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_2.Sts_Desc := 'Input stuck';&#xD;
HE_StateControl(Inp_StateData:=Ext_DigitalValue.EXT_Engineering.StateCfg_2, &#xD;
							Sts_Quality:=Ext_DigitalValue.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_2.Sts_Visible:=Ext_DigitalValue.EXT_Engineering.StateCfg_InputStuckVisible;&#xD;
&#xD;
//Input value 1&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_3.Sts_State := Wrk_Value1;&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_3.Sts_Desc := Inp_Value1_Suffix;&#xD;
HE_StateControl(Inp_StateData:=Ext_DigitalValue.EXT_Engineering.StateCfg_3, &#xD;
							Sts_Quality:=Ext_DigitalValue.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_3.Sts_Visible:=Inp_Value1_Suffix&lt;&gt;'';&#xD;
&#xD;
//Input value 2&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_4.Sts_State := Wrk_Value2;&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_4.Sts_Desc := Inp_Value2_Suffix;&#xD;
HE_StateControl(Inp_StateData:=Ext_DigitalValue.EXT_Engineering.StateCfg_4, &#xD;
							Sts_Quality:=Ext_DigitalValue.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_4.Sts_Visible:=Inp_Value2_Suffix&lt;&gt;'';&#xD;
&#xD;
//Input value 3&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_5.Sts_State := Wrk_Value3;&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_5.Sts_Desc := Inp_Value3_Suffix;&#xD;
HE_StateControl(Inp_StateData:=Ext_DigitalValue.EXT_Engineering.StateCfg_5, &#xD;
							Sts_Quality:=Ext_DigitalValue.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
Ext_DigitalValue.EXT_Engineering.StateCfg_5.Sts_Visible:=Inp_Value3_Suffix&lt;&gt;'';&#xD;
&#xD;
  (*************************************************************************&#xD;
 *	SIMULATION OF PROCESS OR SIGNAL VALUE&#xD;
 *************************************************************************)&#xD;
 &#xD;
 IF Ext_DigitalValue.EXT_Engineering.Simulate_Active THEN&#xD;
	 Wrk_ValueCombined:= Ext_DigitalValue.EXT_Engineering.Simulate_Value;&#xD;
	 Ext_DigitalValue.EXT_General.Sts_Quality:=3;//QUALITY TO SIMULATE&#xD;
 END_IF;&#xD;
&#xD;
CASE Wrk_ValueState OF&#xD;
	&#xD;
	0://Use value&#xD;
		TON_ValueSwitch(PT:=SecToTime(Ext_DigitalValue.EXT_Engineering.SwitchDelay));&#xD;
		IF NOT Wrk_ProcessValue AND Wrk_ValueCombined&#xD;
			OR Wrk_ProcessValue AND NOT Wrk_ValueCombined THEN&#xD;
			TON_ValueSwitch.In:=TRUE;&#xD;
		ELSE&#xD;
			TON_ValueSwitch.In:=FALSE;&#xD;
		END_IF;&#xD;
		&#xD;
		IF TON_ValueSwitch.Q THEN&#xD;
		Wrk_ProcessValue:= 	Wrk_ValueCombined;&#xD;
		END_IF;&#xD;
	&#xD;
	1://Hold value&#xD;
	Wrk_ProcessValue:= Wrk_ProcessValue;&#xD;
	&#xD;
	2://Pre defined output&#xD;
	Wrk_ProcessValue:= Ext_DigitalValue.EXT_Engineering.StateCfg_PreDefinedValue;&#xD;
	&#xD;
END_CASE;	&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	ALARM CONTROL&#xD;
 *************************************************************************)&#xD;
 &#xD;
Wrk_AlarmGeneral.Inp_Connected_Cabinet:=				Inp_ControlCabinet;&#xD;
Wrk_AlarmGeneral.Inp_Connected_Controller:=				Inp_ControllerTAG;&#xD;
Wrk_AlarmGeneral.Inp_Process_TAG:=							Inp_ProcessTAG;&#xD;
Wrk_AlarmGeneral.Inp_Process_Desc:=							Ext_DigitalValue.EXT_General.Process_Desc;&#xD;
Wrk_AlarmGeneral.Inp_Process_Suffix:=							Wrk_AlarmSuffix;&#xD;
Wrk_AlarmGeneral.Inp_Process_Value:=							'';&#xD;
Wrk_AlarmGeneral.Inp_Trigger:=										Wrk_AlarmState;&#xD;
&#xD;
Wrk_AlarmGeneral(ENS:=TRUE, &#xD;
								Ext_Alarm:=Ext_DigitalValue.EXT_Alarm, &#xD;
								Int_Alarm:=Int_Alarm);	&#xD;
								&#xD;
							&#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATING OUTPUT AND STRUCTURE&#xD;
 *************************************************************************)&#xD;
&#xD;
//OUTPUT&#xD;
Sts_Fault:=Wrk_AlarmState;&#xD;
Sts_AlarmToken:=Wrk_AlarmGeneral.Out_AlarmToken;&#xD;
&#xD;
//STRUCTURE&#xD;
Ext_DigitalValue.EXT_Operator.ProcessValue := Wrk_ProcessValue;				&#xD;
Ext_DigitalValue.EXT_General.Process_TAG:=Inp_ProcessTAG;&#xD;
Ext_DigitalValue.EXT_General.Connected_ControlCabinet:=Inp_ControlCabinet;&#xD;
Ext_DigitalValue.EXT_General.Controlled_FromController:=Inp_ControllerTAG;		&#xD;
&#xD;
Ext_DigitalValue.EXT_Alarm.EXT_Engineering.Sts_Suppressed:=Inp_AlmSuppress;&#xD;
Ext_DigitalValue.EXT_Alarm.EXT_Engineering.Sts_SuppressedDesc:=Inp_AlmSuppressDesc;&#xD;
				&#xD;
(*************************************************************************&#xD;
 *	STATISTICS&#xD;
 *************************************************************************)&#xD;
&#xD;
//Sample value and increment on change&#xD;
IF Ext_DigitalValue.EXT_Operator.ProcessValue &lt;&gt; Value_Sample THEN&#xD;
	Ext_DigitalValue.EXT_Statistics.ChangesToday := Ext_DigitalValue.EXT_Statistics.ChangesToday + 1;&#xD;
	Value_Sample := Ext_DigitalValue.EXT_Operator.ProcessValue;&#xD;
END_IF;&#xD;
&#xD;
// Sjekker om det er ny dag&#xD;
IF Sample_Day &lt;&gt; DateStruct.Day THEN&#xD;
	Ext_DigitalValue.EXT_Statistics.ChangesYesterday := Ext_DigitalValue.EXT_Statistics.ChangesToday;&#xD;
	Clear(Ext_DigitalValue.EXT_Statistics.ChangesToday);&#xD;
	Sample_Day := DateStruct.Day;&#xD;
END_IF;</Text></StructuredTextModel>