<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:					HE_RT100SMS&#xD;
//	CREATOR:				Helgevold - Jan Magne Dybvik&#xD;
// REQUIREMENTS: NX CPU&#xD;
//&#xD;
// DESCRTIPTION: 	Query RT100 for incomming messages, and request sending of messages&#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	 VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	 1.0.0				2025-04-01		Jan Magne Dybvik	Initial release&#xD;
//  1.0.1				2025-05-27		Jan Magne Dybvik	Bugfix, Send SMS went to wrong state&#xD;
//	 1.1.0				2025-06-02		Jan Magne Dybvik	Added status bit for new SMS message recieved. and input for acknowledgement of new message. SMS Inbox is not checked again before acknowledge is recieved.&#xD;
//	 1.1.1				2025-06-10		Jan Magne Dybvik	Sts_RecvSMSNew was set everytime the SMS inbox was checked. Now it's only set when message length is greater than 0&#xD;
//  1.1.2				2025-06-23		Jan Magne Dybvik	Renamed Wrk_Message to Wrk_SendMessage, and increased length from 256 to 1986 characters&#xD;
//  1.1.3				2025-06-23		Jan Magne Dybvik	Renamed Wrk_SendMessage to Wrk_RecieveMessage&#xD;
//&#xD;
//================================================================================================================================&#xD;
&#xD;
IF Inp_SendSMS AND NOT Wrk_SendSMSLast THEN&#xD;
	Wrk_SendSMSBusy := TRUE;&#xD;
	Wrk_SendSMSDone := FALSE;&#xD;
	Wrk_SendSMSError := FALSE;&#xD;
END_IF;&#xD;
Wrk_SendSMSLast := Inp_SendSMS;&#xD;
&#xD;
&#xD;
// Acknowledge new message&#xD;
IF Inp_RecvSMSAck AND NOT Wrk_RecvSMSNewLast THEN&#xD;
	Wrk_RecvSMSNew := FALSE;&#xD;
END_IF;&#xD;
Wrk_RecvSMSNewLast := Inp_RecvSMSAck;&#xD;
&#xD;
&#xD;
CASE Wrk_State OF&#xD;
	// Initialize variables&#xD;
	Initialize:&#xD;
		Clear(Wrk_SendData);&#xD;
		Clear(Wrk_RecvData);&#xD;
		&#xD;
		Wrk_SendSMSBusy := FALSE;&#xD;
		Wrk_SendSMSDone := FALSE;&#xD;
		Wrk_SendSMSError := FALSE;&#xD;
			&#xD;
		// Clear Execution bits&#xD;
		Wrk_TCP_Connect :=FALSE;&#xD;
		Wrk_SktClearBuffer := FALSE;&#xD;
		Wrk_SktGetStatus := FALSE;&#xD;
		Wrk_TCPSend := FALSE;&#xD;
		Wrk_TCPRecv := FALSE;&#xD;
		Wrk_CloseSocket := FALSE;&#xD;
		&#xD;
		Wrk_ConnectionError := FALSE;&#xD;
		&#xD;
		Wrk_State := Idle;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	&#xD;
	&#xD;
	// Close socket&#xD;
	ErrorCloseSocket:&#xD;
		Wrk_CloseSocket := TRUE;&#xD;
		&#xD;
		IF Wrk_SktClose.Done THEN&#xD;
			Wrk_State := Idle;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_SktClose(Execute:=FALSE);&#xD;
		ELSIF Wrk_SktClose.Error THEN&#xD;
			Wrk_State := Idle;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1090_0001;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := Idle;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1090_0000;&#xD;
		END_IF;&#xD;
&#xD;
	&#xD;
	// Idle&#xD;
	Idle:&#xD;
		IF Wrk_SendSMSBusy  THEN&#xD;
			Wrk_State := SendSMSOpenSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_TimeInState &gt; Cfg_CheckInboxInterval AND Cfg_CheckInbox AND NOT Wrk_RecvSMSNew THEN&#xD;
			Wrk_State := ReadSMSOpenSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		END_IF;&#xD;
		&#xD;
	&#xD;
	// Establish&#xD;
	ReadSMSOpenSocket:&#xD;
		Wrk_TCP_Connect :=TRUE;&#xD;
&#xD;
        IF (Wrk_SktTCPConnect.Done=TRUE) THEN&#xD;
           Wrk_State := ReadSMSClearBuffer;  // Normal end&#xD;
		   Wrk_TimeInState := T#0s;&#xD;
		   Wrk_ConnectionError := FALSE;&#xD;
        ELSIF (Wrk_SktTCPConnect.Error=TRUE) THEN&#xD;
			Wrk_State := Idle;  // Normal end&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1020_0001;&#xD;
			Wrk_ConnectionError := TRUE;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := Idle;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1020_0002;&#xD;
			Wrk_ConnectionError := TRUE;&#xD;
        END_IF;&#xD;
	&#xD;
	&#xD;
	// Clear recieve buffer&#xD;
	ReadSMSClearBuffer:&#xD;
		Wrk_SktClearBuffer :=TRUE;&#xD;
		&#xD;
		IF Wrk_SktClearBuf.Done THEN&#xD;
			Wrk_State := ReadSMSVerifySocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktClearBuf.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
				ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1021_0000;&#xD;
		END_IF;&#xD;
		&#xD;
					&#xD;
	// Conncetion Status&#xD;
	ReadSMSVerifySocket:&#xD;
		Wrk_SktGetStatus := TRUE;&#xD;
			&#xD;
		IF Wrk_SktGetTCPStatus.Done AND Wrk_SktGetTCPStatus.TcpStatus = _ESTABLISHED THEN&#xD;
			Wrk_State := ReadSMSBuildRequest;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Done AND Wrk_SktGetTCPStatus.TcpStatus = _CLOSED THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1022_0001;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Done THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1022_0002;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1022_0003;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket; &#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1022_0000;&#xD;
		END_IF;&#xD;
	&#xD;
	&#xD;
	// Create next message HTTP request&#xD;
	ReadSMSBuildRequest:&#xD;
		Wrk_Request := HE_RT100BuildRequest(Inp_Command := '/SMS/READ/NEXT',&#xD;
			 Cfg_RT100_IPaddress := Cfg_IP_Adresse,&#xD;
			 Cfg_Port := Cfg_Port,&#xD;
			 Cfg_Auth := '');&#xD;
		ToAryByte(In:=Wrk_Request, Order := _LOW_HIGH, AryOut :=Wrk_SendData[0]);&#xD;
		Wrk_TCPSend := TRUE;&#xD;
		&#xD;
		Wrk_State := ReadSMSSendRequest;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
&#xD;
&#xD;
	// Send next message HTTP request&#xD;
	ReadSMSSendRequest:&#xD;
		IF Wrk_SktTCPSend.Done THEN&#xD;
			Wrk_State := ReadSMSRecieveResponse;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF NOT  Wrk_SktTCPSend.Busy THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1031_0001;&#xD;
		ELSIF Wrk_SktTCPSend.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1031_0002;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1031_0003;&#xD;
		END_IF;&#xD;
&#xD;
&#xD;
	// Recieve message&#xD;
	ReadSMSRecieveResponse:&#xD;
		Wrk_TCPRecv := TRUE;&#xD;
		Wrk_State := ReadSMSParseResponse;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
		&#xD;
	ReadSMSParseResponse:&#xD;
        IF Wrk_SktTCPRcv.Done THEN	&#xD;
			Wrk_RecvMessage:= AryToString(In:=Wrk_RecvData[0], Size :=Min(Wrk_RecvSize, UINT#1985));&#xD;
			IF 0 &lt; FIND(In1:=Wrk_RecvMessage, In2:='200 OK') THEN&#xD;
				Wrk_State := ReadSMSCloseSocket;&#xD;
				Wrk_TimeInState := T#0s;&#xD;
			ELSE&#xD;
				Wrk_State := ErrorCloseSocket;&#xD;
				Wrk_TimeInState := T#0s;&#xD;
				Wrk_ErrorCode := 16#1041_0001;&#xD;
			END_IF;&#xD;
		ELSIF NOT Wrk_SktTCPRcv.Busy THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1041_0002;&#xD;
		ELSIF Wrk_SktTCPRcv.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1041_0003;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1041_0004;&#xD;
        END_IF;&#xD;
		&#xD;
		&#xD;
	// Close socket&#xD;
	ReadSMSCloseSocket:&#xD;
		Wrk_CloseSocket := TRUE;&#xD;
		&#xD;
		IF Wrk_SktClose.Done THEN&#xD;
			Wrk_State := ReadSMSPasrseMessage;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_SktClose(Execute:=FALSE);&#xD;
		ELSIF Wrk_SktClose.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1090_0001;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1090_0000;&#xD;
		END_IF;&#xD;
		&#xD;
			// Parse Message&#xD;
	ReadSMSPasrseMessage:&#xD;
		Wrk_NewMessage := HE_RT100ParseSMS(Inp_RecvMessage := Wrk_RecvMessage,&#xD;
						 Out_FromAddress =&gt; Wrk_FromAddress,&#xD;
						 Out_DateTime =&gt; Wrk_DateTime ,&#xD;
						 Out_Message =&gt; Wrk_RecieveMessage,&#xD;
						 Val_Index =&gt; Wrk_Index);&#xD;
		&#xD;
		// Message Recieved&#xD;
		IF Wrk_NewMessage THEN&#xD;
			Out_FromAddress := Wrk_FromAddress;&#xD;
			Out_DateTime := Wrk_DateTime;&#xD;
			Out_Message := Wrk_RecieveMessage;&#xD;
			Wrk_State :=DeleteSMSOpenSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_RecvSMSNew :=TRUE;&#xD;
		// No new Message&#xD;
		ELSE&#xD;
			Wrk_State :=Idle;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		END_IF;&#xD;
&#xD;
&#xD;
	// Establish conncetion&#xD;
	SendSMSOpenSocket:&#xD;
		Wrk_TCP_Connect := TRUE;&#xD;
&#xD;
        IF (Wrk_SktTCPConnect.Done=TRUE) THEN&#xD;
           Wrk_State := SendSMSClearBuffer;&#xD;
		   Wrk_TimeInState := T#0s;&#xD;
		   Wrk_ConnectionError := FALSE;&#xD;
        ELSIF  Wrk_SktTCPConnect.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ConnectionError := TRUE;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1120_0001;&#xD;
        END_IF;&#xD;
	&#xD;
	&#xD;
	// Clear recieve buffer&#xD;
	SendSMSClearBuffer:&#xD;
		Wrk_SktClearBuffer := TRUE;&#xD;
		&#xD;
		IF Wrk_SktClearBuf.Done THEN&#xD;
			Wrk_State := SendSMSVerifySocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktClearBuf.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1121_0001;&#xD;
		END_IF;&#xD;
		&#xD;
					&#xD;
		// Conncetion Status&#xD;
	SendSMSVerifySocket:&#xD;
		Wrk_SktGetStatus := TRUE;&#xD;
			&#xD;
		IF Wrk_SktGetTCPStatus.Done AND Wrk_SktGetTCPStatus.TcpStatus = _ESTABLISHED THEN&#xD;
			Wrk_State := SendSMSBuildRequest;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Done AND Wrk_SktGetTCPStatus.TcpStatus = _CLOSED THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1122_0001;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Done THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1122_0002;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1122_0003;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1122_0000;&#xD;
		END_IF;&#xD;
	&#xD;
&#xD;
	// Create Send SMS message HTTP request&#xD;
	SendSMSBuildRequest:&#xD;
		Wrk_Request := HE_RT100BuildRequest(Inp_Command := HE_RT100SendSMSCmd(Ext_PhoneNumbers := Ext_PhoneNumbers, Inp_Message := Inp_Message),&#xD;
			 Cfg_RT100_IPaddress := Cfg_IP_Adresse,&#xD;
			 Cfg_Port := Cfg_Port);&#xD;
		ToAryByte(In:=Wrk_Request, Order := _LOW_HIGH, AryOut :=Wrk_SendData[0]);&#xD;
		Wrk_TCPSend := TRUE;&#xD;
		&#xD;
		Wrk_State := SendSMSSendRequest;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
		&#xD;
		&#xD;
	// Send Send SMS message HTTP request&#xD;
	SendSMSSendRequest:&#xD;
		&#xD;
		IF Wrk_SktTCPSend.Done THEN&#xD;
			Wrk_State := SendSMSRecieveResponse;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF NOT  Wrk_SktTCPSend.Busy THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1131_0001;&#xD;
		ELSIF Wrk_SktTCPSend.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1131_0002;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1131_0003;&#xD;
		END_IF;&#xD;
	&#xD;
	&#xD;
	// Recieve Message&#xD;
	SendSMSRecieveResponse:&#xD;
		Wrk_TCPRecv := TRUE;&#xD;
		Wrk_State := SendSMSParseResponse;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	&#xD;
	&#xD;
     SendSMSParseResponse:&#xD;
        IF Wrk_SktTCPRcv.Done THEN	&#xD;
			Wrk_RecvMessage:= AryToString(In:=Wrk_RecvData[0], Size :=Min(Wrk_RecvSize, UINT#1985));&#xD;
			IF 0 &lt; FIND(In1:=Wrk_RecvMessage, In2:='200 OK') THEN&#xD;
				Wrk_State := SendSMSCloseSocket;&#xD;
				Wrk_TimeInState := T#0s;&#xD;
				Wrk_SendSMSBusy := FALSE;&#xD;
				Wrk_SendSMSDone := TRUE;&#xD;
			ELSE&#xD;
				Wrk_State := ErrorCloseSocket;&#xD;
				Wrk_TimeInState := T#0s;&#xD;
				Wrk_ErrorCode := 16#1141_0001;&#xD;
				Wrk_SendSMSBusy := FALSE;&#xD;
				Wrk_SendSMSError := TRUE;&#xD;
			END_IF;&#xD;
		ELSIF NOT Wrk_SktTCPRcv.Busy THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1141_0002;&#xD;
			Wrk_SendSMSBusy := FALSE;&#xD;
			Wrk_SendSMSError := TRUE;&#xD;
		ELSIF Wrk_SktTCPRcv.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1141_0003;&#xD;
			Wrk_SendSMSBusy := FALSE;&#xD;
			Wrk_SendSMSError := TRUE;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT)  THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1141_0004;&#xD;
			Wrk_SendSMSBusy := FALSE;&#xD;
			Wrk_SendSMSError := TRUE;&#xD;
        END_IF;&#xD;
				&#xD;
	&#xD;
		// Close socket&#xD;
	SendSMSCloseSocket:&#xD;
		Wrk_CloseSocket := TRUE;&#xD;
		&#xD;
		IF Wrk_SktClose.Done THEN&#xD;
			Wrk_State := Idle;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_SktClose(Execute:=FALSE);&#xD;
		ELSIF Wrk_SktClose.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1190_0001;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1190_0000;&#xD;
		END_IF;&#xD;
	&#xD;
	&#xD;
	// Establish conncetion&#xD;
	DeleteSMSOpenSocket:&#xD;
		Wrk_TCP_Connect :=TRUE;&#xD;
&#xD;
        IF (Wrk_SktTCPConnect.Done=TRUE) THEN&#xD;
           Wrk_State := DeleteSMSClearBuffer;&#xD;
		   Wrk_TimeInState := T#0s;&#xD;
		   Wrk_ConnectionError := FALSE;&#xD;
        ELSIF (Wrk_SktTCPConnect.Error=TRUE) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ConnectionError := TRUE;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1220_0000;&#xD;
        END_IF;&#xD;
	&#xD;
	&#xD;
	// Clear recieve buffer&#xD;
	DeleteSMSClearBuffer:&#xD;
		Wrk_SktClearBuffer := TRUE;&#xD;
		&#xD;
		IF Wrk_SktClearBuf.Done THEN&#xD;
			Wrk_State := DeleteSMSVerifySocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktClearBuf.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1220_0000;&#xD;
		END_IF;&#xD;
		&#xD;
					&#xD;
		// Conncetion Status&#xD;
	DeleteSMSVerifySocket:&#xD;
		Wrk_SktGetStatus := TRUE;&#xD;
			&#xD;
		IF Wrk_SktGetTCPStatus.Done AND Wrk_SktGetTCPStatus.TcpStatus = _ESTABLISHED THEN&#xD;
			Wrk_State := DeleteSMSBuildRequest;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Done AND Wrk_SktGetTCPStatus.TcpStatus = _CLOSED THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1222_0001;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Done THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1222_0002;&#xD;
		ELSIF Wrk_SktGetTCPStatus.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1222_0003;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT)  THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1222_0000;&#xD;
		END_IF;&#xD;
	&#xD;
&#xD;
	// Create Request Delete message HTTP request&#xD;
	DeleteSMSBuildRequest:&#xD;
		Wrk_Request := HE_RT100BuildRequest(Inp_Command := CONCAT(In1 := '/SMS/DELETE/',In2 := DINT_TO_STRING(In:=Wrk_Index)), &#xD;
			Cfg_RT100_IPaddress := Cfg_IP_Adresse,&#xD;
			Cfg_Port := Cfg_Port);&#xD;
		ToAryByte(In:=Wrk_Request, Order := _LOW_HIGH, AryOut :=Wrk_SendData[0]);&#xD;
		Wrk_TCPSend := TRUE;&#xD;
		&#xD;
		Wrk_State := DeleteSMSSendRequest;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	&#xD;
	&#xD;
	// Send Request Delete message HTTP request&#xD;
	DeleteSMSSendRequest:&#xD;
		IF Wrk_SktTCPSend.Done THEN&#xD;
			Wrk_State := DeleteSMSRecieveResponse;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF NOT  Wrk_SktTCPSend.Busy THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1231_0001;&#xD;
		ELSIF Wrk_SktTCPSend.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1231_0002;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1231_0003;&#xD;
		END_IF;&#xD;
	&#xD;
	// Recieve Message&#xD;
	DeleteSMSRecieveResponse:&#xD;
		Wrk_TCPRecv := TRUE;&#xD;
		Wrk_State := DeleteSMSParseResponse;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	&#xD;
	DeleteSMSParseResponse:     &#xD;
        IF Wrk_SktTCPRcv.Done THEN	&#xD;
			Wrk_RecvMessage:= AryToString(In:=Wrk_RecvData[0], Size :=Min(Wrk_RecvSize, UINT#1985));	&#xD;
			IF 0 &lt; FIND(In1:=Wrk_RecvMessage, In2:='200 OK') THEN&#xD;
				Wrk_State := DeleteSMSCloseSocket;&#xD;
				Wrk_TimeInState := T#0s;&#xD;
			ELSE&#xD;
				Wrk_State := ErrorCloseSocket;&#xD;
				Wrk_TimeInState := T#0s;&#xD;
				Wrk_ErrorCode := 16#1241_0001;&#xD;
			END_IF;&#xD;
		ELSIF NOT Wrk_SktTCPRcv.Busy THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1241_0002;&#xD;
		ELSIF Wrk_SktTCPRcv.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1241_0003;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1241_0004;&#xD;
        END_IF;&#xD;
		&#xD;
	// Close socket&#xD;
	DeleteSMSCloseSocket:&#xD;
		Wrk_CloseSocket := TRUE;&#xD;
		&#xD;
		IF Wrk_SktClose.Done THEN&#xD;
			Wrk_State := ReadSMSOpenSocket; // Check for incomming messages again&#xD;
			Wrk_TimeInState := T#0s;&#xD;
		ELSIF Wrk_SktClose.Error THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1260_0001;&#xD;
		ELSIF Wrk_TimeInState &gt; ADD_TIME(In1:=Cfg_Timeout, In2:=STEP_TIMEOUT) THEN&#xD;
			Wrk_State := ErrorCloseSocket;&#xD;
			Wrk_TimeInState := T#0s;&#xD;
			Wrk_ErrorCode := 16#1260_0000;&#xD;
		END_IF;&#xD;
			&#xD;
&#xD;
ELSE&#xD;
	Wrk_State := Initialize;&#xD;
	Wrk_TimeInState := T#0s;&#xD;
	Wrk_ErrorCode := 16#FFFF_FFFF;&#xD;
&#xD;
END_CASE;&#xD;
&#xD;
&#xD;
// Get Interval Time&#xD;
 Wrk_TaskIntervalTime := GetMyTaskInterval();&#xD;
 // Increment state time&#xD;
 Wrk_TimeInState :=  ADD_TIME(In1:=Wrk_TimeInState, In2:=Wrk_TaskIntervalTime);&#xD;
 &#xD;
 &#xD;
// Create TCP Connection&#xD;
Wrk_SktTCPConnect(&#xD;
	Execute   :=Wrk_TCP_Connect,&#xD;
	SrcTcpPort:=UINT#0,  // Local TCP port number: Automatically assigned.&#xD;
	DstAdr    :=Cfg_IP_Adresse,  // Remote IP address&#xD;
	DstTcpPort:=Cfg_Port,  // Destination TCP port number&#xD;
	Socket    =&gt;Wrk_Socket);  // Socket&#xD;
&#xD;
// Clear Socket Buffer&#xD;
Wrk_SktClearBuf(&#xD;
            Execute:=Wrk_SktClearBuffer,&#xD;
            Socket :=Wrk_Socket);  // Socket&#xD;
&#xD;
// Get Socket Status&#xD;
Wrk_SktGetTCPStatus(&#xD;
            Execute:=Wrk_SktGetStatus,&#xD;
            Socket :=Wrk_Socket);  // Socket&#xD;
&#xD;
// Send TCP&#xD;
Wrk_SktTCPSend(&#xD;
    Execute:=Wrk_TCPSend,&#xD;
    Socket :=Wrk_Socket,  // Socket&#xD;
    SendDat:=Wrk_SendData[0],  // Send data&#xD;
    Size   :=LEN(Wrk_Request));  // Send data size&#xD;
&#xD;
// Recieve TCP&#xD;
 Wrk_SktTCPRcv(&#xD;
    Execute:=Wrk_TCPRecv,&#xD;
    Socket :=Wrk_Socket,  // Socket&#xD;
    TimeOut:= LINT_TO_UINT(TimeToSec(In:=Cfg_Timeout) * 10), &#xD;
    Size   :=SizeOfAry(Wrk_RecvData),  // Receive data size&#xD;
    RcvDat :=Wrk_RecvData[0],&#xD;
	RcvSize =&gt; Wrk_RecvSize);  // Receive data&#xD;
&#xD;
// Close TCP Socket&#xD;
Wrk_SktClose(Execute:=Wrk_CloseSocket,&#xD;
    Socket :=Wrk_Socket);&#xD;
	&#xD;
// Clear Execution bits&#xD;
Wrk_TCP_Connect :=FALSE;&#xD;
Wrk_SktClearBuffer := FALSE;&#xD;
Wrk_SktGetStatus := FALSE;&#xD;
Wrk_TCPSend := FALSE;&#xD;
Wrk_TCPRecv := FALSE;&#xD;
Wrk_CloseSocket := FALSE;&#xD;
&#xD;
// Update outputs&#xD;
Sts_SendSMSBusy := Wrk_SendSMSBusy;&#xD;
Sts_SendSMSDone := Wrk_SendSMSDone;&#xD;
Sts_SendSMSError := Wrk_SendSMSError;&#xD;
Sts_ConnectionError := Wrk_ConnectionError;&#xD;
Sts_RecvSMSNew := Wrk_RecvSMSNew;&#xD;
Val_Error := Wrk_ErrorCode;&#xD;
</Text></StructuredTextModel>