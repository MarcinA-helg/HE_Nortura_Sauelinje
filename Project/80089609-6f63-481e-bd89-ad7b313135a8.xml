<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME:			HE_MotorControl                                                                                                                                                                                                                                                                        &#xD;
//	CREATOR:		Helgevold - William Veim                                                                                                                                                                                                                                                              &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION		DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//	1.0.0				2025-03-04		William Veim			Initial release                                                                                                                                                                                                                                  &#xD;
//==============================================================================================================================&#xD;
//&#xD;
// 		FUNCTIONALITY:&#xD;
// 		* PID Controller&#xD;
// 		* Operates converters based on status (online, ready, fault-free, and no interlocks) as follows:&#xD;
//   	- Keeps at least one converter running at all times&#xD;
//   	- Steps converters in/out based on threshold values and delays set in SCADA&#xD;
//   	- Alternates operation on the selected weekday and time&#xD;
// 		* Operation modes:&#xD;
//   	- OFF      → Common output control = 0&#xD;
//   	- AUTO     → Common output follows regulation control&#xD;
// 		* Automatic switch of process value sensor upon digital alarm (failure) detection. Can be overridden in SCADA.&#xD;
// 		* Stops operation if an interlock condition is detected.&#xD;
//&#xD;
//==============================================================================================================================&#xD;
&#xD;
// Retrieves time and current clock from PLC/SCADA&#xD;
CurrentTime := TruncTod(DT_TO_TOD(In:=GetTime()), _SEC);&#xD;
&#xD;
 (*************************************************************************&#xD;
 *	INITIALIZE VARIABELS&#xD;
 *************************************************************************)&#xD;
 IF NOT Wrk_SwitchState_Init AND Ext_MultiControl.EXT_Engineering.PV_AutoSwitchState = 0 THEN&#xD;
	  Ext_MultiControl.EXT_Engineering.PV_AutoSwitchState := 2;&#xD;
	  Wrk_SwitchState_Init:=TRUE;&#xD;
 END_IF;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATING SETPOINT VALUE VALUE&#xD;
 *************************************************************************)&#xD;
TON_SP_Change1(PT:=SecToTime(Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_Delay));&#xD;
TON_SP_Change2(PT:=SecToTime(Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_Delay));&#xD;
TON_SP_Change3(PT:=SecToTime(Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_Delay));&#xD;
&#xD;
//ENDRING AV SETTPUNKT 1&#xD;
CASE SP_Change1_State OF&#xD;
	&#xD;
	0://Ikke i bruk&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_Type := 0;&#xD;
	&#xD;
	1://Digital tripper&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_Type := 1;&#xD;
		HE_DigExsToDigSimp(DigitalValue:=SP_Change1_DigitalTrigger, DigitalValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_Digital);&#xD;
		 IF SP_Change1_DigitalTrigger.EXT_Operator.ProcessValue THEN&#xD;
			 TON_SP_Change1.In:=TRUE;&#xD;
		 ELSE&#xD;
			 TON_SP_Change1.In:=FALSE;&#xD;
		 END_IF;&#xD;
	 &#xD;
	 2://Trigges av analog verdi (verdi over grense)&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_Type :=2;&#xD;
		HE_AnaExdToAnaSimp(AnalogValue:=SP_Change1_AnalogValue, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_AnaValue);&#xD;
		IF Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_AnaValue.ProcessValue &gt; Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_AnaLimit.ProcessValue THEN&#xD;
			TON_SP_Change1.In:=TRUE;&#xD;
		ELSE&#xD;
			TON_SP_Change1.In:=FALSE;&#xD;
		END_IF;&#xD;
		&#xD;
		3://Trigges av analog verdi (verdi over grense)&#xD;
			Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_Type :=3;&#xD;
			HE_AnaExdToAnaSimp(AnalogValue:=SP_Change1_AnalogValue, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_AnaValue);&#xD;
			IF Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_AnaValue.ProcessValue &lt; Ext_MultiControl.EXT_Operator.SP_Changed1.SP_Changed_AnaLimit.ProcessValue THEN&#xD;
				TON_SP_Change1.In:=TRUE;&#xD;
			ELSE&#xD;
				TON_SP_Change1.In:=FALSE;&#xD;
			END_IF;&#xD;
END_CASE;&#xD;
&#xD;
//ENDRING AV SETTPUNKT 2&#xD;
CASE SP_Change2_State OF&#xD;
	&#xD;
	0://Ikke i bruk&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_Type := 0;&#xD;
	&#xD;
	1://Digital tripper&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_Type := 1;&#xD;
		HE_DigExsToDigSimp(DigitalValue:=SP_Change2_DigitalTrigger, DigitalValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_Digital);&#xD;
		 IF SP_Change2_DigitalTrigger.EXT_Operator.ProcessValue THEN&#xD;
			 TON_SP_Change2.In:=TRUE;&#xD;
		 ELSE&#xD;
			 TON_SP_Change2.In:=FALSE;&#xD;
		 END_IF;&#xD;
	 &#xD;
	 2://Trigges av analog verdi (verdi over grense)&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_Type :=2;&#xD;
		HE_AnaExdToAnaSimp(AnalogValue:=SP_Change2_AnalogValue, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_AnaValue);&#xD;
		IF Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_AnaValue.ProcessValue &gt; Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_AnaLimit.ProcessValue THEN&#xD;
			TON_SP_Change2.In:=TRUE;&#xD;
		ELSE&#xD;
			TON_SP_Change2.In:=FALSE;&#xD;
		END_IF;&#xD;
		&#xD;
		3://Trigges av analog verdi (verdi over grense)&#xD;
			Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_Type :=3;&#xD;
			HE_AnaExdToAnaSimp(AnalogValue:=SP_Change2_AnalogValue, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_AnaValue);&#xD;
			IF Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_AnaValue.ProcessValue &lt; Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_AnaLimit.ProcessValue THEN&#xD;
				TON_SP_Change2.In:=TRUE;&#xD;
			ELSE&#xD;
				TON_SP_Change2.In:=FALSE;&#xD;
			END_IF;&#xD;
END_CASE;&#xD;
&#xD;
//ENDRING AV SETTPUNKT 3&#xD;
CASE SP_Change3_State OF&#xD;
	&#xD;
	0://Ikke i bruk&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_Type := 0;&#xD;
	&#xD;
	1://Digital tripper&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_Type := 1;&#xD;
		HE_DigExsToDigSimp(DigitalValue:=SP_Change3_DigitalTrigger, DigitalValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_Digital);&#xD;
		 IF SP_Change3_DigitalTrigger.EXT_Operator.ProcessValue THEN&#xD;
			 TON_SP_Change3.In:=TRUE;&#xD;
		 ELSE&#xD;
			 TON_SP_Change3.In:=FALSE;&#xD;
		 END_IF;&#xD;
	 &#xD;
	 2://Trigges av analog verdi (verdi over grense)&#xD;
		Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_Type :=2;&#xD;
		HE_AnaExdToAnaSimp(AnalogValue:=SP_Change3_AnalogValue, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_AnaValue);&#xD;
		IF Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_AnaValue.ProcessValue &gt; Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_AnaLimit.ProcessValue THEN&#xD;
			TON_SP_Change3.In:=TRUE;&#xD;
		ELSE&#xD;
			TON_SP_Change3.In:=FALSE;&#xD;
		END_IF;&#xD;
		&#xD;
		3://Trigges av analog verdi (verdi over grense)&#xD;
			Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_Type :=3;&#xD;
			HE_AnaExdToAnaSimp(AnalogValue:=SP_Change3_AnalogValue, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_AnaValue);&#xD;
			IF Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_AnaValue.ProcessValue &lt; Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_AnaLimit.ProcessValue THEN&#xD;
				TON_SP_Change3.In:=TRUE;&#xD;
			ELSE&#xD;
				TON_SP_Change3.In:=FALSE;&#xD;
			END_IF;&#xD;
END_CASE;&#xD;
&#xD;
//Rising edge ved redusert/økt settpunkt&#xD;
IF RE_SPChange1.Q THEN&#xD;
	Ext_MultiControl.EXT_Operator.SP_Select := 1;&#xD;
END_IF;&#xD;
&#xD;
IF RE_SPChange2.Q THEN&#xD;
	Ext_MultiControl.EXT_Operator.SP_Select := 2;&#xD;
END_IF;&#xD;
&#xD;
IF RE_SPChange3.Q THEN&#xD;
	Ext_MultiControl.EXT_Operator.SP_Select := 3;&#xD;
END_IF;&#xD;
&#xD;
//Henter aktuelt settpunkt&#xD;
CASE Ext_MultiControl.EXT_Operator.SP_Select OF&#xD;
	&#xD;
	0://Normal verdi&#xD;
	Ext_MultiControl.EXT_Operator.SP_Actual:=Ext_MultiControl.EXT_Operator.SP_Normal;&#xD;
	&#xD;
	1://Endret settpunkt (1)&#xD;
	Ext_MultiControl.EXT_Operator.SP_Actual:=Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_Value;&#xD;
	&#xD;
	2://Endret settpunkt (2)&#xD;
	Ext_MultiControl.EXT_Operator.SP_Actual:=Ext_MultiControl.EXT_Operator.SP_Changed2.SP_Changed_Value;&#xD;
	&#xD;
	3://Endret settpunkt (2)&#xD;
	Ext_MultiControl.EXT_Operator.SP_Actual:=Ext_MultiControl.EXT_Operator.SP_Changed3.SP_Changed_Value;&#xD;
	&#xD;
END_CASE;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATING PROCESS VALUE&#xD;
 *************************************************************************)&#xD;
 &#xD;
 HE_PVSelect(PV_Select:=Ext_MultiControl.EXT_Operator.PV_Select, &#xD;
						 PV_AutoSwitch:=Ext_MultiControl.EXT_Engineering.PV_AutoSwitch, &#xD;
						 PV_AutoSwitchState:=Ext_MultiControl.EXT_Engineering.PV_AutoSwitchState, &#xD;
						 PV_Actual=&gt;Wrk_PV_Actual, &#xD;
						 PV_Actual_Y0=&gt;Wrk_PV_Actual_Y0, &#xD;
						 PV_Actual_Y1=&gt;Wrk_PV_Actual_Y1, &#xD;
						 PV_NotAvailable=&gt;Wrk_PVNotAvailable, &#xD;
						 PV1_Value:=ProcessValue_1, &#xD;
						 PV2_Value:=ProcessValue_2, &#xD;
						 PV3_Value:=ProcessValue_3);&#xD;
&#xD;
&#xD;
//Henter data til PV select FB&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Wrk_PV_Actual, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.PV_Actual);&#xD;
&#xD;
//Kopierer input til struktur&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=ProcessValue_1, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.PV_Value1);&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=ProcessValue_2, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.PV_Value2);&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=ProcessValue_3, AnalogValueSimplified=&gt;Ext_MultiControl.EXT_Operator.PV_Value3);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	PID CONTROL&#xD;
 *************************************************************************)&#xD;
 &#xD;
PID(Run:=Ext_MultiControl.EXT_Operator.Mode = 2 AND NOT Interlock, &#xD;
		Autotune_Start:=Ext_MultiControl.EXT_Engineering.Autotune_Start, &#xD;
		Autotune_Done=&gt;Ext_MultiControl.EXT_Engineering.Autotune_Completed, &#xD;
		Autotune_Busy=&gt;Ext_MultiControl.EXT_Engineering.Autotune_Running, &#xD;
		Processvalue:=Ext_MultiControl.EXT_Operator.PV_Actual.ProcessValue, &#xD;
		SetpointValue:=Ext_MultiControl.EXT_Operator.SP_Actual.ProcessValue, &#xD;
		Inp_Proportional_Band:=Ext_MultiControl.EXT_Engineering.PID_P_Band, &#xD;
		Inp_IntergrationTime:=Ext_MultiControl.EXT_Engineering.PID_I_Tid, &#xD;
		Inp_DerivationTime:=Ext_MultiControl.EXT_Engineering.PID_D_Tid, &#xD;
		Output=&gt;Wrk_Gain, &#xD;
		RngUpLmt:=Wrk_PV_Actual_Y1, &#xD;
		RngLowLmt:=Wrk_PV_Actual_Y0, &#xD;
		MVLowLmt:=0.0,&#xD;
		MVUpLmt:=100.0, &#xD;
		ManResetVal:=0.0, &#xD;
		Direction:=Ext_MultiControl.EXT_Engineering.Direction, &#xD;
		ErrorMV:=0.0);&#xD;
		&#xD;
(*************************************************************************&#xD;
 *	STATE/FAULT CONTROL&#xD;
 *************************************************************************)	&#xD;
 &#xD;
//FAULT CONTROL&#xD;
//---------------------------&#xD;
Wrk_PVNotAvailable:=Wrk_PVNotAvailable;&#xD;
Wrk_ConfigFault:=FALSE;&#xD;
Wrk_Interlock:=Interlock;&#xD;
&#xD;
// STATE CONTROL&#xD;
//------------------&#xD;
&#xD;
//Resetter variabler før løkke&#xD;
Ext_MultiControl.EXT_General.Sts_Quality := 0;&#xD;
Wrk_ValueState:=	0;&#xD;
Wrk_AlarmState:=	FALSE;&#xD;
Wrk_AlarmSuffix:=	'';&#xD;
&#xD;
//No process value available&#xD;
Ext_MultiControl.EXT_Engineering.StateCfg_1.Sts_State := Wrk_PVNotAvailable;&#xD;
Ext_MultiControl.EXT_Engineering.StateCfg_1.Sts_Desc := 'Process value not available';&#xD;
HE_StateControl(Inp_StateData:=Ext_MultiControl.EXT_Engineering.StateCfg_1, &#xD;
							Sts_Quality:=Ext_MultiControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
		&#xD;
//Configuration fault&#xD;
Ext_MultiControl.EXT_Engineering.StateCfg_2.Sts_State := Wrk_ConfigFault;&#xD;
Ext_MultiControl.EXT_Engineering.StateCfg_2.Sts_Desc := 'Configuration fault';&#xD;
HE_StateControl(Inp_StateData:=Ext_MultiControl.EXT_Engineering.StateCfg_2, &#xD;
							Sts_Quality:=Ext_MultiControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Interlock&#xD;
Ext_MultiControl.EXT_Engineering.StateCfg_3.Sts_State := Wrk_Interlock;&#xD;
Ext_MultiControl.EXT_Engineering.StateCfg_3.Sts_Desc := 'Interlock';&#xD;
HE_StateControl(Inp_StateData:=Ext_MultiControl.EXT_Engineering.StateCfg_3, &#xD;
							Sts_Quality:=Ext_MultiControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
Ext_MultiControl.EXT_Engineering.StateCfg_1.Sts_Visible:=Interlock_InUse; //Vises bare dersom interlock er i bruk&#xD;
		&#xD;
CASE Wrk_ValueState OF&#xD;
	&#xD;
	0://Use value&#xD;
	Ext_MultiControl.EXT_Operator.Actual_Output:= Ext_MultiControl.EXT_Operator.Actual_Output;&#xD;
	&#xD;
	1://Hold value&#xD;
	Ext_MultiControl.EXT_Operator.Actual_Output:=Ext_MultiControl.EXT_Operator.Actual_Output;&#xD;
	&#xD;
	2://Pre defined output&#xD;
	Ext_MultiControl.EXT_Operator.Actual_Output:=Ext_MultiControl.EXT_Engineering.StateCfg_PreDefinedOutput;&#xD;
	&#xD;
END_CASE;	&#xD;
&#xD;
// ALARM CONTROL&#xD;
//------------------&#xD;
Wrk_AlarmGeneral.Inp_Connected_Cabinet:=				Cfg_ControlCabinet;&#xD;
Wrk_AlarmGeneral.Inp_Connected_Controller:=				Cfg_ControllerTAG;&#xD;
Wrk_AlarmGeneral.Inp_Process_Desc:=							Ext_MultiControl.EXT_General.Process_Desc;&#xD;
Wrk_AlarmGeneral.Inp_Process_Suffix:=							Wrk_AlarmSuffix;&#xD;
Wrk_AlarmGeneral.Inp_Process_TAG:=							'';&#xD;
Wrk_AlarmGeneral.Inp_Process_Value:=							'';&#xD;
&#xD;
Wrk_AlarmGeneral(ENS:=TRUE, &#xD;
								Ext_Alarm:=Ext_MultiControl.EXT_Alarm, &#xD;
								Int_Alarm:=Int_Alarm);	&#xD;
		&#xD;
//Styring&#xD;
//-------&#xD;
&#xD;
CASE Ext_MultiControl.EXT_Operator.Mode OF&#xD;
		&#xD;
	    0://Av&#xD;
&#xD;
				//Setter pådrag&#xD;
				//---------------&#xD;
				&#xD;
				Wrk_Gain := 0;&#xD;
				&#xD;
				&#xD;
				//Nullstiller status- og startord&#xD;
				//--------------------------------&#xD;
				&#xD;
				Clear(State_Word);&#xD;
				Clear(Start_Word);&#xD;
				&#xD;
				&#xD;
				//Stopper omformere&#xD;
				//----------------------&#xD;
				&#xD;
				Clear(Actuator_Engage);&#xD;
				&#xD;
		2://Auto&#xD;
		&#xD;
				//Setter pådrag&#xD;
				//---------------&#xD;
				TON_StartAuto(In:=Wrk_Gain&gt;0.5, PT:=TIME#5s);&#xD;
				&#xD;
				IF TON_StartAuto.Q THEN //Pådrag må være over 0.5% i 5sek&#xD;
					Output := Wrk_Gain;&#xD;
				ELSE&#xD;
					Output := 0;&#xD;
				END_IF;&#xD;
				&#xD;
				&#xD;
				//Trinning&#xD;
				//---------&#xD;
				//Tillater ikke trinn ut før etter satt forsinkelse ved first cycle (default: 1 min)&#xD;
				TON_StepOut_FirstCycle(PT:=TIME#60s);&#xD;
				IF P_First_Run OR P_First_RunMode THEN&#xD;
					TON_StepOut_FirstCycle.In := TRUE;&#xD;
				END_IF;&#xD;
				&#xD;
				IF Ext_MultiControl.EXT_Engineering.Step_Mode = 1 THEN&#xD;
&#xD;
					//Timer instanser&#xD;
					TON_StepIn(PT:=SecToTime(Ext_MultiControl.EXT_Engineering.Delay_StepIn));&#xD;
					TON_StepOut(PT:=SecToTime(Ext_MultiControl.EXT_Engineering.Delay_StepOut));&#xD;
					&#xD;
					//Sammenligner pådrag med grenseverdi for trinn opp&#xD;
					IF Output &gt; Ext_MultiControl.EXT_Engineering.Limit_StepIn.ProcessValue THEN&#xD;
						TON_StepIn.In := TRUE;&#xD;
					ELSE&#xD;
						TON_StepIn.In := FALSE;&#xD;
					END_IF;&#xD;
					&#xD;
					//Sammenligner pådrag med grenseverdi for trinn ned&#xD;
					IF Output &lt; Ext_MultiControl.EXT_Engineering.Limit_StepOut.ProcessValue AND Wrk_NumberOfRunning &gt; 1 AND TON_StepOut_FirstCycle.Q THEN&#xD;
						TON_StepOut.In := TRUE;&#xD;
					ELSE&#xD;
						TON_StepOut.In := FALSE;&#xD;
					END_IF;&#xD;
					&#xD;
					//Trinner opp når teller har telt&#xD;
					IF TON_StepIn.Q THEN&#xD;
						TON_StepIn.In := FALSE;&#xD;
						Wrk_StepIn := TRUE;&#xD;
					END_IF;&#xD;
					&#xD;
					//Trinner ned når teller har telt&#xD;
					IF TON_StepOut.Q THEN&#xD;
						TON_StepOut.In := FALSE;&#xD;
						Wrk_StepOut := TRUE;&#xD;
					END_IF;&#xD;
				ELSIF Wrk_NumberOfRunning &gt; 1 THEN&#xD;
					Wrk_StepOut := TRUE;&#xD;
				END_IF;&#xD;
				&#xD;
				&#xD;
				//Kriterier for alternering&#xD;
				//-------------------------&#xD;
				&#xD;
				//Sammenlikner dag og klokkeslett for alternering&#xD;
				IF CurrentTime = HE_INT2TOD(Hour:=Ext_MultiControl.EXT_Operator.Alternation_Clock_Hour, Minute:=Ext_MultiControl.EXT_Operator.Alternation_Clock_Minute) THEN	&#xD;
					CASE GetDayOfWeek(In:=GetTime()) OF&#xD;
					&#xD;
				   	 	_MON://Mandag&#xD;
							IF TestABit(In:= Ext_MultiControl.EXT_Operator.Alternation_Days, Pos:=1) THEN&#xD;
								RE_Alterner.Clk := TRUE;&#xD;
							END_IF;&#xD;
							&#xD;
						_TUE://Tirsdag&#xD;
							IF TestABit(In:= Ext_MultiControl.EXT_Operator.Alternation_Days, Pos:=2) THEN&#xD;
								RE_Alterner.Clk := TRUE;&#xD;
							END_IF;&#xD;
							&#xD;
						_WED://Onsdag&#xD;
							IF TestABit(In:= Ext_MultiControl.EXT_Operator.Alternation_Days, Pos:=3) THEN&#xD;
								RE_Alterner.Clk := TRUE;&#xD;
							END_IF;&#xD;
							&#xD;
						_THU://Torsdag&#xD;
							IF TestABit(In:= Ext_MultiControl.EXT_Operator.Alternation_Days, Pos:=4) THEN&#xD;
								RE_Alterner.Clk := TRUE;&#xD;
							END_IF;&#xD;
&#xD;
						_FRI://Fredag&#xD;
							IF TestABit(In:= Ext_MultiControl.EXT_Operator.Alternation_Days, Pos:=5) THEN&#xD;
								RE_Alterner.Clk := TRUE;&#xD;
							END_IF;&#xD;
&#xD;
						_SAT://Lørdag&#xD;
							IF TestABit(In:= Ext_MultiControl.EXT_Operator.Alternation_Days, Pos:=6) THEN&#xD;
								RE_Alterner.Clk := TRUE;&#xD;
							END_IF;&#xD;
							&#xD;
						_SUN://Søndag&#xD;
							IF TestABit(In:= Ext_MultiControl.EXT_Operator.Alternation_Days, Pos:=7) THEN&#xD;
								RE_Alterner.Clk := TRUE;&#xD;
							END_IF;&#xD;
							&#xD;
					END_CASE;&#xD;
				ELSE&#xD;
					RE_Alterner.Clk := FALSE;&#xD;
				END_IF;&#xD;
&#xD;
				RE_Alterner(Q=&gt;Wrk_Alterner);&#xD;
&#xD;
&#xD;
				//Lager statusord for frekvensomformere basert på kriterier&#xD;
				//---------------------------------------------------------------&#xD;
							&#xD;
				IF ENS AND NOT Interlock THEN&#xD;
					State_Word:=Actuator_AutoAvailable;&#xD;
				ELSE&#xD;
					clear(State_Word);&#xD;
				END_IF;&#xD;
				&#xD;
				//Kjører alternering&#xD;
				//-------------------&#xD;
				&#xD;
				Alternation(&#xD;
					Cmd_Alternate:=Wrk_Alterner, &#xD;
					Cmd_StepIn:=Wrk_StepIn, &#xD;
					Cmd_StepOut:=Wrk_StepOut, &#xD;
					Out_Start=&gt;Start_Word, &#xD;
					Inp_State:=State_Word, &#xD;
					Cfg_NewOnLoss:=Ext_MultiControl.EXT_Engineering.Step_NewOnLoss, &#xD;
					Out_NumberOfReady=&gt;Wrk_NumberOfReady, &#xD;
					Out_NumberOfRunning=&gt;Wrk_NumberOfRunning);&#xD;
				&#xD;
				//Tilleggskriterier&#xD;
				//-----------------&#xD;
				&#xD;
				//Trinner inn hvis ingen kjører&#xD;
				IF Wrk_NumberOfRunning &lt; Ext_MultiControl.EXT_Engineering.Step_MinimumCount AND NOT (Wrk_NumberOfRunning &gt;= Ext_MultiControl.EXT_Engineering.Step_MaximumCount) THEN&#xD;
					Wrk_StepIn := TRUE;&#xD;
				END_IF;&#xD;
&#xD;
				//Skal ikke trinne ut om bare én kjører&#xD;
				IF Wrk_StepOut AND Wrk_NumberOfRunning = 1 OR (Wrk_NumberOfRunning &gt;= Ext_MultiControl.EXT_Engineering.Step_MaximumCount) THEN&#xD;
					Wrk_StepOut := FALSE;&#xD;
				END_IF;&#xD;
				&#xD;
				//Manuell aktivering av trinn inn eller ut fra SCADA&#xD;
				//-----------------------------&#xD;
				RE_StepIn(Clk:=Ext_MultiControl.EXT_Operator.Manual_StepIn);&#xD;
				RE_StepOut(Clk:=Ext_MultiControl.EXT_Operator.Manual_StepOut);&#xD;
				IF RE_StepIn.Q THEN&#xD;
					Wrk_StepIn := TRUE;&#xD;
					Ext_MultiControl.EXT_Operator.Manual_StepIn := FALSE;&#xD;
				END_IF;&#xD;
				&#xD;
				IF RE_StepOut.Q THEN&#xD;
					Wrk_StepOut := TRUE;&#xD;
					Ext_MultiControl.EXT_Operator.Manual_StepOut := FALSE;&#xD;
				END_IF;&#xD;
				&#xD;
				//Starter/Stopper omformere&#xD;
				//-----------------------------&#xD;
				FOR Index_A := 0 TO UPPER_BOUND(Actuator_Engage,1) DO&#xD;
					Actuator_Engage[Index_A]:=Start_Word[Index_A];&#xD;
				END_FOR;&#xD;
				&#xD;
END_CASE;&#xD;
&#xD;
//Legger prosessveri til intern struktur&#xD;
//----------------------------------------&#xD;
Ext_MultiControl.INT_Data.NumberAvailable := Wrk_NumberOfReady;&#xD;
Ext_MultiControl.INT_Data.NumberRunning 	:=	Wrk_NumberOfRunning;&#xD;
</Text></StructuredTextModel>