<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME: 		HE_VFD_AnaContr&#xD;
//	CREATOR:	    William Veim                                                                                                                                                                                                                                              &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION				DATE					SIGN					DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//  1.1.0					2023-10-18			WV						Draft&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		DESCRIPTION:&#xD;
//&#xD;
//		FUNCTION:&#xD;
//&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update Inputs&#xD;
 *************************************************************************)&#xD;
 &#xD;
// Input Parmeter&#xD;
Wrk_VFD_Logic.Cfg_AutoInUse:= 			Cfg_AutoAvailable;&#xD;
Wrk_VFD_Logic.Inp_AutoRunFwd:= 		Inp_AutoStartRef;&#xD;
Wrk_VFD_Logic.Inp_AutoSpeedRef:= 		Inp_AutoSpeedRef;&#xD;
Wrk_VFD_Logic.Inp_Interlock:= 				Inp_Interlock;&#xD;
Wrk_VFD_Logic.Cfg_Interlock_InUse:=	Cfg_Interlock_InUse;&#xD;
Wrk_VFD_Logic.Inp_LOTO:= 					Inp_LOTO;&#xD;
Wrk_VFD_Logic.Cfg_LOTO_InUse:= 		Cfg_Interlock_InUse;&#xD;
Wrk_VFD_Logic.Inp_STO:=						Inp_STO;&#xD;
Wrk_VFD_Logic.Cfg_STO_InUse:= 			Cfg_STO_InUse;&#xD;
Wrk_VFD_Logic.Inp_ComFault:= 				Inp_ComFault;&#xD;
Wrk_VFD_Logic.Inp_Online:=					Inp_Online;&#xD;
Wrk_VFD_Logic.Inp_Ready:= 					Inp_Ready;&#xD;
Wrk_VFD_Logic.Inp_RunningFwd:= 		Wrk_Running;&#xD;
Wrk_VFD_Logic.Inp_Error:= 					Inp_Fault;&#xD;
Wrk_VFD_Logic.Inp_Warning:= 				Inp_Warning;&#xD;
Wrk_VFD_Logic.Inp_Remote:=					Inp_Remote;&#xD;
Wrk_VFD_Logic.Inp_AlmSuppress:=			Inp_AlmSuppress;&#xD;
Wrk_VFD_Logic.Inp_AlmSuppressDesc:= 	Inp_AlmSuppressDesc;&#xD;
Wrk_VFD_Logic.Cfg_AlmSuppress_IfOff:=	Cfg_AlmSuppress_IfOff;&#xD;
&#xD;
Wrk_VFD_Logic.Inp_ActSpeed := ScaleTrans(SclIn:=INT_TO_REAL(Inp_Feedback), &#xD;
																				X0:=Cfg_Feedback_X0, &#xD;
																				Y0:=0, &#xD;
																				X1:=Cfg_Feedback_X1, &#xD;
																				Y1:=100);;&#xD;
&#xD;
// Locked parameter&#xD;
Wrk_VFD_Logic.Inp_VoltageEnabled :=				TRUE;&#xD;
Wrk_VFD_Logic.Inp_LocalStop := 						FALSE;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	VFD Power, Current, Energy&#xD;
 *************************************************************************)&#xD;
	//Wrk_FrekvOmf_Logic.Inp_Power&#xD;
	//Wrk_FrekvOmf_Logic.Inp_Energy&#xD;
	//Wrk_FrekvOmf_Logic.Inp_Current &#xD;
	&#xD;
(*************************************************************************&#xD;
 *	Runtime Statistics&#xD;
 *************************************************************************)&#xD;
&#xD;
	//Wrk_FrekvOmf_Logic.Inp_TotalRunTime **Hentes fra explicit message&#xD;
	&#xD;
(*************************************************************************&#xD;
 *	Execute VFD Logic&#xD;
 *************************************************************************)&#xD;
 &#xD;
	Wrk_VFD_Logic(Ext_VFD:=Ext_VFD, &#xD;
							Int_Alarm:=Int_Alarm);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update SCADA&#xD;
 *************************************************************************)&#xD;
&#xD;
//Ext_VFD.SCADA.VFD_STATE **Hentes fra explicit message&#xD;
//Ext_VFD.SCADA.ERROR **Hentes fra explicit message&#xD;
&#xD;
(*************************************************************************&#xD;
 *	Update Outputs&#xD;
 *************************************************************************)&#xD;
&#xD;
// Output Parameters&#xD;
&#xD;
Sts_AvailableAuto := Wrk_VFD_Logic.Sts_AvailableAuto;&#xD;
Sts_Interlock := Wrk_VFD_Logic.Sts_Interlock;&#xD;
Sts_RunningFwd := Wrk_VFD_Logic.Sts_RunningFwd;&#xD;
Out_Start:=Wrk_VFD_Logic.Out_RunFwd;&#xD;
Out_Output:= Wrk_VFD_Logic.Val_SpeedRef;&#xD;
Out_OutputINT := REAL_TO_INT(ScaleTrans(SclIn:=Wrk_VFD_Logic.Val_SpeedRef, &#xD;
												X0:=0, &#xD;
												Y0:=INT_TO_REAL(Cfg_Output_Y0), &#xD;
												X1:=100, &#xD;
												Y1:=INT_TO_REAL(Cfg_Output_Y1)));&#xD;
</Text></StructuredTextModel>