<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:						HE_TimeSync&#xD;
//	CREATOR:					Helgevold - William Veim&#xD;
// REQUIREMENTS: 		NX CPU&#xD;
//							&#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
// VERSION LOG:&#xD;
//	VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	1.0.0					2024-09-09		William Veim        	Initial release&#xD;
//	2.0.0					2025-03-25		William Veim        	Rework&#xD;
//	&#xD;
//================================================================================================================================&#xD;
//&#xD;
//			DESCRTIPTION: 	&#xD;
//			Syncroniserer CPU klokke etter sommer/vintertid og NTP server. Tidssone må settes riktig i Controller Clock (GMT +01:00 Sweden)&#xD;
//			NB! Blokken går i fault state dersom NTP sync intervall er over 12t, anbefaler 2t invervall på NTP settings		&#xD;
//		&#xD;
//===============================================================================================================================&#xD;
&#xD;
//Rising edge for minute pulse&#xD;
RE_MinutePulse(Clk:=Get1minClk());&#xD;
&#xD;
//Rising/falling edge for changing between summer/winter time&#xD;
RE_SummerTime(Clk:=TimeChange.DST_state);&#xD;
FE_WinterTime(Clk:=TimeChange.DST_state);&#xD;
&#xD;
//Sets UTC_Time to current CPU time&#xD;
UTC_Time := GetTime();&#xD;
&#xD;
//Set time sync according to summertime&#xD;
IF RE_SummerTime.Q AND TimeZone_Active THEN&#xD;
	Adjust_Time:=TRUE;&#xD;
//Set time sync according to wintertime&#xD;
ELSIF FE_WinterTime.Q AND TimeZone_Active THEN&#xD;
	Adjust_Time:=TRUE;&#xD;
	UTC_Time:=  SUB_DT_TIME(In1:=GetTime(), In2:=T#1h);&#xD;
//Set time sync accoring to NTP server time&#xD;
ELSIF _EIP_NTPResult.ExecNormal AND NOT _EIP_NTPSrvErr AND (_EIP_NTPResult.ExecTime &lt;&gt; NTP_ExecTime_Sample) THEN&#xD;
	NTP_ExecTime_Sample:=_EIP_NTPResult.ExecTime;&#xD;
	UTC_Time :=_EIP_NTPResult.ExecTime;&#xD;
	Adjust_Time:=TRUE;&#xD;
END_IF;&#xD;
&#xD;
//FB for adjusting time according to summer/winter&#xD;
TimeChange(&#xD;
  Enable:= TRUE&#xD;
, UTCDateAndTime:=UTC_Time &#xD;
, UTCZoneShift:=T#0h&#xD;
, LocalDateAndTime=&gt;Local_Time);&#xD;
&#xD;
//Counting time since last sync&#xD;
IF NOT Adjust_Time AND RE_MinutePulse.Q THEN&#xD;
	TimeSince_Sync := TimeSince_Sync + 1;&#xD;
ELSIF Adjust_Time THEN&#xD;
	TimeSince_Sync := 0;&#xD;
	FirstTime_Adjusted := TRUE;&#xD;
END_IF;&#xD;
&#xD;
//Adjusting time for CPU&#xD;
IF Adjust_Time THEN&#xD;
	SetTime(In:=Local_Time);&#xD;
	TimeSync_Exce:=Local_Time;&#xD;
	Adjust_Time:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
//Fault state&#xD;
IF P_First_Run OR P_First_RunMode THEN&#xD;
	FirstTime_Adjusted := FALSE;&#xD;
	NTP_ServerErr := FALSE;&#xD;
ELSIF FirstTime_Adjusted THEN&#xD;
	NTP_ServerErr := _EIP_NTPSrvErr;&#xD;
END_IF;&#xD;
TimeSync_Fault := NTP_ServerErr OR TimeSince_Sync &gt;=  720;&#xD;
</Text></StructuredTextModel>