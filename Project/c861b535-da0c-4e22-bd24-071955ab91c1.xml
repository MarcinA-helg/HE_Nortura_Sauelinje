<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:						PID&#xD;
//	CREATOR:					Helgevold - Daniel Årvik&#xD;
// REQUIREMENTS: 		NX CPU&#xD;
// &#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	1.0.0				2023-03-01			Daniel Årvik				Initial Release&#xD;
// 2.0.0				2025-03-11			Fredrik Bjerkenes 	Rework&#xD;
//================================================================================================================================&#xD;
//&#xD;
//		BESKRIVELSE:&#xD;
//		Simplifies the use of the PIDAT function by reducing functionality that is not in use (tracking)&#xD;
// and moving parameters to inputs instead of using the structures '_sOPR_SET_PARAMS' and '_sINIT_SET_PARAMS'.&#xD;
//&#xD;
//		P term: Lower value → stronger proportional effect, 0.01 to 1000.00 (% FS)&#xD;
//		I term: Higher value → stronger integral effect, 0s = no integral term up to 10,000s&#xD;
//		D term: Higher value → stronger derivative effect, 0s = no derivative term up to 10,000s&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
&#xD;
//Setting relevant parameters for PIDAT&#xD;
OprSetParameters.MVLowLmt 	:= MVLowLmt; 		//Input&#xD;
OprSetParameters.MVUpLmt 		:= MVUpLmt; 			//Input&#xD;
OprSetParameters.ManResetVal 	:= ManResetVal;	 	//Input&#xD;
OprSetParameters.MVTrackSw	:= FALSE;					//Tracking ikke i bruk&#xD;
OprSetParameters.MVTrackVal 	:= 0.0; 						//Tracking ikke i bruk&#xD;
OprSetParameters.StopMV 			:= 0.0; 						//Default&#xD;
OprSetParameters.ErrorMV 		:= ErrorMV; 				//Input&#xD;
OprSetParameters.Alpha 			:= 0.65; 					//Default&#xD;
OprSetParameters.ATCalcGain 	:= 1.0; 						//Default&#xD;
OprSetParameters.ATHystrs 		:= 0.2; 						//Default&#xD;
&#xD;
InitSetParameters.SampTime 		:= T#100ms; 			//Default&#xD;
InitSetParameters.RngUpLmt 		:= RngUpLmt;			//Input&#xD;
InitSetParameters.RngLowLmt		:= RngLowLmt;		//Input&#xD;
InitSetParameters.DirOpr 			:= Direction;					//Input&#xD;
&#xD;
//Convert integration and derivation( UINT to TIME)&#xD;
Integration_Band_Time		:= SecToTime(In:=Inp_IntergrationTime);&#xD;
Derivation_Band_Time	:= SecToTime(In:=Inp_DerivationTime);&#xD;
&#xD;
&#xD;
//Kjører PID kontroller&#xD;
PID(&#xD;
  Run 							:= Run, //Start PID regulator&#xD;
  ManCtl						:= FALSE, // not used&#xD;
  StartAT						:= Autotune_Start, //Start autotuning&#xD;
  PV				 				:= ProcessValue, //Prosess Value input&#xD;
  SP 								:= SetpointValue, //Settpunkt Value input&#xD;
  OprSetParams 			:= OprSetParameters, //Setup parameter register&#xD;
  InitSetParams 			:= InitSetParameters, //&#xD;
  ProportionalBand 		:= Inp_Proportional_Band, //Write P band&#xD;
  IntegrationTime 		:= Integration_Band_Time, //Write I tid&#xD;
  DerivativeTime 			:= Derivation_Band_Time, //Write D tid&#xD;
  ManMV 						:= Dummy, //Tullevariabel&#xD;
  Error 							=&gt; Fault, //Fault PID controller &#xD;
  MV 							=&gt; Output, //Gain&#xD;
  ATDone						=&gt;Autotune_Done, //Autotuning done&#xD;
  ATBusy						=&gt;Autotune_Busy); //Autotuning Busy&#xD;
&#xD;
//Convert integration time and derivation from TIME to UINT&#xD;
Inp_IntergrationTime 	:= LINT_TO_UINT(TimeToSec(Integration_Band_Time));&#xD;
Inp_DerivationTime 	:= LINT_TO_UINT(TimeToSec(Derivation_Band_Time));</Text></StructuredTextModel>