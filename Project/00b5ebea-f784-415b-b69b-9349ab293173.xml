<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME:			 HE_AlarmGeneral                                                                                                                                                                                                                                                                 &#xD;
//	CREATOR:		 William Veim, Helgevold Elektro                                                                                                                                                                                                                                             &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION			DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//	1.0.0					31.03.2025		William Veim			Initial Release&#xD;
//	1.0.1					29.04.2025		Ruben Byman			Added trigger input&#xD;
//	1.0.2					16.05.2025		Ruben Byman			Added missing R_TRIGs&#xD;
// 1.0.3					24.06.2025		Fredrik Bjerkenes 	Inp_Processvalue string increased from 4 to 25&#xD;
// 1.0.4					24.06.2025		Fredrik Bjerkenes 	Alarm suppressed when return delay Q is True Sts suppressed is set to false &#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		DESCRIPTION:&#xD;
//&#xD;
//&#xD;
//==============================================================================================================================&#xD;
&#xD;
(*************************************************************************&#xD;
 *	ASSIGNS ALARM INDEX (Only first run)&#xD;
 *************************************************************************)&#xD;
IF AlarmToken=-1 THEN&#xD;
	FOR a:=0 TO UPPER_BOUND(Int_Alarm, 1) DO &#xD;
		IF NOT Int_Alarm[a].Cfg_InUse THEN&#xD;
			AlarmToken := UDINT_TO_INT(a);&#xD;
			Int_Alarm[a].Cfg_InUse:=TRUE;&#xD;
			EXIT;&#xD;
		END_IF;&#xD;
	END_FOR;&#xD;
END_IF;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	ITNERNAL VARIABELS&#xD;
 *************************************************************************)&#xD;
TON_SupressReturn(PT:=SecToTime(Ext_Alarm.EXT_Engineering.Cfg_SupressDelayOff));&#xD;
&#xD;
//Supress control&#xD;
IF Inp_AlarmSupress THEN&#xD;
	Ext_Alarm.EXT_Engineering.Sts_Suppressed:=TRUE;&#xD;
ELSIF NOT Inp_AlarmSupress THEN&#xD;
	TON_SupressReturn.In:=TRUE;&#xD;
	IF TON_SupressReturn.Q THEN&#xD;
		Ext_Alarm.EXT_Engineering.Sts_Suppressed:=FALSE;&#xD;
		TON_SupressReturn.In:=FALSE;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
//Supress desc update&#xD;
IF Ext_Alarm.EXT_Engineering.Sts_Suppressed THEN&#xD;
	Ext_Alarm.EXT_Engineering.Sts_SuppressedDesc:=Inp_AlmSuppressDesc;&#xD;
ELSE&#xD;
	Ext_Alarm.EXT_Engineering.Sts_SuppressedDesc:='None';&#xD;
END_IF;&#xD;
&#xD;
Wrk_AnalogAlarm:= Ext_Alarm.EXT_General.Sts_Alarm_Status = 1 AND NOT Wrk_Alarm; //Used to not reset alarm structure if analog alarm active&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	ALARM TIMER&#xD;
 *************************************************************************)&#xD;
 &#xD;
 //Timer settings&#xD;
 TON_AlarmTrig(PT:=SecToTime(Ext_Alarm.EXT_Engineering.Cfg_DigAlarm_Delay));&#xD;
TON_AlarmReturn();&#xD;
IF Ext_Alarm.EXT_Engineering.Cfg_DigAlarm_UseReturnDelay THEN&#xD;
	TON_AlarmReturn.PT:=SecToTime(Ext_Alarm.EXT_Engineering.Cfg_DigAlarm_Delay);&#xD;
ELSE&#xD;
	TON_AlarmReturn.PT:=TIME#0ms;&#xD;
END_IF;&#xD;
 &#xD;
 &#xD;
 	//ALARM CONTROL&#xD;
	//------------------------------------------&#xD;
	&#xD;
	//Alarm trigger&#xD;
IF Ext_Alarm.EXT_Operator.Cfg_OnOff AND NOT Ext_Alarm.EXT_Engineering.Sts_Suppressed &#xD;
	AND Inp_Trigger OR Ext_Alarm.EXT_Engineering.Cfg_TestAlarm THEN&#xD;
	TON_AlarmTrig.In:=TRUE;&#xD;
	TON_AlarmReturn.In:=FALSE;&#xD;
	IF TON_AlarmTrig.Q THEN&#xD;
		Wrk_Alarm:=TRUE;&#xD;
	END_IF;&#xD;
	&#xD;
	//Alarm return without latch&#xD;
	ELSIF Ext_Alarm.EXT_Operator.Cfg_OnOff AND NOT Ext_Alarm.EXT_Engineering.Sts_Suppressed &#xD;
	AND (NOT Inp_Trigger OR NOT Ext_Alarm.EXT_Engineering.Cfg_TestAlarm)&#xD;
	AND NOT Ext_Alarm.EXT_Engineering.Cfg_Latch THEN&#xD;
	&#xD;
	TON_AlarmReturn.In:=TRUE;&#xD;
	TON_AlarmTrig.In:=FALSE;&#xD;
	IF TON_AlarmReturn.Q THEN&#xD;
		Wrk_Alarm:=FALSE;&#xD;
	END_IF;&#xD;
	&#xD;
	//Alarm return with latch&#xD;
	ELSIF Ext_Alarm.EXT_Operator.Cfg_OnOff AND NOT Ext_Alarm.EXT_Engineering.Sts_Suppressed &#xD;
	AND (NOT Inp_Trigger OR NOT Ext_Alarm.EXT_Engineering.Cfg_TestAlarm)&#xD;
	AND Ext_Alarm.EXT_Engineering.Cfg_Latch THEN&#xD;
	&#xD;
	TON_AlarmReturn.In:=TRUE;&#xD;
	TON_AlarmTrig.In:=FALSE;&#xD;
	IF TON_AlarmReturn.Q AND Ext_Alarm.EXT_Operator.Cfg_Acknowledge THEN&#xD;
		Wrk_Alarm:=FALSE;&#xD;
	END_IF;	&#xD;
	&#xD;
	//Alarm return (turned off, no delay)&#xD;
	ELSIF NOT Ext_Alarm.EXT_Operator.Cfg_OnOff THEN&#xD;
	Wrk_Alarm:=FALSE;&#xD;
	TON_AlarmTrig.In:=FALSE;&#xD;
END_IF;&#xD;
 &#xD;
&#xD;
//DATA TO INTERNAL STRUCTURE&#xD;
//-----------------------------------&#xD;
Int_Alarm[AlarmToken].Sts_Alarm_Priority:=							UINT_TO_STRING(Ext_Alarm.EXT_Engineering.Cfg_PriorityLevel);;&#xD;
Int_Alarm[AlarmToken].Sts_Connected_Cabinet:=					Inp_Connected_Cabinet;&#xD;
Int_Alarm[AlarmToken].Sts_Connected_Controller:=				Inp_Connected_Controller;&#xD;
Int_Alarm[AlarmToken].Sts_Process_TAG:=								Inp_Process_TAG;&#xD;
Int_Alarm[AlarmToken].Sts_Process_Value:=							Inp_Process_Value;&#xD;
Int_Alarm[AlarmToken].Sts_Process_Desc:=							Inp_Process_Desc;&#xD;
Int_Alarm[AlarmToken].Sts_SMS_Guard:=								Ext_Alarm.EXT_Engineering.Cfg_SMS_Guard;&#xD;
Int_Alarm[AlarmToken].Sts_SMS_OnlyDayTime:=					Ext_Alarm.EXT_Engineering.Cfg_SMS_OnlyDayTime;&#xD;
Int_Alarm[AlarmToken].Sts_SMS_Technical:=							Ext_Alarm.EXT_Engineering.Cfg_SMS_Technical;&#xD;
IF Wrk_Alarm AND NOT Ext_Alarm.EXT_Engineering.Cfg_TestAlarm THEN&#xD;
	Int_Alarm[AlarmToken].Sts_Process_Suffix:=							Inp_Process_Suffix;&#xD;
ELSIF Ext_Alarm.EXT_Engineering.Cfg_TestAlarm THEN&#xD;
	Int_Alarm[AlarmToken].Sts_Process_Suffix:=							'Alarm test';&#xD;
ELSE &#xD;
	Int_Alarm[AlarmToken].Sts_Process_Suffix:=							'None';&#xD;
END_IF;&#xD;
&#xD;
//UPDATING SUFFIX TO SCADA STRUCTURE&#xD;
//----------------------------------------------&#xD;
&#xD;
Ext_Alarm.EXT_General.Sts_Alarm_Message := Int_Alarm[AlarmToken].Sts_Process_Suffix;&#xD;
&#xD;
//Trigger SMS sending (SMS sending only if activated)&#xD;
IF Wrk_Alarm AND Ext_Alarm.EXT_Engineering.Cfg_SMS_Dig AND NOT Wrk_AlarmSendt THEN&#xD;
	Int_Alarm[AlarmToken].Sts_State := 1;&#xD;
	Int_Alarm[AlarmToken].Sts_TimeToNextPri:=TIME#0ms;&#xD;
	Wrk_AlarmSendt:=TRUE;&#xD;
ELSIF NOT Wrk_Alarm AND NOT Wrk_AnalogAlarm THEN&#xD;
	Int_Alarm[AlarmToken].Sts_State := 0;&#xD;
	Wrk_AlarmSendt:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
//UPDATING OUTPUT&#xD;
//-----------------------------------&#xD;
Out_AlarmToken:=INT_TO_UINT(AlarmToken);&#xD;
&#xD;
IF NOT Wrk_Alarm THEN&#xD;
	Ext_Alarm.EXT_General.Sts_Alarm_Status:=0; //Alarm not active (if analog alarm, wil be owerwitten)&#xD;
ELSIF Wrk_Alarm THEN&#xD;
	Ext_Alarm.EXT_General.Sts_Alarm_Status:=1; //Alarm active&#xD;
ELSIF Ext_Alarm.EXT_Engineering.Sts_Suppressed THEN&#xD;
	Ext_Alarm.EXT_General.Sts_Alarm_Status:=2; //Alarm supressed&#xD;
END_IF;</Text></StructuredTextModel>