<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:					HE_ControllerStat&#xD;
//	CREATOR:				Helgevold - William Veim&#xD;
// REQUIREMENTS: NX CPU&#xD;
//&#xD;
// DESCRTIPTION: 	Collects status information from controller and outputs alarm&#xD;
//								&#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
// VERSION LOG:&#xD;
//	VERSION			DATE				SIGN						DESCRIPTION&#xD;
//	1.0					2024-11-18		William Veim        	Initial release&#xD;
//	1.1					2025-04-30		Ruben Byman			Added alarm and SMS_Error&#xD;
//	&#xD;
//================================================================================================================================&#xD;
&#xD;
// Checking Task Time&#xD;
TaskTime(ENI:=TRUE, Cfg_MaxExecPercent_Limit:=Cfg_TaskTime_Limit);&#xD;
&#xD;
// Retrieving input data&#xD;
//----------------------------&#xD;
Ext_ControllerStat.EXT_General.Controller_Cabinet:=Cfg_ControllerTAG;&#xD;
Ext_ControllerStat.EXT_General.Controller_TAG:= Cfg_ControlCabinet;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	RETRIVING CONTROLLER STATE&#xD;
 *************************************************************************)&#xD;
Ext_ControllerStat.EXT_Engineering.HardwareVersion:='Unknown';//Some work left to auto retrive info&#xD;
Ext_ControllerStat.EXT_Engineering.SoftwareVersion:='1.10.10'; //Some work left to auto retrive info&#xD;
Ext_ControllerStat.EXT_Engineering.UnitVersion:='NX-502'; //Some work left to auto retrive info&#xD;
Ext_ControllerStat.EXT_Engineering.Sts_PowerOnCount := UDINT_TO_UINT(_PowerOnCount);&#xD;
Ext_ControllerStat.EXT_Engineering.Sts_PowerOnTime := _PowerOnHour;&#xD;
Ext_ControllerStat.EXT_Engineering.Sts_MainTask_Time:= TaskTime.Avg_TaskTime;&#xD;
Ext_ControllerStat.EXT_Engineering.Sts_MaxTask_Time:= TaskTime.Max_TaskTime;&#xD;
Wrk_TaskTime_Exceeded := TaskTime.Sts_Alarm;&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	DECODE STATE (CONTROLLER, NX and EIP)&#xD;
 *************************************************************************)&#xD;
 &#xD;
 // Decode controller state&#xD;
//----------------------------&#xD;
IF _PLC_ErrSta = 0 THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_ControllerError := 'No fault';&#xD;
ELSIF TestABit(In:=_PLC_ErrSta,Pos:= 4) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_ControllerError := 'Observation fault';&#xD;
ELSIF TestABit(In:=_PLC_ErrSta,Pos:= 5) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_ControllerError := 'Minor fault';&#xD;
ELSIF TestABit(In:=_PLC_ErrSta,Pos:= 6) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_ControllerError := 'Partial fault';&#xD;
ELSIF TestABit(In:=_PLC_ErrSta,Pos:= 7) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_ControllerError := 'Major fault';&#xD;
ELSE&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_ControllerError := 'Unknown';&#xD;
END_IF;&#xD;
Wrk_PLC_Error := _PLC_ErrSta &gt; 15;		//Ignores Observation error for State Control&#xD;
&#xD;
// Decode NX bus state&#xD;
//----------------------------&#xD;
IF _NXB_ErrSta = 0 THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_NXBusError := 'No fault';&#xD;
ELSIF TestABit(In:=_NXB_ErrSta,Pos:= 4) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_NXBusError := 'Observation fault';&#xD;
ELSIF TestABit(In:=_NXB_ErrSta,Pos:= 5) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_NXBusError := 'Minor fault';&#xD;
ELSIF TestABit(In:=_NXB_ErrSta,Pos:= 6) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_NXBusError := 'Partial fault';&#xD;
ELSIF TestABit(In:=_NXB_ErrSta,Pos:= 7) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_NXBusError := 'Major fault';&#xD;
ELSE&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_NXBusError := 'Unknown';&#xD;
END_IF;&#xD;
Wrk_NXB_Error := _NXB_ErrSta &gt; 15;		//Ignores Observation error for State Control&#xD;
&#xD;
// Decode EIP state&#xD;
//----------------------------&#xD;
IF _EIP_ErrSta = 0 THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_EIPError := 'No fault';&#xD;
ELSIF TestABit(In:=_EIP_ErrSta,Pos:= 4) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_EIPError := 'Observation fault';&#xD;
ELSIF TestABit(In:=_EIP_ErrSta,Pos:= 5) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_EIPError := 'Minor fault';&#xD;
ELSIF TestABit(In:=_EIP_ErrSta,Pos:= 6) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_EIPError := 'Partial fault';&#xD;
ELSIF TestABit(In:=_EIP_ErrSta,Pos:= 7) THEN&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_EIPError := 'Major fault';&#xD;
ELSE&#xD;
	Ext_ControllerStat.EXT_Engineering.Sts_EIPError := 'Unknown';&#xD;
END_IF;&#xD;
Wrk_EIP_Error := _EIP_ErrSta &gt; 15;		//Ignores Observation error for State Control&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	TIME SYNC (NTP and summer/winter)&#xD;
 *************************************************************************)&#xD;
 &#xD;
TimeSync(ENS:=TRUE, &#xD;
				TimeZone_Active:=Cfg_TimeSync_Activate, &#xD;
				TimeSync_Exce=&gt;Out_TimeSync_ExcTime, &#xD;
				TimeSync_Fault=&gt;Wrk_TimeSync_Fault);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	HOLD OUTPUT CONFIG (Retain output while controller stop)&#xD;
 *************************************************************************)&#xD;
 &#xD;
IF Cfg_HoldOutput THEN&#xD;
	_DeviceOutHoldCfg := 16#A5A5;&#xD;
ELSE&#xD;
	_DeviceOutHoldCfg := 16#0;&#xD;
END_IF;&#xD;
&#xD;
Sts_HoldOutput := _DeviceOutHoldStatus;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	BACKUP TO SD CARD&#xD;
 *************************************************************************)&#xD;
 &#xD;
SD_Date_Actual := DT_TO_DATE(GetTime());&#xD;
SD_Time_Actual := TruncTod(DT_TO_TOD(In:=GetTime()), _SEC);&#xD;
&#xD;
SD_Backup(&#xD;
					ENI:=Cfg_SDCard_InUse, &#xD;
					Cfg_BackupInterval:=TIME#10d);&#xD;
&#xD;
IF SD_Date_Actual &lt;&gt; SD_Date_Sample THEN&#xD;
	SD_Days_Sample := SD_Days_Sample + 1;&#xD;
END_IF;&#xD;
&#xD;
IF SD_Days_Sample &gt;= Cfg_SDBackup_Days AND Cfg_SDBackup_Time = SD_Time_Actual THEN&#xD;
	SD_Backup.Inp_StartBackup:=TRUE;&#xD;
	SD_Days_Sample:=0;&#xD;
ELSE&#xD;
	SD_Backup.Inp_StartBackup:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
Wrk_SDBackup_Fault := Cfg_SDCard_InUse AND (SD_Backup.Sts_BackupFailed OR SD_Backup.Sts_SD_Unavailable);&#xD;
&#xD;
&#xD;
(*************************************************************************&#xD;
 *	STATE AND FAULT CONTROL&#xD;
 *************************************************************************)&#xD;
 &#xD;
Wrk_SMS_Error := Inp_SMS_Error;&#xD;
Wrk_ArrayOutOfRange:= Inp_AlarmArrayOutOfRange;&#xD;
&#xD;
//Resetter variabler før løkke&#xD;
Ext_ControllerStat.EXT_General.Sts_Quality := 0;&#xD;
Wrk_AlarmState:=FALSE;&#xD;
Wrk_AlarmSuffix:='';&#xD;
Wrk_ValueState := 0;&#xD;
&#xD;
//PLC error&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_1.Sts_State := Wrk_PLC_Error;&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_1.Sts_Desc := Ext_ControllerStat.EXT_Engineering.Sts_ControllerError;&#xD;
HE_StateControl(Inp_StateData:=Ext_ControllerStat.EXT_Engineering.StateCfg_1, &#xD;
							Sts_Quality:=Ext_ControllerStat.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//NXBus error&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_2.Sts_State := Wrk_NXB_Error;&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_2.Sts_Desc := Ext_ControllerStat.EXT_Engineering.Sts_NXBusError;&#xD;
HE_StateControl(Inp_StateData:=Ext_ControllerStat.EXT_Engineering.StateCfg_2, &#xD;
							Sts_Quality:=Ext_ControllerStat.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//EIP error&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_3.Sts_State := Wrk_EIP_Error;&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_3.Sts_Desc := Ext_ControllerStat.EXT_Engineering.Sts_EIPError;&#xD;
HE_StateControl(Inp_StateData:=Ext_ControllerStat.EXT_Engineering.StateCfg_3, &#xD;
							Sts_Quality:=Ext_ControllerStat.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Task time exceeded&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_4.Sts_State := Wrk_TaskTime_Exceeded;&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_4.Sts_Desc := 'Task time exceeded';&#xD;
HE_StateControl(Inp_StateData:=Ext_ControllerStat.EXT_Engineering.StateCfg_4, &#xD;
							Sts_Quality:=Ext_ControllerStat.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//SD card backup error&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_5.Sts_State := Wrk_SDBackup_Fault;&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_5.Sts_Desc := 'SD card backup fault';&#xD;
HE_StateControl(Inp_StateData:=Ext_ControllerStat.EXT_Engineering.StateCfg_5, &#xD;
							Sts_Quality:=Ext_ControllerStat.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Time sync error&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_6.Sts_State := Wrk_TimeSync_Fault;&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_6.Sts_Desc := 'Time sync fault';&#xD;
HE_StateControl(Inp_StateData:=Ext_ControllerStat.EXT_Engineering.StateCfg_6, &#xD;
							Sts_Quality:=Ext_ControllerStat.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//SMS error&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_7.Sts_State := Wrk_SMS_Error;&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_7.Sts_Desc := 'SMS modem fault';&#xD;
HE_StateControl(Inp_StateData:=Ext_ControllerStat.EXT_Engineering.StateCfg_7, &#xD;
							Sts_Quality:=Ext_ControllerStat.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
//Alarm array fault&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_7.Sts_State := Wrk_ArrayOutOfRange;&#xD;
Ext_ControllerStat.EXT_Engineering.StateCfg_7.Sts_Desc := 'Array out of range';&#xD;
HE_StateControl(Inp_StateData:=Ext_ControllerStat.EXT_Engineering.StateCfg_7, &#xD;
							Sts_Quality:=Ext_ControllerStat.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
Wrk_ValueState := 0;	//Forces action to always be 0, not relevant for ControllerStat&#xD;
&#xD;
// ALARM CONTROL&#xD;
//------------------&#xD;
Wrk_AlarmGeneral.Inp_Connected_Cabinet:=				Cfg_ControlCabinet;&#xD;
Wrk_AlarmGeneral.Inp_Connected_Controller:=				Cfg_ControllerTAG;&#xD;
Wrk_AlarmGeneral.Inp_Process_TAG:=							Cfg_ControllerTAG;&#xD;
Wrk_AlarmGeneral.Inp_Process_Desc:=							'PLC';&#xD;
Wrk_AlarmGeneral.Inp_Process_Suffix:=							Wrk_AlarmSuffix;&#xD;
Wrk_AlarmGeneral.Inp_Process_Value:=							'';&#xD;
Wrk_AlarmGeneral.Inp_Trigger:=										Wrk_AlarmState;&#xD;
&#xD;
Wrk_AlarmGeneral(ENS:=TRUE, &#xD;
								Ext_Alarm:=Ext_ControllerStat.EXT_Alarm, &#xD;
								Int_Alarm:=Int_Alarm);								&#xD;
&#xD;
//Writing Outputs&#xD;
Sts_ControllerFault := Wrk_PLC_Error;&#xD;
Sts_NXBusFault := Wrk_NXB_Error;&#xD;
Sts_EIPFault := Wrk_EIP_Error;&#xD;
Sts_SDBackup_Fault := Wrk_SDBackup_Fault;&#xD;
Sts_TaskTime_Exceeded := Wrk_TaskTime_Exceeded;&#xD;
Sts_TimeSync_Fault := Wrk_TimeSync_Fault;&#xD;
</Text></StructuredTextModel>