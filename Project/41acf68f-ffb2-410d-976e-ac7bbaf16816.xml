<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//	NAME:					HE_SD_Backup&#xD;
//	CREATOR:				Helgevold - Jan Magne Dybvik&#xD;
// REQUIREMENTS: NX CPU&#xD;
//&#xD;
// DESCRTIPTION: 	Lagre backup av CPU p√• SD kort&#xD;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xD;
//  VERSION LOG:&#xD;
//	 VERSION			DATE				SIGN							DESCRIPTION&#xD;
//	 1.0.0				2024-01-31		Jan Magne Dybvik		Initial release&#xD;
//	 2.0.0				2025-04-01		William Veim				ReWork&#xD;
//&#xD;
//================================================================================================================================&#xD;
&#xD;
S0_Init := 0;&#xD;
S1_Idle := 1;&#xD;
S2_BackupToRoot := 2;&#xD;
S3_Cancel :=3;&#xD;
&#xD;
Wrk_now := GetTime();&#xD;
Wrk_BackupAge := SUB_DT_DT(In1:=Wrk_now, In2:=Wrk_LastBackup);&#xD;
Wrk_SD_Available := _Card1Ready AND NOT _Card1Err AND NOT _Card1Protect AND NOT _Card1Deteriorated AND NOT _Card1PowerFail;&#xD;
&#xD;
IF Wrk_State = S0_Init THEN&#xD;
	Wrk_StartBackup := FALSE;&#xD;
	Wrk_CancelBackup := FALSE;&#xD;
	Wrk_BackupFailed := FALSE;&#xD;
	Wrk_State := S1_Idle;&#xD;
	Wrk_TimeInState := T#0s;&#xD;
	&#xD;
ELSIF Wrk_State = S1_Idle THEN&#xD;
	IF (Wrk_BackupAge &gt;= Cfg_BackupInterval OR Inp_StartBackup) AND Wrk_SD_Available AND  NOT _BackupBusy THEN&#xD;
		Wrk_Filepath := ''; // SD card root folder&#xD;
		Wrk_StartBackup := TRUE;&#xD;
		Wrk_State := S2_BackupToRoot;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	END_IF;&#xD;
&#xD;
ELSIF Wrk_State = S2_BackupToRoot THEN&#xD;
	IF Wrk_Backup.Done THEN&#xD;
		Wrk_BackupFailed := FALSE;&#xD;
		Wrk_StartBackup := FALSE;&#xD;
		Wrk_LastBackup := Wrk_now;&#xD;
		Wrk_State :=S1_Idle;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	ELSIF Wrk_Backup.Error THEN&#xD;
		Wrk_BackupFailed := TRUE;&#xD;
		Wrk_StartBackup := FALSE;&#xD;
		Wrk_Error := Wrk_Backup.ErrorID;&#xD;
		Wrk_State := S0_Init;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	ELSIF Wrk_TimeInState &gt; T#10m THEN&#xD;
		Wrk_BackupFailed := TRUE;&#xD;
		Wrk_State := S3_Cancel;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	END_IF;&#xD;
		&#xD;
	&#xD;
ELSIF Wrk_State = S3_Cancel THEN&#xD;
	IF Wrk_Backup.Canceled THEN&#xD;
		Wrk_State := S0_Init;&#xD;
		Wrk_TimeInState := T#0s;&#xD;
	END_IF;&#xD;
&#xD;
ELSE&#xD;
	Wrk_State := 0;&#xD;
	Wrk_TimeInState := T#0s;&#xD;
END_IF;&#xD;
&#xD;
Wrk_Backup(Execute:=Wrk_StartBackup, DirName:=Wrk_Filepath, Cancel:=Wrk_CancelBackup);&#xD;
&#xD;
 // Get Interval Time&#xD;
 Wrk_TaskIntervalTime := GetMyTaskInterval();&#xD;
 // Increment state time&#xD;
 Wrk_TimeInState :=  ADD_TIME(In1:=Wrk_TimeInState, In2:=Wrk_TaskIntervalTime);&#xD;
 &#xD;
 Sts_SD_Unavailable := NOT Wrk_SD_Available;&#xD;
 Sts_BackupFailed := Wrk_BackupFailed;</Text></StructuredTextModel>