<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME:			Analog Input Advanced                                                                                                                                                                                                                                                                         &#xD;
//	CREATOR:		Helgevold - William Veim                                                                                                                                                                                                                                                              &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION		DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//	1.0.0				2025-04-22		William Veim			Initial release    &#xD;
//	1.0.1				2025-05-02		Ruben Byman			Fixed state control signal value out of range and added function to ignore in case of loop break. Added input to turn on/off loop break check&#xD;
// 1.0.2				2025-06-24		Jan Magne Dybvik	Added configuration for Alarm SMS Process value (Cfg_AlarmSMS_SignificantDigits and Cfg_AlarmSMS_UseUnitPrefix)&#xD;
// 1.0.3				2025-06-24		Jan Magne Dybvik  Added configuration of ProcessUnit and added assigment of unit to SCADA structure&#xD;
//&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		FUNKSJONALITET:&#xD;
//		*Analog input (signal value) &#xD;
//		*Scaling of raw value to signal value&#xD;
//		*Excecution of analog input logic&#xD;
//&#xD;
//===============================================================================================================================&#xD;
&#xD;
(*************************************************************************&#xD;
 *	BLOCK SPESIFIC PARAMETERS&#xD;
 *************************************************************************)&#xD;
 &#xD;
Wrk_SignalValue_Unit:= 			Cfg_SignalValue_Unit;&#xD;
Wrk_SignalValue_Y0:=				Cfg_SignalValue_Y0;&#xD;
Wrk_SignalValue_Y1:=				Cfg_SignalValue_Y1;&#xD;
Wrk_SignalValue_Min:= 			Cfg_SignalValue_Min;&#xD;
Wrk_SignalValue_Max:= 			Cfg_SignalValue_Maks;&#xD;
Wrk_RawValue_X0:= 				Cfg_RawValue_X0;&#xD;
Wrk_RawValue_X1:= 				Cfg_RawValue_X1;&#xD;
Wrk_RawValue_Min:=      		Cfg_RawValue_Min;&#xD;
Wrk_RawValue_Max:=				Cfg_RawValue_Max;&#xD;
Wrk_RawValueLoopBreak := 	Cfg_RawValue_LoopBreak;&#xD;
&#xD;
Wrk_AnalogInput_Logic.Cfg_ValueType:=FALSE; //INPUT VALUE TO LOGIC BLOCK IS SIGNAL VALUE&#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATE INPUT PARAMETERS&#xD;
 *************************************************************************)&#xD;
&#xD;
Wrk_AnalogInput_Logic.Inp_AlmSuppress:=				Inp_AlmSuppress;&#xD;
Wrk_AnalogInput_Logic.Inp_AlmSuppressDesc:=		Inp_AlmSuppressDesc;&#xD;
Wrk_AnalogInput_Logic.Inp_ModuleFault:=			Inp_ModuleFault;&#xD;
Wrk_AnalogInput_Logic.Inp_Value:=						ScaleTrans(SclIn:=Inp_RawValue, &#xD;
																									X0:=Wrk_RawValue_Min, &#xD;
																									Y0:=Wrk_SignalValue_Min, &#xD;
																									X1:=Wrk_RawValue_Max, &#xD;
																									Y1:=Wrk_SignalValue_Max);&#xD;
																									&#xD;
Wrk_AnalogInput_Logic.Inp_Value:=						LIMIT(MN:= Wrk_SignalValue_Min, &#xD;
																							In:=Wrk_AnalogInput_Logic.Inp_Value, &#xD;
																							MX:=Wrk_SignalValue_Max);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATE CONFIG PARAMETERS&#xD;
 *************************************************************************)&#xD;
Wrk_AnalogInput_Logic.Cfg_SignalValue_Y0:=		REAL_TO_UINT(Wrk_SignalValue_Y0);&#xD;
Wrk_AnalogInput_Logic.Cfg_SignalValue_Y1:=		REAL_TO_UINT(Wrk_SignalValue_Y1);&#xD;
Wrk_AnalogInput_Logic.Cfg_SignalValue_Unit:=		Wrk_SignalValue_Unit;&#xD;
Wrk_AnalogInput_Logic.Cfg_ControlCabinet:=		Cfg_ControlCabinet;&#xD;
Wrk_AnalogInput_Logic.Cfg_ControllerTAG:=			Cfg_ControllerTAG;&#xD;
Wrk_AnalogInput_Logic.Cfg_ProcessTAG:=				Cfg_ProcessTAG;&#xD;
Wrk_AnalogInput_Logic.Cfg_ProcessValue_Unit := Cfg_ProcessValue_Unit;&#xD;
Wrk_AnalogInput_Logic.Cfg_AlarmSMS_SignificantDigits :=	Cfg_AlarmSMS_SignificantDigits;&#xD;
Wrk_AnalogInput_Logic.Cfg_AlarmSMS_UseUnitPrefix :=	Cfg_AlarmSMS_UseUnitPrefix;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATING STATE CONTROL PARAMTERS&#xD;
 *************************************************************************)&#xD;
 //STATE 1 - Locked to "Input stuck"&#xD;
 //STATE 2 - Locked to "Process value out of range"&#xD;
 //STATE 3 - Locked to "Module fault"&#xD;
 &#xD;
Wrk_LoopBreak := Inp_RawValue = Wrk_RawValueLoopBreak;&#xD;
 &#xD;
Wrk_AnalogInput_Logic.Cfg_State4_InUse:= 	TRUE;&#xD;
Wrk_AnalogInput_Logic.Inp_State4_Desc:=	'Signal value out of range';&#xD;
IF Wrk_LoopBreak AND Cfg_LoopBreak_InUse THEN		//Ignores signal value out of range if loop break is active&#xD;
	Wrk_AnalogInput_Logic.Inp_State4_State := FALSE;&#xD;
ELSE&#xD;
	Wrk_AnalogInput_Logic.Inp_State4_State:=	Inp_RawValue &lt; Wrk_RawValue_Min OR Inp_RawValue &gt; Wrk_RawValue_Max;&#xD;
END_IF;&#xD;
&#xD;
IF Cfg_LoopBreak_InUse THEN&#xD;
	Wrk_AnalogInput_Logic.Cfg_State5_InUse:= 	TRUE;&#xD;
	Wrk_AnalogInput_Logic.Inp_State5_Desc:=	'Loop break';&#xD;
	Wrk_AnalogInput_Logic.Inp_State5_State:=	Wrk_LoopBreak;&#xD;
ELSE&#xD;
	Wrk_AnalogInput_Logic.Cfg_State5_InUse:= 	FALSE;&#xD;
	Wrk_AnalogInput_Logic.Inp_State5_Desc:=	'';&#xD;
	Wrk_AnalogInput_Logic.Inp_State5_State:=	FALSE;&#xD;
END_IF;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	EXCECUTING LOGICK BLOCK&#xD;
 *************************************************************************)&#xD;
 &#xD;
Wrk_AnalogInput_Logic(ENS:=TRUE, &#xD;
										Ext_AnalogValue:=	Ext_AnalogValue, &#xD;
										Int_Alarm:=				Int_Alarm); &#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATING FB OUTPUT&#xD;
 *************************************************************************)&#xD;
 &#xD;
Sts_Fault:= 								Ext_AnalogValue.EXT_General.State_Quality&gt;0;&#xD;
Sts_AlarmToken:=					Wrk_AnalogInput_Logic.Out_AlarmToken;&#xD;
Out_ProcessValue:= 				Ext_AnalogValue.EXT_Operator.ProcessValue;&#xD;
Out_ProcessValue_Percent := 	Ext_AnalogValue.EXT_Operator.ProcessValue_Percent;</Text></StructuredTextModel>