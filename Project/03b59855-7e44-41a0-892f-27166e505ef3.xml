<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//	NAME:			HE_OxygenControl                                                                                                                                                                                                                                                                           &#xD;
//	CREATOR:		Helgevold - William Veim                                                                                                                                                                                                                                                              &#xD;
//                                                                                                                                                                                                                                                                                                                            &#xD;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ &#xD;
//  VERSION LOG:                                                                                                                                                                                                                                                                                                   &#xD;
//	VERSION		DATE				SIGN						DESCRIPTION                                                                                                                                                                                                                                 &#xD;
//	1.0.0				2025-03-04		William Veim			Initial release                                                                                                                                                                                                                                  &#xD;
//	1.0.1				2025-04-23		Ruben Byman			Bugfix, added missing process value to PID&#xD;
//	1.0.2				2025-04-29		Ruben Byman			Added 4th sensor input, bug fix state control, added alarm trigger and suppression&#xD;
//&#xD;
//===============================================================================================================================&#xD;
//&#xD;
//		DESCRIPTION:    &#xD;
// 		Oxygen Control in Fish Tanks&#xD;
//		Uses a base dosing valve, PWM valve, control valve, and/or emergency valve as actuators.&#xD;
// 		The base dosing valve remains open as long as AMA=2.&#xD;
// 		Sets the desired oxygen saturation (%) in the tank. In automatic mode, the regulator adjusts the output to maintain a stable setpoint.&#xD;
// 		Configurable parameters in SCADA include P, I, and D values, setpoint, cycle time (for the PWM valve), minimum on-time (PWM valve), and minimum off-time (PWM valve).&#xD;
//		&#xD;
//==============================================================================================================================&#xD;
&#xD;
Ext_OxygenControl.EXT_General.PWMControl_Visible:=Cfg_PWM_InUse;&#xD;
&#xD;
 (*************************************************************************&#xD;
 *	INITIALIZE VARIABELS&#xD;
 *************************************************************************)&#xD;
 IF NOT Wrk_SwitchState_Init AND Ext_OxygenControl.EXT_Engineering.PV_AutoSwitchState = 0 THEN&#xD;
	  Ext_OxygenControl.EXT_Engineering.PV_AutoSwitchState := 2;&#xD;
	  Wrk_SwitchState_Init:=TRUE;&#xD;
 END_IF;&#xD;
&#xD;
(*************************************************************************&#xD;
 *	UPDATING PROCESS VALUE&#xD;
 *************************************************************************)&#xD;
&#xD;
HE_PVSelect(PV_Select:=Ext_OxygenControl.EXT_Operator.PV_Select, &#xD;
						PV_AutoSwitch:=Ext_OxygenControl.EXT_Engineering.PV_AutoSwitch, &#xD;
						PV_AutoSwitchState:=Ext_OxygenControl.EXT_Engineering.PV_AutoSwitchState, &#xD;
						PV_Actual=&gt;Wrk_ActualPV, &#xD;
						PV_Actual_Y0=&gt;Wrk_PV_Actual_Y0, &#xD;
						PV_Actual_Y1=&gt;Wrk_PV_Actual_Y1, &#xD;
						PV_NotAvailable=&gt;Wrk_PVNotAvailable, &#xD;
						PV1_Value:=Inp_OxygenValue_1, &#xD;
						PV2_Value:=Inp_OxygenValue_2, &#xD;
						PV3_Value:=Inp_OxygenValue_3,&#xD;
						PV4_Value:=Inp_OxygenValue_4);&#xD;
&#xD;
//Henter data til FB for valg av prosessverdi&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Wrk_ActualPV, AnalogValueSimplified=&gt;Ext_OxygenControl.EXT_Operator.PV_Actual);&#xD;
&#xD;
//Transfering all PV values to SCADA structure&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Inp_OxygenValue_1, AnalogValueSimplified=&gt;Ext_OxygenControl.EXT_Operator.PV_Value1);&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Inp_OxygenValue_2, AnalogValueSimplified=&gt;Ext_OxygenControl.EXT_Operator.PV_Value2);&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Inp_OxygenValue_3, AnalogValueSimplified=&gt;Ext_OxygenControl.EXT_Operator.PV_Value3);&#xD;
HE_AnaExdToAnaSimp(AnalogValue:=Inp_OxygenValue_4, AnalogValueSimplified=&gt;Ext_OxygenControl.EXT_Operator.PV_Value4);&#xD;
&#xD;
//Limits minimum on time to cycle time&#xD;
IF Ext_OxygenControl.EXT_Engineering.PWM_MinOnTime &gt; Ext_OxygenControl.EXT_Engineering.PWM_CycleTime THEN&#xD;
	Ext_OxygenControl.EXT_Engineering.PWM_MinOnTime:=Ext_OxygenControl.EXT_Engineering.PWM_CycleTime;&#xD;
END_IF;&#xD;
&#xD;
// Executes the PID control algorithm&#xD;
PID(&#xD;
	Run:=Ext_OxygenControl.EXT_Operator.Mode = 2,&#xD;
	ProcessValue:=Ext_OxygenControl.EXT_Operator.PV_Actual.ProcessValue,&#xD;
	SetpointValue:=Ext_OxygenControl.EXT_Operator.SP_Actual.ProcessValue, &#xD;
	Inp_Proportional_Band:=Ext_OxygenControl.EXT_Engineering.PID_P_band, &#xD;
	Inp_IntergrationTime:=Ext_OxygenControl.EXT_Engineering.PID_I_time, &#xD;
	Inp_DerivationTime:=Ext_OxygenControl.EXT_Engineering.PID_D_time,&#xD;
	RngUpLmt:=Wrk_PV_Actual_Y1, &#xD;
	RngLowLmt:=Wrk_PV_Actual_Y0,&#xD;
	ManResetVal:=0.0,&#xD;
	Direction:=FALSE,&#xD;
	ErrorMV:=0.0,&#xD;
	Output=&gt;Wrk_AutoGain);&#xD;
&#xD;
(*************************************************************************&#xD;
 *	CASE FOR CONTROL MODE&#xD;
 *************************************************************************)&#xD;
CASE Ext_OxygenControl.EXT_Operator.Mode OF&#xD;
&#xD;
	0: //OFF&#xD;
	Wrk_Emergency_Valve :=FALSE;&#xD;
	Wrk_MainDosing_Valve :=FALSE;&#xD;
	Wrk_PWM_Valve := FALSE;&#xD;
	&#xD;
	Ext_OxygenControl.EXT_Operator.PWM_OnTime:=0;&#xD;
	Ext_OxygenControl.EXT_Operator.PWM_OffTime:=0;&#xD;
	&#xD;
	Wrk_Gain :=0;&#xD;
	&#xD;
	2: //AUTO&#xD;
	&#xD;
	//Sets gain for analog valve&#xD;
	Wrk_Gain := Wrk_AutoGain;&#xD;
	&#xD;
	//Opens main dosing valve&#xD;
	Wrk_MainDosing_Valve := TRUE;&#xD;
	&#xD;
	// Calculates "ON time" for pulse-width modulation (PWM) based on output demand and cycle time&#xD;
	Ext_OxygenControl.EXT_Operator.PWM_OnTime:=REAL_TO_UINT(ScaleTrans(SclIn:=Wrk_AutoGain, &#xD;
					X0:=0.0, &#xD;
					Y0:=0.0, &#xD;
					X1:=100.0, &#xD;
					Y1:=Ext_OxygenControl.EXT_Engineering.PWM_CycleTime));&#xD;
&#xD;
	// Calculates "OFF time" for pulse-width modulation (PWM) based on cycle time and ON time&#xD;
	Ext_OxygenControl.EXT_Operator.PWM_OffTime:=Ext_OxygenControl.EXT_Engineering.PWM_CycleTime - Ext_OxygenControl.EXT_Operator.PWM_OnTime;&#xD;
	&#xD;
	// Timers for pulse-width modulation (PWM)&#xD;
	TON_CycleTime(PT:=SecToTime(In:=Ext_OxygenControl.EXT_Engineering.PWM_CycleTime));&#xD;
	TP_OnTime(PT:=SecToTime(In:=Ext_OxygenControl.EXT_Operator.PWM_OnTime+Ext_OxygenControl.EXT_Engineering.PWM_MinOnTime), Q=&gt;Out_PWM);&#xD;
	&#xD;
	// Start of timer for pulse-width modulation (PWM)&#xD;
	IF TON_CycleTime.Q THEN&#xD;
		TON_CycleTime.In := FALSE;&#xD;
		TP_OnTime.In := FALSE;&#xD;
	ELSE&#xD;
		TON_CycleTime.In := TRUE;&#xD;
		TP_OnTime.In := TRUE;&#xD;
	END_IF;&#xD;
	&#xD;
	// Initiates delay timer before engaging the emergency valve&#xD;
	TON_Emergency_Valve(PT:=SecToTime(Ext_OxygenControl.EXT_Operator.EmergencyValve_Delay));&#xD;
	IF PID.Processvalue &lt;= Ext_OxygenControl.EXT_Operator.EmergencyValve_Setpoint THEN&#xD;
		TON_Emergency_Valve.In := TRUE;&#xD;
	ELSE &#xD;
		TON_Emergency_Valve.In := FALSE;&#xD;
	END_IF;&#xD;
	&#xD;
	// Interval counter between forced valve openings&#xD;
	TON_EmergencyValve_TimeInterval(PT:=SecToTime(Ext_OxygenControl.EXT_Engineering.EmergencyValve_TimeInterval_Hours * 3600));&#xD;
	TOF_EmergencyValve_TimeInterval(PT:=SecToTime(Ext_OxygenControl.EXT_Engineering.EmergencyValve_TimeInterval_Duration));&#xD;
	&#xD;
	IF Ext_OxygenControl.EXT_Engineering.EmergencyValve_TimeInterval_Activate THEN&#xD;
		TON_EmergencyValve_TimeInterval.In :=TRUE;&#xD;
		IF TON_EmergencyValve_TimeInterval.Q THEN&#xD;
			TOF_EmergencyValve_TimeInterval.In :=TRUE;&#xD;
		ELSE&#xD;
			TOF_EmergencyValve_TimeInterval.In :=FALSE;&#xD;
		END_IF;&#xD;
		IF TOF_EmergencyValve_TimeInterval.Q THEN&#xD;
			TON_EmergencyValve_TimeInterval.In := FALSE;&#xD;
		END_IF;&#xD;
	ELSE &#xD;
		TON_EmergencyValve_TimeInterval.In :=FALSE;&#xD;
	END_IF;&#xD;
	&#xD;
	Wrk_Emergency_Valve:=TON_Emergency_Valve.Q OR TOF_EmergencyValve_TimeInterval.Q;&#xD;
END_CASE;&#xD;
&#xD;
  (*************************************************************************&#xD;
 *	STATE/FAULT CONTROL&#xD;
 *************************************************************************)&#xD;
&#xD;
//FAULT CONTROL&#xD;
//---------------------------&#xD;
Wrk_ConfigFault:=Ext_OxygenControl.EXT_Operator.SP_Actual.ProcessValue=0;&#xD;
&#xD;
// STATE CONTROL&#xD;
//------------------&#xD;
&#xD;
//Resetter variabler før løkke&#xD;
Ext_OxygenControl.EXT_General.Sts_Quality := 0;&#xD;
Wrk_ValueState:=	0;&#xD;
Wrk_AlarmState:=	FALSE;&#xD;
Wrk_AlarmSuffix:=	'';&#xD;
&#xD;
//No process value available&#xD;
Ext_OxygenControl.EXT_Engineering.StateCfg_1.Sts_State := Wrk_PVNotAvailable;&#xD;
Ext_OxygenControl.EXT_Engineering.StateCfg_1.Sts_Desc := 'Process value not available';&#xD;
HE_StateControl(Inp_StateData:=Ext_OxygenControl.EXT_Engineering.StateCfg_1, &#xD;
							Sts_Quality:=Ext_OxygenControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
			&#xD;
//Configuration fault&#xD;
Ext_OxygenControl.EXT_Engineering.StateCfg_1.Sts_State := Wrk_ConfigFault;&#xD;
Ext_OxygenControl.EXT_Engineering.StateCfg_1.Sts_Desc := 'Configuration fault';&#xD;
HE_StateControl(Inp_StateData:=Ext_OxygenControl.EXT_Engineering.StateCfg_2, &#xD;
							Sts_Quality:=Ext_OxygenControl.EXT_General.Sts_Quality, &#xD;
							Sts_ValueState:=Wrk_ValueState,&#xD;
							Sts_AlarmSuffix:=Wrk_AlarmSuffix,&#xD;
							Sts_AlarmState:=Wrk_AlarmState);&#xD;
&#xD;
CASE Wrk_ValueState OF&#xD;
	&#xD;
	0://Use value&#xD;
	Ext_OxygenControl.EXT_Operator.Actual_Gain:= Wrk_Gain;&#xD;
	&#xD;
	1://Hold value&#xD;
	Ext_OxygenControl.EXT_Operator.Actual_Gain:=Ext_OxygenControl.EXT_Operator.Actual_Gain;&#xD;
	&#xD;
	2://Pre defined output&#xD;
	Ext_OxygenControl.EXT_Operator.Actual_Gain:=Ext_OxygenControl.EXT_Engineering.StateCfg_PreDefinedOutput;&#xD;
	&#xD;
END_CASE;		&#xD;
&#xD;
// ALARM CONTROL&#xD;
//------------------&#xD;
&#xD;
//Suppress state&#xD;
Ext_OxygenControl.EXT_Alarm.EXT_Engineering.Sts_Suppressed := Inp_AlmSuppress OR (Cfg_AlmSuppress_IfOff AND Ext_OxygenControl.EXT_Operator.Mode = 0);&#xD;
IF Inp_AlmSuppress THEN&#xD;
	Ext_OxygenControl.EXT_Alarm.EXT_Engineering.Sts_SuppressedDesc := Inp_AlmSuppressDesc;&#xD;
ELSIF Cfg_AlmSuppress_IfOff AND Ext_OxygenControl.EXT_Operator.Mode = 0 THEN&#xD;
	Ext_OxygenControl.EXT_Alarm.EXT_Engineering.Sts_SuppressedDesc := 'Off mode';&#xD;
ELSE&#xD;
	Ext_OxygenControl.EXT_Alarm.EXT_Engineering.Sts_SuppressedDesc := '';&#xD;
END_IF;&#xD;
&#xD;
Wrk_AlarmGeneral.Inp_Connected_Cabinet:=				Cfg_ControlCabinet;&#xD;
Wrk_AlarmGeneral.Inp_Connected_Controller:=				Cfg_ControllerTAG;&#xD;
Wrk_AlarmGeneral.Inp_Process_Desc:=							Ext_OxygenControl.EXT_General.Process_Desc;&#xD;
Wrk_AlarmGeneral.Inp_Process_Suffix:=							Wrk_AlarmSuffix;&#xD;
Wrk_AlarmGeneral.Inp_Process_TAG:=							'';&#xD;
Wrk_AlarmGeneral.Inp_Process_Value:=							'';&#xD;
Wrk_AlarmGeneral.Inp_Trigger:=										Wrk_AlarmState;&#xD;
&#xD;
Wrk_AlarmGeneral(ENS:=TRUE, &#xD;
								Ext_Alarm:=Ext_OxygenControl.EXT_Alarm, &#xD;
								Int_Alarm:=Int_Alarm);	&#xD;
&#xD;
  (*************************************************************************&#xD;
 *	UPDATING OUTPUT&#xD;
 *************************************************************************)&#xD;
  //Updating output to FB block&#xD;
  Out_MainDosing	 := Wrk_MainDosing_Valve;&#xD;
  Out_PWM			 := Wrk_PWM_Valve;&#xD;
  Out_Emergency	 := Wrk_Emergency_Valve;&#xD;
  Out_Control_Valve			 := Ext_OxygenControl.EXT_Operator.Actual_Gain;&#xD;
 &#xD;
 //Updating structure&#xD;
 Ext_OxygenControl.EXT_Operator.SP_Actual.Process_TAG := 'Setpoint';&#xD;
 Ext_OxygenControl.EXT_Operator.SP_Actual.Process_Unit := Ext_OxygenControl.EXT_Operator.PV_Actual.Process_Unit;</Text></StructuredTextModel>